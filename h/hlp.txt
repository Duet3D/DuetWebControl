01 August 2016 (c) Pierre ROUZEAU  CC BY-SA - some pages by others - credited
Aquilegia help file.
You can write any comments before the first page.

■home
RepRap Firmware and Duet documentation
(:date 15 Aug 2016 03:09:)/*Avoid 'table of content' as title, as will be used elsewhere as general title*/(:notoc:)(:nonum:)
allb,Duet_WiFi_1.0+/=
===< Duet WiFi Quick start guide
*%Prerequisites%%
*%Getting connected%%
*%Troubleshooting%%
=/
===< Hardware
* %Duet WiFi: What are the differences?%Duet_WiFi_differences
* %Duet%Duet
* %Duet Wiring%Duet_wiring
* %Connecting end-stops%end_stops 
* %Connecting a Z probe%connecting_a_z_probe 
* %Connecting thermistors%Connecting_thermistors
* %Connecting thermocouples sensors%Connecting_thermocouples
* %Connecting PT100 temperature_sensors%Connecting_PT100
* %Connecting extruder heaters%connecting_extruder_heaters 
* %Connecting a bed heater%connecting_a_bed_heater 
* %Connecting chamber heater%connecting_chamber_heater 
* %Power wiring%power_wiring 
* %What could kill your Duet?%what_kill_duet 
* %Fans%Fans
* %choosing stepper motors%choosing_stepper
* %Duet pinout%Duet_pinout
===< Differences with other Hardware/Firmware
* %Wiring and hardware differences from RAMPS etc.%Duet_differences
* %Firmware differences from Marlin, Repetier etc.%RRF_differences
* %Slicing recommendations%%
===< Software 
* %RepRap Firmware%RepRap_Firmware
* %Duet Firmware Update%Duet_Firmware_Update
* %Duet WiFi G-codes and firmware differences%duet_wifi_firm_diff 
* %RepRap Firmware G-Codes%G-codes
* %RepRap Firmware macros%Macros
* %Updating RepRap Firmware config.g file%Updating_config
* %RepRap Firmware release notes%Release_notes
* %RepRap Firmware heating%Heating
* %Cartesian printer configuration%Cartesian_config
* %CoreXY printer configuration%CoreXY_config
* %Delta printer configuration%Delta_config
* %RepRap Firmware commissioning%Commissioning
* %Duet Web Control%Duet_Web_Control
* %FAQ%FAQ
===< Development	
* %Duet design%Duet_design
* %RepRap Firmware design%RepRap_Firmware_design
* %RepRap Firmware Status responses%Status_responses
===____________________ 
&nbsp; %About us%About

■menu
Menu
(:date 15 Aug 2016 03:09:)(:nodef:)(:notitle:)(:notoc:)(:nodate:)
allb,Duet_WiFi_1.0+/=
===< Duet WiFi start
*%Prerequisites%%
*%Getting connected%%
*%Troubleshooting%%
=/
===< Hardware
* %Duet%Duet
* %Duet WiFi:New?%Duet_WiFi_differences
* %Duet Wiring%Duet_wiring
* %End-stops%end_stops 
* %Z probe%connecting_a_z_probe 
* %Thermistors%Connecting_thermistors
* %Thermocouples%Connecting_thermocouples
* %PT100 sensors%Connecting_PT100
* %Extruder heaters%connecting_extruder_heaters 
* %Bed heater%connecting_a_bed_heater 
* %Chamber heater%connecting_chamber_heater 
* %Power wiring%power_wiring 
* %What kill Duet%what_kill_duet 
* %Fans%Fans
* %choosing stepper%choosing_stepper
* %Duet pinout%Duet_pinout
===< Differences
* %Wiring and hardware%Duet_differences
* %Firmware differences%RRF_differences
* %Slicing recommendations%%
===< Software 
* %RepRap Firmware%RepRap_Firmware
* %Duet Update%Duet_Firmware_Update
* %Duet WiFi:New?%duet_wifi_firm_diff 
* %G-Codes%G-codes
* %Macros%Macros
* %Updating config.g%Updating_config
* %Release notes%Release_notes
* %Heating%Heating
* %Cartesian printer%Cartesian_config
* %CoreXY printer%CoreXY_config
* %Delta printer%Delta_config
* %Commissioning%Commissioning
* %Web Control%Duet_Web_Control
* %FAQ%FAQ
===< Development	
*%Duet design%Duet_design
*%Firmware design%RepRap_Firmware_design
*%Status responses%Status_responses
===____________________ 
&nbsp; %About us%About

■hlpdef
Default page add directives or text at start of any page.
(:date 11 Aug 2016 02:05:)(:numtitle:)(:hlpfoot:)

■hlpfoot
Foot page add text at the bottom of the page, outside the title section, inside the page css class.
(:date 11 Aug 2016 02:05:) <div class="hlpsign" role="contentinfo">delivered by <a href="http://aquilegia.blue" target=\"_blank\">Aquilegia</a> &emsp; <div>

■hlpdiag
Writer tool box
(:date 11 Aug 2016 02:05:)<a href="javascript:hlpLoadAll(hlpListAll);">List all pages (after loading external pages)</a> This is not instant, please wait !

<a href="javascript:hlpLoadAll(hlpAllWeblnk);">List all web links (after loading external pages)</a>  
Links open in new window, so you can test one after the other while closing test window with [Ctrl]W. This is not instant, please wait !

<a href="javascript:hlpLoadAll(hlpAllImglnk);">Check linked images (after loading external pages)</a>This is not instant, please wait !

■About
About page
(:date 11 Aug 2016 02:05:)All pages published on this site are under licence CC BY-SA except where mentioned (GFDL 1.2).
Pages mostly authored by T3P3 (mentioned), DC42 (mentioned) and PRZ (not mentioned). Pages are mainly direct extracts from the "RepRap wiki http://reprap.org/wiki" where you can find the history and author where forgotten here. 
*Help is delivered by "Aquilegia module http://aquilegia.blue" <small>developed by Pierre ROUZEAU, aka PRZ, license GPLv2 or any later version</small>

*%Writer diagnostics%hlpdiag 

■what_kill_duet
What could kill your Duet ?
(:date 11 Aug 2016 02:05:)(:notoc:)
'Integral' board have some advantages in manufacturing cost and offer the best driver cooling, but a failure of one component may drive to a total loss of the board. Some failures could be repaired by equipped and handy people, but that may not be possible for a lot of users.

So, you shall be very cautious while testing and installing the board.
You shall always remember that if your board is connected to an USB cable, it is powered, so unpower the board also need to **unplug USB cable**.

==What can cause the loss of a board
*Swapping wires on the input power. There is no reverse polarity diode protection on the Duet, so it will be killed instantly. You shall be very cautious and note that the polarity of the different versions of the Duet are not the same. Look the serigraphy and the documentation. Use bicolour cables. 
*Unplugging a stepper while the board is powered. That also mean that if there is a wire which broke while in service, you can loose one driver or the full board. All Duets are now using Molex lockable plugs, so even if 'Dupont' connectors can be used, you shall always prefer the mating %Molex connector%duet_wiring!connectors on your cable. Remember board are thermally cycling at each start and an unlocked connector can slowly disengage and disconnect after months of service. 
*Shorting a power output (that includes the fan output). Too high current in a power driving MosFet may destroy it and possibly create a contact between the power supply and the command pin of the MosFet, so you will send your supply voltage to the processor, which will have no possibility to survive. Some have experienced that this "create a hole https://www.duet3d.com/forum/thread.php?id=88" in the processor. Being low power, the fan wiring is low size and often not mechanically protected, so the risk of short on a fan may be higher than on other power output. There is no wire of lesser importance than another. 
*Shorting anything on the board with a foreign object. "One user https://groups.google.com/forum/#!topic/deltabot/4snHKnXLuwo" had a nut falling on his board, shorting and destroying a driver. The whole board was inoperative, hopefully unsoldering the faulty driver revived the board. It is very frequent that control boards are left unboxed on printers. That may be ok for a board which cost 20 Euros, it is not for a board of 150Euros. Board shall be mechanically protected. The casing shall be in fireproof material, so prefer metallic casing to printed casing. Board placed under the printer, as often done on delta, are particularly exposed. 
*Sending more than 3.3V on an input pin. Duet processor are 3.3V only and an input of 5V may kill them. When using capacitive or inductive sensors, you need at least 6V to supply the sensor. The output level will be the same as the supply, so the signal voltage shall be reduced to connect it to the board. It is easy to make a voltage divider to reduce the signal voltage. However, if the low branch of the voltage divider get disconnected, the signal voltage will instantly became equal to the sensor supply and your processor will die. An instant false contact in the plug will suffice to loose your board. Using such solution need a mean to secure the input voltage. You can use an optoinsulator, like in "this example http://electronics.stackexchange.com/questions/43498/how-can-i-use-a-12-v-input-on-a-digital-arduino-pin", but you don’t need the resistor connected on vcc, as there is one in the board in serie with a LED. 
*Sending more than 3.3V on thermistor input. A frequent problem is the contact between a thermistor wire and the heater cartridge wire. Cables arriving on the hot-end heat block are quite exposed to movement and temperature. Wire break or wire contact with the heat block are common. If the thermistor input is connected to the power input because both are touching the heat block, that will blow your board. Try to evaluate what will occur if there are broken wire in this area. You shall secure the wires as such they cannot move sufficiently to contact the heat block in case of breakage.

== What is bad for the board, but it may survive:
*Shorting the 3.3V supply to ground. This is a quite common incident with people who don’t look the documentation and wire their endstops like on the Ramps or other printer boards, which short the central pin (3.3V) to the ground. This cause board reset when operating endstops and unpredictable behaviour. You are still at risk to loose the 3.3V regulator, but that may be repaired.

==How to avoid troubles
*Use lockable plugs
*Secure all wires, including static wires
*Secure the board
*Shield mechanically the board
*Don’t solder wires, use crimped junctions
*Don’t tin wire end
*Check all crimped connections
*Check that all screwed terminal are well tightened (don’t over-tighten) before powering the board (USB…)
*Avoid voltage divider for inputs
*Protect the wires arriving the hotend heat block

Never tin stranded wires which are connected to a board. Tinned wire end will change size with temperature cycling and miscontact is probable after some time. In addition, tinning the end make the wire locally stiff and create a weak point between the tinned and non tinned part. It is frequent that the wire movement will broke the wire at this place. Use crimped terminals.

■Prerequisites
Prerequisites
(:date 11 Aug 2016 02:05:)allb,Duet_0.85,Duet_0.6+/=
== Duet 0.8.5 and 0.6 Prerequisite
* A computer with an USB port
* To use the %Duet Web Control%duet_web_control, your computer shall be connected to an Ethernet network.
* A 3D printer with accessible cabling, for the Duet WiFi to control.
* Even for temporary test, board and wiring shall be secured.
* A multimeter
Optional, but practical for use with Mobile :
* A network which includes a WiFi access point.
* A computer, tablet or smartphone with WiFi client capability (this could be the same as the previous item, or a different device).

== Duex4 expansion board
There was an evolution of the Duex4, with some differences on the analog ground. The first versions require some hardware modifications
=/
allb,Duet_WiFi_1.0+/=
== Prerequisites for Duet WiFi
* A network which includes a WiFi access point.
* A computer connected to the network, with an available USB port.
* A computer, tablet or smartphone with WiFi client capability (this could be the same as the previous item, or a different device).
*  A 3D printer with accessible cabling, for the Duet WiFi to control.

== Duet WiFi Pre-production hardware limitations and known firmware issues
There are a limited number of hardware limitations and firmware issues which we are working through.
===Hardware limitations
* The DueX5 heater and stepper driver expansion board for Duet WiFi is not yet available, and the DueX4 expansion board is not compatible with the Duet WiFi expansion connector. Therefore you are limited to 3 axis and 2 extruder drives at present.
* The maximum recommended power input voltage is 25V. This is a permanent limitation, because the TMC2660 drivers are rated at 30V when supplying power to motors.
* On some pre-production boards in some wiring configurations, if you reset the Duet WiFi by pressing the Reset button when the motors are energised, then the stepper motors may move while the Reset button is held down. This is fixed in the production hardware.

===Duet WiFi known firmware issues
Version 1.14 firmware has the following known issues:
* Connecting to the Duet WiFi by name only works if your client device supports mDNS protocol (e.g. Apple Bonjour service). Otherwise you have to connect to it by IP address.
* The web server can only satisfy one request at a time. You can have the web interface open on several devices at once, however if you upload a large file over the web interface from one of them, the others will report timeout errors and disconnect.
* You cannot yet change microstepping on the fly during a print. You must re-home the printer after changing microstepping.
* If you do a software reset from the web interface (for example by accepting the invitation to reset the Duet after editing the config.g file and clicking Apply Settings, or by pressing the Emergency Stop button, or by sending M999), the web interface may report an AJAX error and disconnect. If this happens, just press the Connect button to reconnect.
* If your WiFi connection is unreliable then %Duet Web Control%duet_web_control may report an AJAX timeout error and disconnect. You can press the Connect button to reconnect, without affecting any print in progress.
* The diagnostic LED is not currently used. In future it will be used to indicate progress of firmware updates, and for other purposes.
* The PanelOne 20x4 text display is not yet supported in firmware, however PanelDue is fully supported.
* Some other planned firmware features (e.g. print suspend/resume on power fail/restore) are not yet implemented.
* The SSID and password of the WiFi access point that the DuetWiFi connects to must use only ASCII characters (so no accented characters).

Version 1.13 firmware (as installed on most pre-production DuetWiFi boards when they were shipped) had the following additional issues:

*  If you apply power via the USB connector before applying 12V or 24V power, then the stepper drivers will not be initialised properly, and in particular the microstepping will default to 256x. To avoid this, reset the Duet WiFi after applying 12V or 24V power if USB power was already applied. You can either press the reset button, send command M999, or press Emergency Stop in the web interface.
* If you do a software reset, for example by sending M999, or by pressing Emergency Stop in Duet Web Control, or by accepting Duet Web Control's invitation to restart after you make changes to the config.g file, then the stepper motors may move a little.

== Wiring is generally the same as the Duet 0.8.5 with the following differences:
* There are two Z motor connectors, wired in series. If you have only one Z motor, you must use two jumper plugs on the second Z motor connector. These should already be installed on your board. Remove them if you have two Z motors each with its own connector.
* The expansion connector pinout is different. Do not connect a DueX4 expansion board to the Duet WiFi.
* A separate connector is provided for thermocouple and PT100 interface boards. We have a small number of thermocouple and RTD interface boards available for beta testers whose 3D printers use thermocouples or RTDs.

See the section on Hardware and Wiring for wiring details. 
=/

■Getting connected
Getting connected on Duet WiFi
(:date 11 Aug 2016 02:05:)The board is supplied pre-programmed. To get started:

# Omit this step if your host computer runs an operating system other than Windows, or you have already installed this device driver for use with a Duet 0.6 or 0.8.5 running recent firmware. Go to RepRapFirmware on github and download duet.inf and duetinf.cat in Raw mode (i.e. click on the link to the file and then press the Raw button) to a folder on your computer. Under Windows 10 you can install it by opening the folder in File Manager and double-clicking on duet.inf. Under earlier versions of Windows, open Device Manager, find the "Unknown device" that appears when you connect the Duet, right-click on it, select Update Driver, select Have Disk, and browse to the duet.inf file.
#  If you will be using a PanelDue with the Duet WiFi, we recommend that you upgrade it to version 1.14 firmware. See the PanelDue instructions for how.
#  Connect the Duet WiFi board to your computer and check in Device Manager that it is correctly recognized, It should show up as “Duet 3D printer control electronics (COMnnn)” as below.
180L%1_comm.jpg (:clear:)
#  Connect Pronterface, Repetier Host or similar via USB. We suggest using just USB power initially, so do not connect the main 12V/24V power yet. Connect to the Duet WiFi using the COM port as allocated in 3. above - in this case COM3:
380L%2_pronterface.jpg (:clear:)
# You should get a report showing the printer is online:
260L%3_online.jpg (:clear:)
# You can check that the SD card is being read by sending M503 and should get a readout of the config.g file from SD card ending as below:
540L%4_503.jpg  (:clear:)
# As supplied, the config.g file on the SD card does not enable WiFi. From Pronterface, send command M552 S1 to enable it.
540L%5_552.jpg (:clear:)
# Wait 30 seconds, then use a computer, tablet or smartphone with WiFi client capability to scan for access points. You should find an open access point called Duet. Connect to it. If using a computer, disconnect any wired Ethernet connection, to force the computer to use the Duet access point. Enter the default IP address 192.168.1.1 in the address bar of your browser. You should get a page listing available WiFi networks.
# On that page, select your WiFi network and enter the network password. Please note: only ASCII characters are supported at present, so your password should not use accented characters. Also enter a name for your printer, or leave it as the default duetwifi.
# Check that you have entered the password correctly, then submit the data. You should get an “all done” response. Please note, this does not mean that you have entered the password correctly, because the password is not checked until the WiFi module restarts.
232L%6_wifisuccess.jpg (:clear:)
# From Pronterface, send command M552 S0 followed by M552 S1 to stop and restart WiFi. A few seconds later, you should get a response giving the IP address. If this does not happen, after 30 seconds check whether the Duet access point is still available, which would indicate that it failed to connect to your network.
580L%7_552.jpg (:clear:)
# Access the Duet WiFi web interface from a computer or tablet using one of the following methods:
* Enter the IP address that was displayed by Pronterface in your browser.
* If your computer or tablet supports multicast DNS (mDNS), then instead of the IP address you can enter the machine name you chose followed by “.local”, e.g. “duetwifi.local”. You can add mDNS support to a Windows machine by installing Apple’s Bonjour Print Services, or to a Linux machine by installing Avahi.
#  The DuetWebControl interface should be displayed. Initial page load may take around 15 seconds, depending on your network.
600L%8_dwc.jpg (:clear:)
  It should connect automatically but if it doesn’t, click on the blue Connect button.
# Once you have a reliable network connection, you may un-comment the M552 S1 command in config.g file so that the WiFi interface is enabled at startup. This can be done from within the web interface.
548L%9_settings.jpg (:clear:)
# Scroll down to the bottom of the page and click on Apply Settings. The settings will upload and you will be asked if you want to reboot the Duet - respond Yes.


■Troubleshooting 
Troubleshooting Duet WiFi
(:date 11 Aug 2016 02:05:)Problem: you can’t connect to the Duet via USB/Pronterface:
* First see if the DuetWiFi will start up if you don’t have networking enabled in config.g. With power off, remove the SD card, put it in a PC, and use a text editor to remove or comment out the M552 S1 command in config.g. Save the file, and also copy a known working DuetWiFiServer.bin file into the/sys directory. Eject or safely remove the SD card, put it back in the Duet WiFi, start it up. Check in Windows Device Manager or equivalent if the COM port for the DuetWiFi is present, and if so, try to connect Pronterface.
* If that doesn’t resolve the issue and you think you may have installed dud main firmware, use SAM-BA to install known good main firmware (see earlier).
* If starting up with network disabled allowed you to connect with USB/Pronterface, then install new WiFi server firmware.

Problem: you can connect to the Duet via USB/Pronterface, but not via WiFi:
* Connect via USB/Pronterface. Send M552 S0 to disable networking, then M552 S1 to enable it. Within a few seconds, a message should be returned indicating connection to the access point and the IP address.
* If after sending M552 S1 no IP address is displayed and the Duet WiFi becomes unresponsive to Pronterface commands, install new WiFi firmware.
* If after sending M552 S1 no IP address is displayed but the Duet WiFi remains responsive to Pronterface, then use a smartphone, tablet, laptop or other WiFi enabled device to see if the Duet access point is present. If so, follow the instructions given earlier for connecting it to your router.

■Duet_differences
Wiring and hardware differences from RAMPS etc.
(:date 11 Aug 2016 02:05:)If you are upgrading your 3D printer electronics from RAMPS or similar to Duet, these are the main hardware differences you need to take account of.
==Power
The Duet has a single 12V/24V power input for both the bed heater and everything else, whereas RAMPS has two power inputs. If your RAMPS system had a single PSU, you can feed both PSU cables into the single VIN terminal block on the Duet if they will fit, or else run a single heavy-duty cable from the PSU to the Duet. IMPORTANT! Be sure to connect the power leads to the terminals the right way round. The + and - terminals are marked on the underside of the board. The - terminal is on the side nearest the bed heater terminal block, and the + terminal is the one nearest the stepper motor connectors.

If your RAMPS system has two separate PSUs and you do not wish to use a single PSU instead, then connect the bed heater and its PSU as follows:
* One bed heater wire to the BED- pin on the Duet bed heater terminal block
* Other bed heater wire to the +ve output of the bed heater PSU
* -ve output of the bed heater PSU to the -ve side of the VIN terminal block (the -ve input from the main power supply goes here too).
* Do not connect the bed heater PSU +ve output to the Duet.

==5V Power
There is an onboard 5V converter from the main power input, but it can be disconnected if you prefer to use an external 5V supply. 

==Endstop switch connectors
The endstop switch connector pinout is different between Duet and RAMPS. If you are using simple micro-switches, connect them to the two outer pins of the 3-pin endstop connector. For other types of endstop, see the Duet wiring diagram. Active endstops must be compatible with 3.3V supply voltage. Sending **more than 3.3V** on your board may **kill** it.
There is onboard LED which need minimum current. If an active endstop cannot sunk the current required by the LED, it may not be capable to trigger. Dim LED is an indication of insufficient current drain.

The Duet has a single endstop connector for each axis. You configure whether this is a high or a low endstop in firmware.
You can define travel limits (machine dimensions) in firmware (for Cartesian and Delta), this will prevent the head to move outside the defined volume.

==Stepper motors
These are connected in the same way as for RAMPS. However, the two Z motor connectors are connected in parallel on RAMPS but in series on Duet. This gives better performance for the vast majority of stepper motors used in 3D printers, and avoids the need to run the driver at double the current.
allb,Duet_0.6,Duet_0.85+/=
Duet 0.6 and 0.8.5 have only one Z connector and a cable shall be assembled for serial connection.
480L%Steppers_in_series.jpg Warning! Steppers 6 pins plugs are not standardized and you shall check (with a multimeter) that for the board connector, each coil wire pair are on each side of the connector. 
(:clear:)
=/ 
allb,Duet_WiFi_1.0+/=
As shipped, the Duet WiFi has two jumpers fitted on the ZB connector, to allow operation with a single Z motor. If you have two Z motors, remove these jumpers and connect the second motor to ZB.
=/
Identical steppers shall turn in same direction. To have them running in opposite direction, swap the wires of one coil. By example, you can swap yellow and green wires on the Z2 stepper connector.

To avoid confusion, it is better to use identically wired cables, with same colors.

==Z probe
The Duet supports two different classes of Z probe:
* A probe with an analog output is connected to the connector labelled PROBE. The advantage of these types of probe is that the firmware can slow down the probing speed as the trigger height is approached. The voltage fed into the input pin must not exceed 3.3V.
* Probes with a digital output are connected to the E0 endstop switch input. The pin connections are not the same as for RAMPS (see earlier), and the voltage fed into the STP input must not exceed 3.3V.
* Servo-deployed Z probes are not currently supported.

==Support for LCD displays
The only LCD display currently supported is the PanelDue colour touch screen. However, you can control a Duet or Duet WiFi from any smartphone or tablet using the web interface, and the SD card socket is included in the electronics. So there is less need for an LCD control panel than with other electronics. 

■RRF_differences
Firmware differences from Marlin, Repetier etc.
(:date 11 Aug 2016 02:05:)The Duet and Duet WiFi run RepRapFirmware. This differs from Marlin in a number of ways:
* You do not need to build the firmware yourself unless you are a firmware developer. The firmware is supplied as a ready-built binary file. All important configuration parameters are defined within the /sys/config.g file on the SD card, which you can edit either in the web interface, or by moving the SD card to a PC and using an ordinary text editor such as Notepad++. You can also change these parameters on the fly by sending the appropriate G-codes. The homing behaviour is defined in homing files also on the SD card. Bed probing behaviour is defined in the bed.g file on the SD card. For more details, see %Configuring RepRapFirmware for a Cartesian_printer%Cartesian_config.
* Bed probing is done using G32, not G29.
* RepRapFirmware doesn’t yet have PID auto tune, however you can correct temperature undershoot/overshoot by increasing/decreasing the S parameter in the M305 commands in config.g (default is 1.0).

■Slicing recommendations
Slicing recommendations
(:date 11 Aug 2016 02:05:)For best accuracy we recommend slicing with relative extruder coordinates. This avoids the accumulation of rounding errors that firmwares suffer from when using absolute extruder coordinates.

RepRapFirmware supports multiple tools (i.e. print heads). You must always define which tool you want to use at the start of a print. If you are slicing for a single-tool machine, include T0 followed by M116 in your slicer start gcode.

RepRapFirmware supports firmware filament retract.
 
■Duet_WiFi_differences
Duet WiFi: What are the differences?
(:date 11 Aug 2016 02:05:)
* 120MHz ARM Cortex M4 processor (ATSAM4E8E) with 128Kb RAM and floating point unit, instead of 84MHz M3 (ATSAM3X8E) with 96Kb RAM as on the Duet.
* WiFi connection instead of wired Ethernet, supporting typically 800kbytes/sec file upload speed with a good wireless network connection.
* TMC2660 stepper drivers instead of A4982. These drivers support up to 256x microstepping, with optional 16x interpolation when using 16x microstepping.
* Variable microstepping.
* The maximum recommended supply voltage is 25V (reduced from 30V) due to the new driver chips.
* Auto ADC calibration
* Three controllable fans instead of two.
* Fans can be powered from VIN, from 5V, or using external power supplied through the centre pin of the VIN/5V selector block.
* Higher bed heater circuit current rating. [To be quantified]
* Connector for thermocouple and RTD daughter boards.
* Connector for a second Z motor.
* Connector for PanelOne 20x4 text display (not yet supported in firmware).
* Supply voltage monitoring.
* Larger terminal blocks for the extruder heater outputs.
* Diagnostic LED
* Support for up to five additional heaters and stepper drivers on the expansion bus, instead of four
* Other design changes to increase board resilience, improve safety, and reduce EMI

■Duet_WiFi_Firm_diff
Changes to config gcodes and firmware behaviour
(:date 11 Aug 2016 02:05:)
This is how the Duet WiFi firmware differs from the Duet 0.8.5 and 0.6.

*   Networking is disabled at startup by default. Use M552 S1 in config.g to enable it at startup.
*   You can use M552 S0 and M552 S1 to stop and start the WiFi connection at any time, not just in config.g. A M552 S1 command in config.g will only take effect after the rest of config.g has been fully processed.
*   At present, setting the IP address using M552 has no effect. The IP address will be allocated by your WiFi router using DHCP. Likewise, the M553 and M554 commands to set the netmask and gateway have no effect.
*   The M540 command (set MAC address) has no effect.
*   The M350 command to change microstepping is supported. See %M350%gcode_cvt!M350.3a_Set_microstepping_mode for details. For example, M350 X128 I0 will set the X drive to 128x microstepping without interpolation. The steps/mm will be adjusted automatically when you change microstepping. We suggest that in your config.g file you set microstepping before you set the steps/mm. Microstepping defaults to 16x with interpolation.
*   The thermistor series resistance defaults to 4700 instead of 1000 (R parameter in M305 command).
*    The bed thermistor resistance defaults to 100000 instead of 10000 (T parameter in M305 command). If you are using the DuetWiFi to control an Ormerod printer, you will need to use T10000 in the M305 P0 command.
*    The hot end thermistor B value defaults to 4388 (M305 command). This is the correct value for the Semitec 104GT-2 thermistor used in the popular E3D hot ends, to give accurate readings around 220C. For the Honeywell 135-104QAD-J01 thermistor used in RepRapPro hot ends, use 4138.
*    The M305 H and L parameters are still supported for the moment, but they should not be needed because the ADC is calibrated automatically. Please let us know if you find that you still need them.
*    By default, the X and Y axes are homed using endstop switches and the Z axis is homed using the Z probe. This is different from RepRapFirmware for the Duet 0.6 and 0.8.5, which use the Z probe to home the X axis by default as well.
*    The /www folder on the SD card is not used. Instead, the DuetWebControl files are compressed into a single file DuetWebControl.bin which is stored on the WiFi module.
*    The M997 command has additional options controlled by the S parameter, to update the WiFi firmware and DWC files.
*    FTP and Telnet are not supported. Telnet support may be added later.

■RepRap_Firmware
RepRap Firmware
(:date 11 Aug 2016 02:05:)3D printer RepRap Firmware run on 32 bits, ARM-based microprocessor.
allb,Duet_0.6,Duet_0.85+/=
On Duet 0.6 and 0.8.5, the processor used is  "Atmel SAM3X8E http://www.atmel.com/devices/SAM3X8E.aspx" , as found on the "Arduino Due https://www.arduino.cc/en/Main/ArduinoBoardDue." 
=/
allb,Duet_WiFi_1.0+/=
On Duet WiFi, the processor is an "Atmel SAM4E8E http://www.atmel.com/devices/ATSAM4E8E.aspx".
=/
This firmware is pre-compiled and flashed on the printer board. It is configured only with human editable files located on an SD-card plugged in printer board.  As such, there is no need to compile the software nor to install any development tool. 

Duet_WiFi_1.0-/=
The software can receive G-Code from the USB serial port, the SD card and the Ethernet interface.
=/
allb,Duet_WiFi_1.0+/=
On Duet WiFi, the software can receive G-Code from WiFi connection.
=/
It can runs from an interface connected via USB, but most users prefers to operate from a %web interface%Duet_Web_Control , with the board connected to an Ethernet network, after uploading the file to be printed via this web interface.

The RepRap Firmware philosophy is that every operation is done with G-code, notably all configuration.  

The set of %RepRap Firmware G-Codes%G-codes is more extended  than other firmwares.

The %configuration file%Updating_config  is read on SD card at start-up.  

There is now a "web configurator https://configurator.reprapfirmware.org" which create a %config.g%updating_config file from interactive interface.

All %G-code%G-codes or macros could be send to the board while operating the printer, allowing instant feed-back for any configuration modification. As interactive modifications are lost at next board start-up, the successfully tested G-Codes shall be manually introduced in the configuration file, which can be edited directly in the web interface. 
allb,Duet_0.6,Duet_0.85+/=
544%RRF_Functional.png
=/
allb,Duet_WiFi_1.0+/=
544%RRF_connect_DWiFi.png
=/
Motor current could be adjusted with %a G-Code%gcode_cvt!M906.3a_Set_motor_currents.

This interactive configuration makes the printer commissioning and tuning easier than with other firmware. 

Some automation is possible %through macros%G-codes!Macros_and_physical_interfacing. 

The software is evolving constantly. See %RepRap Firmware FAQ%FAQ
(:clear:)

== Printer geometries and adjustment 
Miscellaneous geometries are handled
* Cartesian
* Delta (trajectories are calculated without segmentation) with %X,Y,Z scaling correction%gcode_cvt!M579.3a_Scale_Cartesian_axes  
* %CoreXY,  CoreXZ, CoreYZ%gcode_cvt!M667.3a_Select_CoreXY_mode
You can instruct the firmware to take into account machine building imprecisions
* %X/Y/Z angular correction%gcode_cvt!M556.3a_Axis_compensation 

== Automatic calibration 
Automatic calibration can be done with a Z-sensor.  For delta printers, there is an algorithm evaluating some geometry parameters. This is sufficiently fast to be run at each print during the heating phase, and so printer thermal expansion is taken into account. 

== Connectivity 
allb,Duet_0.6,Duet_0.85+/=
448%RRF_connection1.png 
=/
448%RRF_connection2.png 
When Duet board is connected via Ethernet, any Ethernet or WiFi device having access to your network can operate the printer with a %web interface%Duet_Web_Control .

RepRapPro have released a "video http://vimeo.com/80747275" (outdated) showing the %web interface%Duet_Web_Control  in use with the "Ormerod http://reprap.org/wiki/Ormerod" printer. Forum user dc42 has published a series of "blog posts https://miscsolutions.wordpress.com/2015/01/04/upgrading-the-mini-kossel-to-duet-electronics-part-1-hardware" showing how to use the Duet to control a Mini "Kossel printer http://reprap.org/wiki/Kossel"
The web interface is independant of the Firmware and communicate with it via G-codes, getting data with %querying G-codes%Status_responses (this is invisible for the user). 

Loosing a connection to the printer does not have any effect on the print, but you cannot pause a print through interface without having a connection (which could be with another device than the one which started the print). 

Multiple printers could be operated from one browser.

One printer can be accessed simultaneously from multiple network devices, possibly through WiFi. 

The image of any camera accessible on your network (IP camera) can be embedded in the web interface. 

The web interface is available in English, French, Spanish, Swedish and Chinese.
(:clear:)

== SD-card file architecture 
To operate, the firmware need the following files to be present on the SD-card - names are case sensitive:
allb,Duet_WiFi_1.0+/=
The Duet WiFi requires the following folders on the SD card:
150L%DuetWiFiSDfolders.png
(:clear:)
=/
allb,Duet_0.6,Duet_0.85+/=
The wired Duets use the following folder structure:
150L%DuetSDfolders.png
=/
Folder **/gcodes** is used to hold gcode files for printing. You can use subfolders of /gcodes to organize these files.

Folder **/macros** is used to hold used-defined macro files. The names of these files appear as menu entries in DuetWebControl and on PanelDue.  You can use subfolders of /macros to organize these files. See a typical set of %RepRap Firmware macros%Macros.
Folder **/sys** is used to hold system files and to hold firmware update files ready for installation. It should contain at least the following files:
* **config.g** holds the firmware configuration script, which is executed at startup.
* **homex.g**, **homey.g**, **homez.g** and **homeall.g** are the homing scripts for a Cartesian or CoreXY printer. For a delta printer there is **homedelta.g** instead.
***bed.g** holds the script for probing the bed and calculating bed compensation on a Cartesian or CoreXY printer, or doing delta calibration on a delta printer.
* **pause.g** is run when you pause a print.
* **resume.g** is run when you resume a print.
* **cancel.g** is optional, but if present is run when you cancel a paused print.
* **stop.g** is optional, but if present is run when a print finishes normally with an M0 command at the end of the print job.
* **iap4e.bin** for DuetWiFi, **iap.bin** for Wired Duets is a helper file used to install new main firmware.
*If your Z probe needs to be deployed and retracted, it is customary to use script files **deploy.g** and **retract.g** to do these. You must call these explicitly from within bed.g using the M98 command.
*On Wired Duets, the /www folder and its subfolders hold the files served by the web server. On the Duet WiFi these files are held on the WiFi module instead. These files are served directly by the board to the browser and all interface processing is done by the browser (the web interface is programmed in Javascript).

(:clear:)
The  %configuration file%Updating_config '/sys/config.g' is in '/sys' directory

All macros and system files shall be edited with any text editor for adaptation to a given machine. Kit sellers supply already configured SD image and/or pre-loaded SD-card. An SD-card supplied by user shall be formatted in FAT32 with 32 kB clusters prior use, manufacturer pre-formatting being often troublesome.

allb+/=
== Compatible hardware 
*%Duet%Duet (all versions : 0.6, 0.8.5, Duet WiFi 1.0)
*"RADDS http://reprap.org/wiki/RADDS", but without Ethernet connection, this can only be operated with a front-end program
*"Alligator Board http://reprap.org/wiki/Alligator_Board" – there was a "port of DC42-1.09k http://forums.reprap.org/read.php?13,500749,562244#msg-562244" , but there is no details about this port.
=/

== SD card 
An SD card is in principle delivered with boards (Duets), but as the Ethernet speed depends mostly from the performance of the SD-card, it may be wise to buy a better performing SD card. "Sustained transfer speeds http://forums.reprap.org/read.php?416,664836" for large files go from 200 to 900 kB/sec (for DC-42 fork > 1.12).

Note that the performance of the boards indicated by the manufacturers are for long files, while the firmware proceeds with short burst which may prove slow on supposedly fast cards, so your experience may vary.

== Configuration 
allb,Duet_0.6,Duet_0.85+/=
If building your own machine, you shall first choose the Firmware fork you want to use. There are three up-to date forks available :
* DC42 fork for %Duet%Duet board
* Chrishamm fork, derived from the DC42 fork and very close to it (Chrishamm develop the web interface)
* Dan Newman fork, to be used with "RADDS http://reprap.org/wiki/RADDS" board, development stopped on April, 21, 2016. 

Each fork propose a complete SD-card image, with files that you will adapt to your own machine, using any text editor. 
=/
Boards are delivered with a firmware flashed, however you shall systematically %update it%Duet_Firmware_Update  before starting the commissioning of your machine.

Duet_WiFi_1.0-/=
Recent firmware can be updated with simple file uploading over the network.
=/
Macros files could be uploaded through web interface. System macros are automatically uploaded in '/sys' directory, others in '/macros' directory

Configuration file can be %uploaded through web interface or edited directly in the interface%Updating_config .

Duet_WiFi_1.0-/=
For Wired Duets, image update or multiple file manipulation could be done %with FTP%Duet_Firmware_Update!Use_FTP_to_transfer_new_files_on_the_SD_card  without removing the SD card.

For common operation, there is no need to edit any file of the web interface, however depending browser configuration, users may prefer to %configure some files%Duet_Web_Control!Special_configuration  for better usability. 
=/

=== Configuration and commissioning 
*%Configuring for a Cartesian printer%Cartesian_config
*%Configuring for a CoreXY printer%CoreXY_config
*%Configuring and calibrating a delta printer%Delta_config
Duet_WiFi_1.0-/=
*"T3P3 guide to the config.g and homing files http://blog.think3dprint3d.com/2015/02/reprapfirmware-config-files.html" for Cartesian printers
* Preconfigured config.g files for various printers: "https://github.com/reprappro/RepRapFirmware/tree/test/SD-image" and "https://github.com/dc42/RepRapFirmware/tree/dev/SD-image"
* RepRapPro guide for commissioning Duet-based printers, including updating firmware: "https://reprappro.com/documentation/commissioning-introduction/commissioning-duet/." You may also find their wiring diagrams for the Ormerod, Huxley and Mendel useful.
* Duet troubleshooting guide: "https://reprappro.com/documentation/troubleshooting-introduction/electronics-problems"
*"Using Duet with wifi router on blog.think3dprint3d.com http://blog.think3dprint3d.com/2014/04/using-duet-with-wifi-router.html"
=/
*DC42 fork allow external driver to be connected on the %expansion connector%Duet_pinout and remapped with %M569%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values" . See "http://forums.reprap.org/read.php?178,552124,552305"
*Useful %RepRap Firmware macros%Macros
*%RepRap Firmware heating%Heating for configuration and tuning of heating loops
*%Connecting thermistors%Connecting_thermistors
*%Connecting thermocouples sensors%Connecting_thermocouples
*%Connecting PT100 temperature sensors%Connecting_PT100
*%RepRap Firmware release notes%Release_notes

== Firmware binaries 
allb,Duet_WiFi_1.0+/=
=== Duet WiFi
*The official (dc42) binaries of the main firmware (DuetWiFiFirmware.bin are available at https://github.com/dc42/RepRapFirmware/tree/dev/Release. Chrishamm intends to produce a Duet WiFi build of his fork of RepRapFirmware, his releases are at https://github.com/chrishamm/RepRapFirmware/tree/dev/Release.
*The WiFi module firmware (DuetWiFiServer.bin) is available here [link TBA].
*The packaged web interface file (DuetWebControl.bin) is available here https://github.com/dc42/DuetWebControl/tree/master/Release.
*The firmware update helper file (iap4e.bin) is available at https://github.com/dc42/DuetIAP/tree/master/Release and https://github.com/chrishamm/DuetIAP/tree/master/Release.
*If you want to connect to your Duet WiFi via USB then you may need the two Windows device driver files here https://github.com/dc42/RepRapFirmware/tree/dev/Driver.
*If you need to re-install the main firmware via USB, you will need Atmel's SAM-BA version 2,16 from http://www.atmel.com/tools/atmelsam-bain-systemprogrammer.aspx.
*If you want to connect to your Duet WiFi via USB then you may need the two Windows device driver files here https://github.com/dc42/RepRapFirmware/tree/dev/Driver.
=/

allb,Duet_0.85,Duet0.6+/=
=== Duet 0.8.5 or 0.6
*The best supported versions of the main firmware file for the Duet 0.8.5 and 0.6 (RepRapFirmware.bin) are dc42's fork from https://github.com/dc42/RepRapFirmware/tree/dev/Release and chrishamm's fork from https://github.com/chrishamm/RepRapFirmware/tree/dev/Release. The version in the RepRapPro master repository is very old and no longer maintained.
*The web interface (Duet Web Control) is maintained by chrishamm. The files are available at https://github.com/chrishamm/DuetWebControl.
*The firmware update helper file (iap.bin) is available at https://github.com/chrishamm/DuetIAP/tree/master/Release and https://github.com/dc42/DuetIAP/tree/master/Release.
*If you need to re-install the main firmware via USB you will need the Arduino version of bossac. This is packaged in the SAM processor add-on pack for Arduino. You can also download the Windows executable version of bossac from https://github.com/dc42/RepRapFirmware/tree/dev/Tools/Windows.
* Dan Newman " port on RADDS board https://github.com/dcnewman/RepRapFirmware/tree/dev/Release"
* Original RepRapPro firmware binaries (no longer maintained, and not for deltas or CoreXY machines): "https://github.com/reprappro/RepRapFirmware/tree/master/Release"
=/

*%Release notes for DC42 firmware fork and Duet Web Control%Release_notes 

==Further reading
* "Official Think3DPrint3D Duet documentation https://docs.google.com/document/d/1DAr1vqM0WEwobSHbTGT9Oy9M4HotH0ahYKY_W5eO0Ok/pub"
* %Duet%Duet

■RepRap_Firmware_design
==RepRap Firmware design
(:date 11 Aug 2016 02:05:)**RepRap Firmware** is intended to be a fully object-oriented highly modular C++ control program for
RepRap self-replicating 3D printers.

It owes a lot to "Marlin http://reprap.org/wiki/Marlin" and to the original RepRap "FiveD Firmware http://reprap.org/wiki/FiveD_Firmware".  

It was written by Adrian at "RepRapPro Ltd http://reprappro.com".

It is "on Github here https://github.com/reprappro/RepRapFirmware".

A complete uploadable executable version for the %Duet%Duet is in the directory Release/RepRapFirmware.bin in that
repository.  For details of how to flash it to a Duet %see here%Duet_Firmware_Update .

For details of how to compile the source code, see below.

== General design principles 
* Control by RepRap G Codes.  These are taken to be machine independent, though some may be unsupported.
* Full use of C++ OO techniques,
* Make classes hide their data,
* Make everything except the Platform class (see below) as stateless as possible,
* No use of conditional compilation except for #include guards - if you need that, you should be forking the repository to make a new branch - let the repository take the strain,
* Concentration of all machine-dependent defintions and code in Platform.h and Platform.cpp,
* No specials for (X,Y) or (Z) - all movement is 3-dimensional,
* Except in Platform.h, use real units (mm, seconds etc) throughout the rest of the code wherever possible,
* Try to be efficient in memory use, but this is not critical,
* Labour hard to be efficient in time use, and this is  critical,
* Don't abhor floats - they work fast enough if you're clever,
* Don't avoid arrays and structs/classes,
* Don't avoid pointers,
* Use operator and function overloading where appropriate.

=== Naming conventions 
* #defines are all CAPITALS_WITH_OPTIONAL_UNDERSCORES_BETWEEN_WORDS
* No underscores in other names - MakeReadableWithCapitalisation
* Class names and functions start with a CapitalLetter
* Variables start with a lowerCaseLetter
* Use veryLongDescriptiveNames

=== Structure 
There are eight main classes:
* RepRap
* GCodes
* Heat
* Move
* Tool
* Platform, and
* Webserver
* PrintMonitor

==== RepRap 
This is just a container class for the single instances of all the others, and otherwise does very little.

==== GCodes 
This class is fed GCodes, either from the web interface, or from GCode files, or from a serial interface,
Interprets them, and requests actions from the RepRap machine via the other classes.

==== Heat 
This class implements all heating and temperature control in the RepRap machine.

==== Move 
This class controls all movement of the RepRap machine, both along its axes, and in its extruder drives.

==== Tool 
This class allows the definition of tools.  A tool is zero or more heaters associated with zero or more drives.  The heaters can be set to different temperatures, and the drives can be set to go at different (and varying) speeds.  This allows the easy implementation of multiple-head machines, mixing-head machines and so on.

==== Platform 
This is the only class that knows anything about the physical setup of the RepRap machine and its
controlling electronics.  It implements the interface between all the other classes and the RepRap machine.
All the other classes are completely machine-independent (though they may declare arrays dimensioned
to values #defined in Platform.h).

==== Webserver 
This class talks to the network (via Platform) and implements a %webserver%Duet_Web_Control  to give an interactive
interface to the RepRap machine.  It uses the Knockout and Jquery Javascript libraries to achieve this.

=== Implementation 
When the software is running there is one single instance of each main class, and all the memory allocation is
done on initialization.  new/malloc should not be used in the general running code, and delete is never
used.  Each class has an Init() function that resets it to its boot-up state; the constructors merely handle
that memory allocation on startup.  Calling RepRap.Init() calls all the other Init()s in the right sequence.

There are other ancillary classes that are declared in the .h files for the master classes that use them.  For
example, Move has a DDA class that implements a Bresenham/digital differential analyser.

==== Timing 
There is a single interrupt chain entered via Platform.Interrupt().  This controls movement step timing, and
this chain of code should be the only place that volatile declarations and structure/variable-locking are
required.  All the rest of the code is called sequentially and repeatedly as follows:

All the main classes have a Spin() function.  These are called in a loop by the RepRap.Spin() function and implement
simple timesharing.  No class does, or ever should, wait inside one of its functions for anything to happen or call
any sort of delay() function.  The general rule is:

<<
  Can I do a thing?
    Yes - do it
    No - set a flag/timer to remind me to do it next-time-I'm-called/at-a-future-time and return.
>>

The restriction this strategy places on almost all the code in the firmware (that it must execute quickly and
never cause waits or delays) is balanced by the fact that none of that code needs to worry about synchronization,
locking, or other areas of code accessing items upon which it is working.  As mentioned, only the interrupt
chain needs to concern itself with such problems.  Unlike movement, heating (including PID controllers) does
not need the fast precision of timing that interrupts alone can offer.  Indeed, most heating code only needs
to execute a couple of times a second.

Most data is transferred bytewise, with classes' Spin() functions typically containing code like this:

<<
  Is a byte available for me?
    Yes
      read it and add it to my buffer
      Is my buffer complete?
         Yes
           Act on the contents of my buffer
         No
           Return
  No
    Return
>>

Note that it is simple to raise the "priority" of any class's activities relative to the others by calling its
Spin() function more than once from RepRap.Spin().

=== Compiling from Source 
The following instructions relate to the original RepRapPro version of RepRapFirmware, which is no longer maintained. The current maintained forks by dc42, chrishamm and dcnewman all use different (and generally simpler) build procedures, as described in the corresponding github repositories.

The "Think3dPrint3d blog http://blog.think3dprint3d.com/2014/03/Setting-up-Eclipse-for-Arduino-Due-and-Duet.html" has a post on how to setup Eclipse to modify and compile the firmware with printer specific options, the ultimate aim to to have all printer specific options set by g-code. See also this "thread about compilation http://forums.reprap.org/read.php?340,491795" .

RepRap Firmware was developed using the Eclipse IDE, which is much more powerful for big software projects than the Arduino IDE.

We use Eclipse Juno, which is "available here http://www.eclipse.org/downloads/packages/eclipse-ide-cc-developers/junosr1"

You will also need the Eclipse Arduino support "available here http://www.baeyens.it/eclipse/Install.html"

And the Arduino IDE itself (make sure you get the latest stable one for the Due/Duet), which is "available here http://arduino.cc/en/Main/Software"

Start by getting the Arduino IDE programming your Duet with a simple Hello World program that prints to the USB (SerialUSB.print("Hello World"); on the Due/Duet, not Serial.print("Hello World");... )

Then install Eclipse and the Arduino plugin.

Make temporary copies of RepRapFirmware.cpp and RepRapFirmware.h from your download in another folder (you will only need to do this once).

Finally use Eclipse to open the Arduino project called RepRapFirmware in the folder where you have downloaded the RepRap Firmware code.  Tell Eclipse to use the Arduino-libraries files you downloaded as the local libraries.  Eclipse will complain that the project already exists (which it does - it is your download).  Ignore this and it will open the project anyway.  

Annoyingly the first time it may also overwrite RepRapFirmware.cpp and RepRapFirmware.h.  So close the project, overwrite its overwrites with the two files you saved, open the project again and refresh it.  Everything should now be ship-shape.  Add the libraries: 
* Wire
* EMAC
* Lwip
* MCP4461
* SamNonDuePin
* SD_HSMCI

to your project.  Under no circumstances be tempted to add standard Arduino libraries for devices like Ethernet - these are for the Due, and will not work on the Duet.

You should now be able to compile the code and upload the result to the Duet.

■G-codes
==G-codes for RepRap Firmware
(:date 11 Aug 2016 02:05:)The %RepRap Firmware%RepRap_Firmware (abbreviated RRF) does use %more G-codes%gcode_cvt than other firmwares notably because all configuration is done with G-Codes. Another reason is that it does have extended functionalities.

This page list G-codes interpreted by RepRap Firmware. This list cover "DC42 https://github.com/dc42/RepRapFirmware/tree/dev/Release" and "Chrishamm https://github.com/chrishamm/RepRapFirmware/tree/dev/Release" forks, which are more complete than the original version.
Some G-Codes are common between RepRap Firmware and other firmwares, but with extended syntax or specific interpretation. They are listed in a specific paragraph.

== With RepRap firmware, everything is G-code 
The RepRap Firmware philosophy is that every operation is done with G-code, notably all configuration, which is mainly stored in %config.g%Updating_config file, called at board start-up. A set of standard or specifically crafted %G-codes macros%Macros is written for all commons printer operation. 

All G-codes or macros could be send to the board while operating the printer, allowing instant feed-back for any configuration modification. As interactive modifications are lost at next board start-up, the successfully tested G-Codes shall be manually introduced in the configuration file. 

This interactive configuration makes the printer tuning easier than with other firmware. 

== Typical parameters 
Most commands (M or G) are associated with parameters, typically Pnnn, Paaa or Xnnn. It shall be noted that the parameter qualifying letter is NOT part of the parameter, e.g. parameter PMyName is "MyName". 

Commonly used parameter qualifiers are:
*Pnnn or Paaa - Main parameter
*Rnnn  - other parameter
*Snnn  - other parameter, also often used to modify command behaviour (S0~S9)
*Tnnn  - typically Tool number, trigger number for M581 and M582
*Xnnn, Ynnn, Znnn - parameter associated with an axis
*Fnnn  - feedrate
*Hnnn or Hn:n:n  - Height or Heater/sensor number 
*En or En:n:n  - Parameter associated with extruder 0,1, etc. to 5
*Dn or Dn:n:n - Extruder drive -For extruders E0 correspond to drive 0, E1 to drive 1 (M563)
*Rn - enable value - for different hardware needing positive or negative signal to be enabled - M569
*Bnnn - Safe printing radius (M665), baud rate (M575)
*Wnnn - Maximum value of accumulated Integral - M301 and M304

Sometimes a "-1" value is used to cancel a command.

It shall be noted that Extruder number, Tool number, Heater number and Drive number are separated entities which need to be associated one with the other. There are default associations between drives and movement/extruder axis.

Note that internal firmware drive reference are : 0:X; 1:Y; 2:Z; 3:E0; 4:E1; 5:E2; 6:E3; 7:E4; 8:E5 as used in M569 and when linking %end stops pins%Duet_pinout  to drives.

Printing files G-codes are analysed by web interface for layer count. Excluding specific g-code  (typically at start or end) from this analysis can be done while writing a comment starting with ";E" or "; E".

== Default values 
Most configuration G-codes have default values, and if the default are acceptable, you don't need to enter the G-Code, so config.g could be for some printers very simple. 

However, sometimes the default values got modified in firmware update, so it is wise to explicitly define all your parameters, to avoid troubles while updating and also to document them. 
Some default values (DC42 fork rev 1.11): 
*Steppers idling current percentage (current reduced after inactivity delay): 30% set by %M906 Inn%gcode_cvt!M906.3a_Set_motor_currents. One setpoint for all steppers.
*PID parameters (%M301%gcode_cvt!M301.3a_Set_PID_parameters) for hotend heater : P10 I0.1 D100 T0.4 W180 B30
*Bed control default is bang-bang (P-1)(%M304%gcode_cvt!M304.3a_Set_PID_parameters_-_Bed), other parameters: I5 D500 T2.7 W255 B5 -for PID control, you may start with P85
*PWM frequency 10Hz for Bed and Chamber heaters (SSR compatible) and ?? Hz for Hotend heaters - not adjustable
*Thermistors - all- (%M305%gcode_cvt!M305.3a_Set_thermistor_and_ADC_parameters):  T100000 B4138 R1000 L0 H0 X3
*Steps/mm (%M92%gcode_cvt!M92.3a_Set_axis_steps_per_unit):  X200 Y200 Z200 E304.5:304.5:420:420:420:420
*Maximum feedrates mm/min (%M203%gcode_cvt!M203.3a_Set_maximum_feedrate): X25000 Y25000 Z25000 E8000:8000:1200:1200:1200:1200
*Accelerations mm/s^2 (%M201%gcode_cvt!M201.3a_Set_max_printing_acceleration): X500 Y500 Z20  E250:250:250:250:250:250 - for comparison gravity acceleration is 9810 mm/s^2
*Maximum jerk rates mm/min (%M566%gcode_cvt!M566.3a_Set_allowable_instantaneous_speed_change): X1200 Y1200 Z800  E500:500:120:120:120:120
*Time allowed to get to temperature on hotend heaters (%M570%gcode_cvt!M570.3a_Set_heater_timeout): 150 seconds.
*Filament (%M404%gcode_cvt!M404.3a_Filament_width_and_nozzle_diameter) width: 1.75mm, nozzle diameter: 0.50mm
*Controllable fans (%M106%gcode_cvt!M106.3a_Fan_On): Fan0, NOT inverted, 500Hz. Fan1, NOT inverted, 500Hz, thermostatic mode, 45°C.
*Maximum hot-end temperature (%M143%gcode_cvt!M143.3a_Maximum_hot-end_temperature): 260°C since DC42 v1.12, formerly 300°C. <span style="color:#ff0000">- MODIFIED -</span>

==Codes specific to RepRap Firmware 
===Macros and physical interfacing
*%M98: Call Macro/Subprogram%gcode_cvt!M98.3a_Call_Macro/Subprogram
*%M99: Return from Macro/Subprogram%gcode_cvt!M99.3a_Return_from_Macro/Subprogram 
*%M42: Switch I/O pin%gcode_cvt!m42.3a_switch_i.2fo_pin Change status of a pin. Hardware dependant - also used by other firmware.
*%M571: Set output on extrude%gcode_cvt!M571.3a_Set_output_on_extrude - Activate a pin while extruding
*%M577: Wait until endstop is triggered%gcode_cvt!M577.3a_Wait_until_endstop_is_triggered 
*%M581: Configure external trigger%gcode_cvt!M581.3a_Configure_external_trigger  Run macro, pause or stop from a pin state change. See %expansion connector pinout%Duet_pinout  <span style="color:#ff0000">- New (1.13) -</span> 
*%M582: Check external trigger%gcode_cvt!M582.3a_Check_external_trigger  Check pin status associated with a trigger <span style="color:#ff0000">- New (1.13) -</span>

===%Heaters%Heating 
*%M135: Set PID sample interval%gcode_cvt!M135.3a_Set_PID_sample_interval 
*%M143: Maximum hot-end temperature%gcode_cvt!M143.3a_Maximum_hot-end_temperature  - <span style="color:#ff0000">NEW</span> - 
*%M144: Stand By Your Bed%gcode_cvt!M144.3a_Stand_By_Your_Bed 
*%M570: Set heater timeout%gcode_cvt!M570.3a_Set_heater_timeout  - common to all tools
*%M562: Reset temperature fault%gcode_cvt!M562.3a_Reset_temperature_fault 
*%M563: Define or remove a tool%gcode_cvt!M563.3a_Define_or_remove_a_tool 

===Ethernet communication
*%M540: Set MAC address%gcode_cvt!M540.3a_Set_MAC_address - all printers on same network shall have different MAC addresses
*%M550: Set Name%gcode_cvt!M550.3a_Set_Name - Name for web page call and for FTP  
*%M551: Set Password%gcode_cvt!M551.3a_Set_Password - For FTP and Web Control/firmware exchange
*%M552: Set IP address%gcode_cvt!M552.3a_Set_IP_address - Optional 
*%M553: Set Netmask%gcode_cvt!M553.3a_Set_Netmask - if IP address defined
*%M554: Set Gateway%gcode_cvt!M554.3a_Set_Gateway - if IP address defined

===Miscellaneous Configuration
*%M555: Set compatibility%gcode_cvt!M555.3a_Set_compatibility - G-code style compatibility
*%M558: Set Z probe type%gcode_cvt!M558.3a_Set_Z_probe_type 
*%M566: Set allowable instantaneous speed change%gcode_cvt!M566.3a_Set_allowable_instantaneous_speed_change  - 'jerk' values: speed change while cornering
*%M569: Set axis direction and enable values%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values  - Change stepper directions without replug. Modify pulse timing.
*%M584: Set drive mapping%gcode_cvt!M584.3a_Set_drive_mapping <span style="color:#ff0000">NEW (1.14)</span> Was handled by M569 before. 
*%M906: Set motor currents%gcode_cvt!M906.3a_Set_motor_currents - digital potentiometers for steppers
*%M574: Set endstop configuration%gcode_cvt!M574.3a_Set_endstop_configuration 
*%M572: Set or report extruder elasticity compensation%gcode_cvt!M572.3a_Set_or_report_extruder_elasticity_compensation 
*%M575: Set serial comms parameters%gcode_cvt!M575.3a_Set_serial_comms_parameters - Presently used by PanelDue for communication with the Duet
*%M911: Set power monitor threshold voltages%gcode_cvt!M911.3a_Set_power_monitor_threshold_voltages <span style="color:#ff0000">NEW (1.14)</span> Supply voltage required for proper board operation.
*%M912: Set electronics temperature monitor adjustment%gcode_cvt!M912.3a_Set_electronics_temperature_monitor_adjustment <span style="color:#ff0000">NEW (1.14)</span> Offset added to reported processor temperature to have accurate value.
*%M913: Set motor percentage of normal current%gcode_cvt!M913.3a_Set_motor_percentage_of_normal_current <span style="color:#ff0000">NEW (1.14)</span> Temporary stepper current modification in % (for stalling against mechanical stops)

=== Web control %(DWC)%Duet_Web_Control  
*%M560: Upload web page file%gcode_cvt!M560.3a_Upload_web_page_file 
*%M998: Request resend of line%gcode_cvt!M998.3a_Request_resend_of_line 

===Firmware configuration
*%M559: Upload configuration file%gcode_cvt!M559.3a_Upload_configuration_file 
*%M997: Perform in-application firmware update%gcode_cvt!M997.3a_Perform_in-application_firmware_update  - <span style="color:#ff0000">NEW</span> - firmware update without USB connection

===Reporting - also used by DWC
*%M36: Return file information%gcode_cvt!M36.3a_Return_file_information Return information about a file on the SD card - "JSON https://en.wikipedia.org/wiki/JSON" format
*%M122: Diagnose%gcode_cvt!M122.3a_Diagnose 
*%M573: Report heater PWM%gcode_cvt!M573.3a_Report_heater_PWM 
*%M408: Report JSON-style response%gcode_cvt!M408.3a_Report_JSON-style_response  - Return printer status data
*%M503: Print settings%gcode_cvt!M503.3a_Print_settings  - Display config.g content

===Geometry
*%M208: Set axis max travel%gcode_cvt!M208.3a_Set_axis_max_travel 
*%M556: Axis compensation%gcode_cvt!M556.3a_Axis_compensation   - X/Y angular correction
*%M564: Limit axes%gcode_cvt!M564.3a_Limit_axes 
*%M579: Scale Cartesian axes%gcode_cvt!M579.3a_Scale_Cartesian_axes   -  X/Y/Z scale compensation for deltas
*%M667: Select CoreXY mode%gcode_cvt!M667.3a_Select_CoreXY_mode 
*%M668: Set Z-offset compensations polynomial%gcode_cvt!M668.3a_Set_Z-offset_compensations_polynomial  - in development ?

===Miscellaneous commands
*%M37: Simulation mode%gcode_cvt!M37.3a_Simulation_mode   - Run a print simulation for time estimation : slow

===Specialised machines
*%M567: Set tool mix ratios%gcode_cvt!m567.3a_Set_tool_mix_ratios 
*%M568: Turn off/on tool mix ratios%gcode_cvt!m568.3a_turn_off.2fon_tool_mix_ratios 
*%M578: Fire inkjet bits%gcode_cvt!m578.3a_Fire_inkjet_bits 
*%M580: Select Roland%gcode_cvt!m580.3a_Select_Roland 

== G-codes with specific or extended syntax 
===Movement  and geometry 
*%G0 and G1: Move%gcode_cvt!G0 &_G1:_Move  - Flags are used to bypass endstops or move carriage on delta 
*%G10: Tool Offset%gcode_cvt!G10.3a_Tool_Offset  Define standby and operating tool temperature / Retract if no parameter, see M207 (<span style="color:#ff0000">NEW</span>)
*%M207: Set retract length%gcode_cvt!M207.3a_Set_retract_length  RRF add unretract length parameter - <span style="color:#ff0000">NEW</span> - 
*%M208: Set axis max travel%gcode_cvt!M208.3a_Set_axis_max_travel  Used for unretract length in other firmware
*%M665: Set delta configuration%gcode_cvt!M665.3a_Set_delta_configuration Add height, maximum usable radius and column angular position
===%Heating%Heating
*%M105: Get Extruder Temperature%gcode_cvt!M105.3a_Get_Extruder_Temperature  
*%M135: Set PID sample interval%gcode_cvt!M135.3a_Set_PID_sample_interval 
*%M141: Set Chamber Temperature (Fast)%gcode_cvt!M141.3a_Set_Chamber_Temperature (Fast)  - in RRF also define the chamber heater
*%M301: Set PID parameters%gcode_cvt!M301.3a_Set_PID_parameters  RRF add PID band, PWM scaling and other parameters
*%M305: Set thermistor and ADC parameters%gcode_cvt!M305.3a_Set_thermistor_and_ADC_parameters add external thermocouple (using "SPI https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus")

===Miscellaneous
*%M106: Fan On%gcode_cvt!M106.3a_Fan_On  - RRF add configuration. Fan1 configured in thermostatic mode by default. Deactivate with "M106 P1 H-1".
*%M302: Allow cold extrudes%gcode_cvt!M302.3a_Allow_cold_extrudes  add cancelling of the command
*%M561: Set Identity Transform%gcode_cvt!M561.3a_Set_Identity_Transform  - reset the transformation from calibration

== Non specific G-codes 
=== Movement 
*%G11: Unretract%gcode_cvt!G11.3a_Unretract  Used while Firmware retraction is configured in your slicer, along G10
*%G28: Move to Origin (Home)%gcode_cvt!G28.3a_Move_to_Origin_.28Home.29  run macro %home.g or homedelta.g%macros!homing.3a_homeall.2eg_and_homedelta.2eg
*%G90: Set to Absolute Positioning%gcode_cvt!G90.3a_Set_to_Absolute_Positioning 
*%G91: Set to Relative Positioning%gcode_cvt!G91.3a_Set_to_Relative_Positioning 
*%G92: Set Position%gcode_cvt!G92.3a_Set_Position  Define actual position to be defined coordinates (zero if no parameters)
*%M82: Set extruder to absolute mode%gcode_cvt!M82.3a_Set_extruder_to_absolute_mode 
*%M83: Set extruder to relative mode%gcode_cvt!M83.3a_Set_extruder_to_relative_mode  To be preferred for reliability
*%M114: Get Current Position%gcode_cvt!M114.3a_Get_Current_Position 

=== Operation 
*%G4: Dwell%gcode_cvt!G4.3a_Dwell  G4 Pnn wait for nn miliseconds
*%M0: Stop or Unconditional stop%gcode_cvt!M0.3a_Stop_or_Unconditional_stop 
*%M3: Spindle On, Clockwise (CNC_specific)%gcode_cvt!M3.3a Spindle On, Clockwise (CNC_specific) 
*%M18: Disable all stepper motors%gcode_cvt!M18.3a_Disable_all_stepper_motors 
*%M84: Stop idle hold%gcode_cvt!M84.3a_Stop_idle_hold 
*%M80: ATX Power On%gcode_cvt!M80.3a_ATX_Power_On 
*%M81: ATX Power Off%gcode_cvt!M81.3a_ATX_Power_Off 
*%M107: Fan Off%gcode_cvt!M107.3a_Fan_Off 
*%M112: Emergency Stop%gcode_cvt!M112.3a_Emergency_Stop 
*%M116: Wait%gcode_cvt!M116.3a_Wait 
*%M400: Wait for current moves to finish%gcode_cvt!M400.3a_Wait_for_current_moves_to_finish 
*%M220: Set speed factor override percentage%gcode_cvt!M220.3a_Set_speed_factor_override_percentage 
*%M221: Set extrude factor override percentage%gcode_cvt!M221.3a_Set_extrude_factor_override_percentage 
*%M999: Restart after being stopped by error%gcode_cvt!M999.3a_Restart_after_being_stopped_by_error 

=== Probing 
*%G30: Single Z-Probe%gcode_cvt!G30.3a_Single_Z-Probe 
*%G31: Set or Report Current Probe status%gcode_cvt!G31.3a_Set_or_Report_Current_Probe_status  Also allow probe offset definition
*%G32: Probe Z and calculate Z plane%gcode_cvt!G32.3a_Probe_Z_and_calculate_Z_plane 
*%M557: Set Z probe point%gcode_cvt!M557.3a_Set_Z_probe_point 
*%M561: Set Identity Transform%gcode_cvt!M561.3a_Set_Identity_Transform 

=== Printing 
*%M20: List SD card%gcode_cvt!M20.3a_List_SD_card
*%M23: Select SD file%gcode_cvt!M23.3a_Select_SD_file
*%M24: Start/resume SD print%gcode_cvt!M24.3a_Start.2Fresume_SD_print
*%M25: Pause SD print%gcode_cvt!M25.3a_Pause_SD_print
*%M26: Set SD position%gcode_cvt!M26.3a_Set_SD_position
*%M27: Report SD print status%gcode_cvt!M27.3a_Report_SD_print_status
*%M28: Begin write to SD card%gcode_cvt!M28.3a_Begin_write_to_SD_card
*%M29: Stop writing to SD card%gcode_cvt!M29.3a_Stop_writing_to_SD_card
*%M30: Delete a file on the SD card%gcode_cvt!M30.3a_Delete_a_file_on_the_SD_card
*%M32: Select file and start SD print%gcode_cvt!M32.3a_Select_file_and_start_SD_print
*%M226: Gcode Initiated Pause%gcode_cvt!M226.3a_Gcode_Initiated_Pause
*%M302: Allow cold extrudes%gcode_cvt!M302.3a_Allow_cold_extrudes

=== Physical interface 
*%M42: Switch I/O pin%gcode_cvt!M42.3a Switch I/O pin
*%M119: Get Endstop Status%gcode_cvt!M119.3a_Get_Endstop_Status
*%M300: Play beep sound%gcode_cvt!M300.3a_Play_beep_sound On PanelDue or DWC
*%M117: Display Message%gcode_cvt!M117.3a_Display_Message

=== Heating 
*%M104: Set Extruder Temperature%gcode_cvt!M104.3a_Set_Extruder_Temperature
*%M105: Get Extruder Temperature%gcode_cvt!M105.3a_Get_Extruder_Temperature
*%M109: Set Extruder Temperature and Wait%gcode_cvt!M109.3a_Set_Extruder_Temperature_and_Wait
*%M140: Set Bed Temperature (Fast)%gcode_cvt!M140.3a_Set_Bed_Temperature_(Fast)
*%M141: Set_Chamber Temperature (Fast)%gcode_cvt!M141.3a_Set_Chamber_Temperature_(Fast)
*%M190: Wait for bed temperature to reach target temp%gcode_cvt!M190.3a_Wait_for_bed_temperature_to_reach_target_temp

=== Useful G-codes 
*%M206%gcode_cvt!M206.3a  Set home offset. Could be used to adjust head above bed during printing. M206 Z0.1 move  up by 0.1mm

=== Configuration 
*%G21: Set Units to Millimeters%gcode_cvt!G21.3a_Set_Units_to_Millimeters 
*%M201: Set max printing_acceleration%gcode_cvt!M201.3a_Set_max_printing_acceleration 
*%M203: Set maximum feedrate%gcode_cvt!M203.3a_Set_maximum_feedrate 
*%M206: Set home offset%gcode_cvt!M206_Marlin.2C_Sprinter.2C_Smoothie.2C_RepRapFirmware_-_Set_home_offset 
*%M303: Run PID tuning%gcode_cvt!M303.3a_Run_PID_tuning <span style="color:#ff0000">- In development -</span>
*%M304: Set PID parameters - Bed%gcode_cvt!M304.3a_Set_PID_parameters_-_Bed PID parameters for Bed - equivalent to M301 H0
*%M350: Set microstepping mode%gcode_cvt!M350.3a_Set_microstepping_mode 
*%M404: Filament width and nozzle diameter%gcode_cvt!M404.3a_Filament_width_and_nozzle_diameter 
*%M502: Revert to the default "factory_settings."%gcode_cvt!M502.3a_Revert_to_the_default_.22factory_settings.2e.22 
*%M666: Set delta endstop adjustment%gcode_cvt!M666.3a_Set_delta_endstop_adjustment 

=== Report 
*%M503: Print settings%gcode_cvt!M503.3a_Print_settings 
*%M115: Get Firmware Version and Capabilities%gcode_cvt!M115.3a_Get_Firmware_Version_and_Capabilities 
*%M407: Display filament diameter%gcode_cvt!M407.3a_Display_filament_diameter 

=== Miscellaneous 
*%M110:_Set_Current_Line_Number%gcode_cvt!M110.3a_Set_Current_Line_Number
*%M111:_Set_Debug_Level%gcode_cvt!M111.3a_Set_Debug_Level
*%M120:_Push%gcode_cvt!M120.3a_Push
*%M121:_Pop%gcode_cvt!M121.3a_Pop
*%M500:_Store_parameters_in_EEPROM%gcode_cvt!M500.3a_Store_parameters_in_EEPROM
*%M501:_Read_parameters_from_EEPROM%gcode_cvt!M501.3a_Read_parameters_from_EEPROM


■Macros
== Macros for RepRap Firmware
(:date 11 Aug 2016 02:05:)Most %RepRap Firmware%RepRap_Firmware board operations are handled by macros files stored on the SD card.
*A macro is a text file containing a sequence of %G-code%G-codes.
*Firmware use macros with predefined names located in /sys directory.
*Files located in /macros directory are presented to user in DWC panel, whatever their extension. 
*User defined macros could be set in any directory, including /sys.
*A macro can call another macro located in any directory.
*A mistake in the syntax of a macro may hold the printer.

The %G-codes set of RepRap Firmware%G-codes is evolving and the description below apply to the most recent firmwares, from "DC42 https://github.com/dc42/RepRapFirmware/tree/dev/Release" or "Chrishamm https://github.com/chrishamm/RepRapFirmware/tree/dev/Release" forks. Note that many listed command may not work with the firmware as delivered with your board (notably Replikeo boards) and you may %update the firmware%Duet_Firmware_Update  for proper operation. 

The below macros are given as examples, but you shall have a look on specific SD images to establish your own macro set.
* "SD images of DC42 https://github.com/dc42/RepRapFirmware/tree/dev/SD-image"
* "SD images of Chrishamm https://github.com/chrishamm/RepRapFirmware/tree/dev/SD-image"
* "SD images of RepRapPro (Fisher image missing) https://github.com/reprappro/RepRapFirmware/tree/master/SD-image"

Some listed macros are single line and fairly basic, but creating these macros once prevent searching the documentation month later when you will have to redo part of the commissioning or calibration and forgot the commands. It is a sort of always available documentation. It is recommended to create you whole macros set before starting the commissioning.

== System macros 
=== config.g 
This is called at board startup.
The printer configuration is defined in the main macro 'config.g'.
%Configuration and update of this file%Updating_config is detailed in %other pages%Commissioning 

=== Homing: homeall.g and homedelta.g 
This macro is called by 'G28' and home the printer. Homedelta.g is called if the printer configuration is defined as delta (M665 command).
Example for a cartesian printer (here an Ormerod).
<<
;macro /sys/homeall.g  homing for a cartesian 
G91 			; set movement to relative mode
G1 Z5 F200 		; move Z up 5mm
G90 			; set movement to absolute mode
M558 P1 		; set probe to unmodulated mode
G1 X-240 F2000 S1 	; home X
G92 X0 			; set position to X=0
G1 X3 F200 		; move axis away from X=0
G1 X-5 F200 S1 		; home again, slower
G92 X0 			; set position to X=0
G1 X15 F2000 		; ADJUST the X value to put the nozzle on the edge of the bed
G92 X0 			; set position to X=0
M558 P2			; set probe to modulated mode
G1 X45 F2000 		; move X, ADJUST the X value to get Z probe over target
G92 Y0 			; set position to Y=0
G1 Y-240 F2000 S1 	; home Y
G92 Y0 			; set position to Y=0
G1 Y3 F200 		; move Y axis out
G1 Y-5 F200 S1 		; home Y, slower
G92 Y0 			; set position to Y=0
G1 Y3 F2000 		; ADJUST the Y value to put the nozzle on the edge of the bed
G92 Y0 			; set position to Y=0
G1 Y0 F2000 		; move Y, ADJUST the Y value to get Z probe over target
G30 			; home Z, using values from G31 in config.g
G1 Z5 F200 		; Move Z up to Z=5
G1 X0 Y0 F2000 		; Move to X=0 Y=0 
G1 Z0 F200 		; Move to Z=0
>>
Example for a delta
<<
;macro /sys/homedelta.g  Homing file for RepRapFirmware on delta printer
G91				; use relative positioning
G1 S1 X520 Y520 Z520 F8000	; move all carriages up 520mm – S1 moves X,Y,Z carriages and detect stops; use F500 for commissioning (low speed)  - beware max carriage travel > max height
G1 S2 X-4 Y-4 Z-4 F1000		; move all tower carriage down 4mm, no stop detection
G1 S1 X8 Y8 Z8 F500		; move carriages up 8mm, stopping at the endstops
G1 Z-10	F2000			; down a few mm so that we can centre the head
G90				; back to absolute positioning
G1 X0 Y0 F2000			; centre the head
G1 Z20 F12000			; move head 20mm above plate
>>

There are also standard system macros for independent axis:
homex.g, homey.g and homez.g

=== Homing without end switches 
With digital potentiometer allowing stepper current adjustment by software, it is possible to stall the motors on movement mechanical stops, so removing need for end stops switches and improving reliability. Experience show that a too low current drive to difficulties for the stepper to ‘re-hook’ to steps and large rebounds.  Increasing current  to a minimal value reduce the rebound. You shall experiment for own steppers, with minimum current values  around 30% of nominal current. Also, the mechanical stop shall not be too springy e.g. felt strips may be better than rubber. The precision is not very good (0.2~0.5mm) but that shall be corrected by the calibration run. 
For any reason, the S2 parameters don’t effectively prevent stop detection, so the below routine only works on machine NOT equipped with switches. 
M913 is only available from DC42 V1.14
<<
;macro /sys/homedelta.g  Homing file without stop switches (board with digipots)
    	    	    	; - WONT'T WORK if you do have switches
G91			; use relative positioning
M913 X50 Y50 Z50    	; Reduce current at a % of value defined in M906 (here 50%)
			; Resulting current shall be above 30% of stepper RATED current
			; Too low current makes the carriage jumping.
G1 S2 X520 Y520 Z520 F4000 ; move all carriages up 520mm S2 no stop detection 
    	    	    	;- beware max carriage travel > max height
G92 X0 Y0 Z380		; defines the position when homed  - required while there is no endstops 
    	    	    	;- beware asymmetry of your stops
G1 Z-10 F100		; down a few mm so that we can centre the head
G90			; back to absolute positioning
G1 X0 Y0 F2000		; centre the head and set a reasonable feed rate
M913 X100 Y100 Z100	; return to normal current
G1 Z20 F12000		; set head 20mm  above bed
>>
=== bed.g 
This macro is called by code 'G32' and do automatic calibration. It also call homing macro (G28) if homing  is not already done.
Example of calibration for a delta printer with mechanical sensing (like the "Fisher http://reprap.org/wiki/Fisher" delta). The H parameter is the sensor offset for each point. It is here used instead of the general 'G31 Znn' parameter which is common to all probe points. A negative value correspond to a height over the bed. 
Example for a Cartesian (using M557 in config.g instead may be more simple than a bed.g macro)
<<
; macro /sys/bed.g  Auto calibration routine for a Cartesian printer: 1 to 5 probe points
M561	; clear any bed transform, otherwise homing may be at the wrong height
G1 Z5 F350
G1 X45 Y0 F2000	; move head
G30 P0 Z-100000	; probe
G1 Z5 F350	; rise head  
G1 X45 Y180 F2000
G30 P1 Z-100000
G1 Z5 F350
G1 X210 Y180 F2000
G30 P2 Z-100000
G1 Z5 F350
G1 X210 Y0 F2000
G30 P3 S Z-100000 ; probe and calibrate with 4 parameters (as there is 4 points)
G4 P1500 ;Leave the probe there to give the web interface time to report the plane points
G1 Z10 F350
>>
Example for a delta
<<
; macro /sys/bed.g  Auto calibration routine for a delta printer with offset values (H param)
; different for each probe point (mechanical sensing). You can have as many probe points
; as you want (least square root average), use at least 3 points more than parameter number.
; This does a single iteration of auto calibration. Run this file multiple times until
; the values converge. Then transfer values from M666 and M665 to your config.g file.

M561			; clear any bed transform, otherwise homing may be at the wrong height
M201 X500 Y500 Z500	; reduce acceleration

; Probe the bed and do auto calibration 
G1 X-64.95 Y-37.5 Z3  F12000 	;go above first point 
G30 P0 X-69 Y-37.5  H-0.43 Z-99999	; X tower
G30 P1 X69 Y-37.5   H-0.45 Z-99999	; Y tower
G30 P2 X1 Y78 	    H-0.40 Z-99999	; Z tower 
G30 P3 X-34 Y-18.75 H-0.34 Z-99999	; half way to X tower
G30 P4 X34 Y-18.75  H-0.40 Z-99999	; half way to Y tower 
G30 P5 X4 Y41 	    H-0.30 Z-99999	; half way to Z tower
G30 P6 X2 Y2 	    H-0.37 Z-99999 S4 ; centre, and auto-calibrate for 4 parameters

M201 X6000 Y6000 Z6000 ; reset acceleration - Warning! supersede values set in config.g

G91; relative positioning
G1 S1 Z40 F15000	; go part way up 
G90; back to absolute positioning
>>

Machines like Kossel with mechanically deployed Z-probe also calls deploying and retract macros, see "Mini Kossel on Github https://github.com/dc42/RepRapFirmware/tree/dev/SD-image/sys-MiniKossel"

=== Tool selection 
For each tool, there is three standard macros while changing or selecting tool

example : "Tfree1.g". This could be used to wait for printing temperature, set idling temperature, move the head off the print, retract, un-retract, clean tool or any other action.

Macros are called on tool change or selection:
*TpreN.g is run before tool N is set active
*TpostN.g is run after tool N is set active
*TfreeN.g is run before tool N is freed

Note than on the Chrishamm fork, if these macros are not present, there will be an error message. There is no error message on DC42 fork.

=== Pause and resume a print: pause.g and resume.g 
*pause.g is called before pausing a print, pause ordered by %M25%gcode_cvt!M25.3a_Pause_SD_print  (pause from control panel, not from G-code file)
*resume.g is called before resuming a print, resume ordered by %M24%gcode_cvt!M24.3a_Start.2Fresume_SD_print 
*cancel.g is called if the print is cancelled

=== Stop a print: stop.g 
*stop.g is called while %M0%gcode_cvt!M0.3a_Stop_or_Unconditional_stop   is called, when a paused print is cancelled. Without this macro all heating loops are shutdown.

=== Set of macros for filament detection 
Using M581/M582 (from DC42 V1.13), you can implement simple filament detection.

In addition, it is possible to add a push-button in parallel which will allow user to stop a print from the machine itself.

In the following example, the detection switch is normally closed, so circuit is closed while there is no filament.
It is connected to the E1 end stop between signal and ground pins, so switch closing lower the signal. So the trigger is on falling edge.

<<
;/sys/start.g  Executed at print start (add 'M98 P/sys/start.g' in your slicer start code)
M581 E1 S0 T2	; Trigger 2 rised if filament is missing. Switch on E1 connect
		; signal and ground pin when there is no filament, so trigger 
		; on falling edge.  Other extruder switch or user accessible
		; pushbutton (closed on action) can be paralleled 
M582 T2  	; Check if the Filament absence is detected NOW
; M581 E0 S0 T3	; If endstop 0 is available (no Z-probe), trigger resume print on E0 activation 

; /sys/cancel.g
M581 S-1 T2  ; neutralise trigger 2  while cancelling print
M581 S-1 T3  ; neutralise trigger 3  while cancelling print
;Next is non standard and unrelated to filament detection
M140 S55     ; Set the bed temperature and don't wait for it
M104 S155    ; set the current hotend temperature to 155 and don't wait for it

;/sys/stop.g
M581 S-1 T2  ; neutralise trigger 2  while stopping print
M581 S-1 T3  ; neutralise trigger 3  while stopping print

;/sys/trigger2.g  
M300 S300 P500   ; Beep 
M300 S1000 P1000 ; Beep 
M117 No filament or User pause ; Message on DWC or Panel
;M84 E0:1  	 ; Turn extruders motors off - Don't work
M25		 ; Pause print (and run pause.g before)

;/sys/trigger3.g  Option for a 'resume' button
M24 		 ; Resume print (and run resume.g before)

;/sys/pause.g
M581 S-1 T2 ; neutralise trigger 2  while pausing print - to avoid multiple triggers
G1 E-4 F2500    ; retract 4mm
M84 E0:1        ; Turn extruders motors off
;Next is unrelated to filament detection
G91      	; relative moves
G1 Z50 F5000    ; raise nozzle 50mm
G90             ; absolute moves
G1 X0 Y85 F5000 ; move head out of the way of the print

; /sys/resume.g
M581 E1 S0 T2   ; Reactivate trigger 2 
M582 T2         ; Check again there is filament 
;Next is unrelated to filament detection
G1 R1 Z2 F5000  ; move to 2mm above resume point
G1 R1           ; lower nozzle to resume point
G1 E4 F2500     ; undo the retraction
>>
You shall not use this code ‘as is’ but adapt it to your existing pause/resume/stop macros.

It works properly, with bips and message on DWC, but was not tested on PanelDue.

== Using macros 
=== Name and extension 
Names are case sensitive. You can use any file extension (.g, .gcode, .txt) or none at all, but it is preferable to stuck to ‘.g’ with an editor doing syntax highlighting.

In a macro file, comments are preceded by “;” character. They could be after the command or alone in line.

=== Call another macro 
While in a macro, you can call another macro. Macros are searched in /sys directory and it is recommended to always specify explicitly the path.
 M98 P/macros/mymacro.txt ;P define the parameter and is not part of the name
Some parameters are restored while returning from a macro, however, these are not well documented.
So, you shall take care to restore them manually (notably motor current, acceleration). However, this drive to the problem that the actual value is the one decided at the end of the macro and not the value defined in config.g, so you shall take care to track all restored values in your macros.

=== Debugging 
Calling an invalid G-code may sometimes hang the firmware and lock your system. If the error is in the start-up process, the only solution is to remove the SD card and edit files to correct the bug. An error can be in a macro automatically called by the system.

Care shall be taken to not create a "recursive loop http://forums.reprap.org/read.php?416,666726" , e.g. a homing macro calling another home. This creates a "Stack overflow!" error.  

== Useful user macros 
=== Load filament 
example for a Bowden tube installation with 680mm total length. This for tool 0, you may create a macro for each extruder/tool.
<<
;macro /macros/_Load_filament.g 
T0		; Select tool
M109 S200	; set the current hotend temperature to 200 and wait for it
G1 E640 F3600	; extrude 640mm at heigh speed 
G1 E40 F200	; extrude 40mm at low speed
M84 P3 E0	; turn extruder motor off so the user can feed by hand - change for another tool
>>
=== Unload filament 
Example for tool 0: you may do another macro for other tools
<<
;macro /macros/_Unload_filament.g
T0		;Select tool
;M109 S100	;set hotend temperature to 100 and wait for it – NOT USED as if hotend is hot, it wait for cooling which slow the process, hence heat temperature request shall be done manually before running this macro.
G1 E-5 F500	;Retract 5mm filament at low speed 
G1 E-680 F3600	;Retract 680mm filament at high speed
M84 E0 		;turn extruder motor off to let user unload if filament locked - 
T99		;deselect tool (useful ?)
>>
=== Prepare printer 
example for PLA preparation with a heated bed
<<
;macro /macros/__prepare_PLA.g  prepare the machine after a cold start for PLA printing
T0			; define tool
M140 S55 		; Set the bed temperature and don't wait for it
M104 S150		; set the current hot-end temperature to 150°C and don't wait for it
G28			; home
G32			; calibrate during heating phase
M98 P/macros/brush.g  	; call cleaning macro if it exists
M109 S150	; set the current hot-end temperature to 150°C and wait for it - M104 don't wait 
G32		; 2nd calibration taking into account heating  - at 150°C to save surface like 
		; ‘BuildTak’, which don’t accept sensing at high temperature. Low temperature
		; sensing is inaccurate due to filament blob on the hot-end.
M109 S190	; set the current hot-end temperature to 190°C and wait for it - M104 don't wait 
M190 S55 	; Set the bed temperature at 55°C and wait for it
>>
=== Extruder(s) motor(s) off 
<<
;macro /macros/E_motors_off.g
M84 E0:1:2:3:4
>>
=== Head cleaning 
The limit of accessible area may be defined in ‘config.g’ (M665 command for delta).
You may want to go outside the printing area to clean the head.
This need caution and on a delta to not impact the structure and requires reduction of speeds and accelerations to avoid step loss.
The proper values will be restored at the end of the macro, but it is important to note that the restored values will supersedes the values defined in the config.g file, which could trouble the user.  

Example for a delta machine with a bed 300mm diameter
<<
;macro /macros/brush.g  Brush the head on a fixed brush
M201 X1000 Y1000 Z800	; reduce accelerations outside normal area 
			; – required for a delta at low arm angle - 
M564 S0			; can go outside the limits defined in M665
G0 X-52 Y127  Z2 F8000	;go to origin point, within authorized area, higher than brush
G1 X-77 Y140  F1500	; 1rst point outside
G1 Z0.5			; lower head to brush. in this case, the brush is at same height as bed
G1 X-97 Y126  F1500 
G1 X-78 Y139  F1500
G1 X-98 Y125  F1500
G1 X-77 Y140  F1500
G1 X-97 Y126  F1500
G1 X-77 Y140  F1500 	
G1 X-97 Y126  F1500 
G1 X-78 Y139  F1500
G1 Z2  F1500
G0 X-52 Y127  F1500	; Safe area, where speed could be increased 
M564 S1			; set again the safe area limits
G0 X0 Y0 Z50  F8000	; back to center
M201 X6000 Y6000 Z3000	; set again accelerations – Warning! that supersedes values in config.g
>>

=== Slow retraction 
In case of jam caused by foreign matter, you may want to remove very slowly the filament at low temperature to get the guilty element. Appropriate temperature for PLA is around 100°C, may be a few degrees lower
<<
M109 S100		; set the current hotend temperature to 100 and wait for it
M302 P1			; allow cold extrusion for P1 extruder
G1 E-280 F15		; very slow retract - it takes ages
G1 E-650 F3000		; fast retract
M84 E0:1:2:3:4		; Disconnect extruder motors
M302 P0			; disallow cold extrusion for P1 extruder
>>
=== Activate output/buzzer 
Some output pins could be activated via code M42. By example a buzzer could be connected on extension connector pin 32, which is signal PB16 and Duet digital pin 67
<<
/macros/Beep_3s.g ; activate buzzer for 3seconds. Digital pin 67 = extension connector pin 32
M42 P67 S1 ; Beeper off
G4 P3000   ; wait 3000 msec (= 3 sec)
M42 P67 S0 ; Beeper off
>>
=== Make sound to confirm proper operation 
====Principle
It is possible to make sound using motors. The frequency is the step frequency, so moving at a defined speed give a note. However, the frequency for a given speed depends from the step/mm ratio and each sound file shall be adapted for a given step/mm ratio. Another solution is to temporarily modify the step/mm configuration to use a known command set. 
As most printers driven by a duet haven’t any local screen nor diagnostic LED, the sound may indicate proper startup.

You may call a separate macro as the last command of your config file, e.g.
<<M98 P/macros/startmusic.g ; call a sound file to acknowledge the startup >>
You could create a music file by using this converter:
"http://en.homeconstructor.de/converter-convert-music-in-g-code.html"
On a delta printer, you shall move in Z only, to have all your motor running simultaneously with the effector speed equal to the carriage speed. 
On a Cartesian printer, you can use whatever axis, provided the step/mm is accurate.
It is wise to limit the travel, so the converter will make back and forth travel within the defined range.
The file provided by the converter shall be modified:
*Replace all G01 by G1 
*Comments shall be prefixed by “;”
*add "G92 X0 Y0 Z0" at the beginning of the code, to define the origin as current position, as you have not yet homed the machine
*add "G91" to set absolute moves.

A better control on a delta may be to move each carriage independently, hence checking driver and stepper independently. A movement on 'XYZ' columns instead of 'XYZ' user space is done while adding S2 parameter to the G1 command. Unfortunately, this does only work in relative mode, so you shall convert the file from absolute to relative. Use a spreadsheet program to help conversion.

====Examples and converter
100 step/mm -> example 16 teeth GT2-2, micro-step 1/16, 1.8° stepper
Z travel up total 8mm. Works ok for 200 step/mm (same with 0.9° steppers). You could use it 'as is' by modifying temporarily the step/mm of your machine with %M92: Set axis steps per unit%gcode_cvt!M92.3a_Set_axis_steps_per_unit , then resetting original value.

8 first notes of French children song 'Quand on fait des crêpes chez nous'
<<
; en.homeconstructor.de  MIDI-converter version: 2.5 
; File : crepes.mid  ;Breaks disabled ;Steps per millimeter for Z-axis: 100
G21 ; units are mm - supersedes former value, may not be needed
G90 ; Absolute positioning - supersedes former value, shall be the default except for extruder
G94 ; feed rate in units/minute, shall be the default
G92 X0 Y0 Z0; set origin to current position, required as machine is not homed
G1 Z1.23600000 F197.76000000
G1 Z1.60312500 F176.22000000
G1 Z2.42712500 F197.76000000
G1 Z3.30012500 F209.52000000
G1 Z4.28012500 F235.20000000
G1 Z5.10412500 F197.76000000
G1 Z6.41212500 F156.96000000
G1 Z7.64812500 F197.76000000
M84; shut down motors
>>

for 87 steps/mm (like "Fisher http://reprap.org/wiki/Fisher" delta) sound shall be
<<
G1 Z1.42068966 F227.31034483
G1 Z1.84267241 F202.55172414
G1 Z2.78979885 F227.31034483
G1 Z3.79324713 F240.82758621
G1 Z4.91968391 F270.34482759
G1 Z5.86681034 F227.31034483
G1 Z7.37025862 F180.41379310
G1 Z8.79094828 F227.31034483
>>
You can hear the above example at the end of "this film https://github.com/PRouzeau/HXM-delta-printer/blob/master/Photos/Lily_F_load_test.mp4?raw=true" or "same film in another format https://github.com/PRouzeau/HXM-delta-printer/blob/master/Photos/Lily_F_load_test.ts?raw=true"

Here is a small Libre Office calc sheet <<%Convert_crepes.zip%File:Convert_crepes.zip>>

It converts G-codes according a given step/mm ratio of the first 8 notes of the children song 'Quand on fait des crêpes'. This calc sheet does not use any libre office macro.

== Commissioning macros 
=== Allow cold extrusion 
<<
; /macros/Allow_cold_extrusion.g
T0  ;select tool 0 – note that its starts hotend heating
M302 P1 ;allow cold extrusion
>>
=== Extrude a given filament length 
To calibrate your extruder, you shall extrude a given length and measure the actual extruded filament.
<<
;macro /macros/Extrude_1000mm.g  Extrude 1000m of filament for calibration
T0  ;select tool 0 – note that start the hotend heating.
M302 P1 ;allow cold extrusion
T0
G1 E1000 F3600 
;new step/mm = old*1000/Measured
;example 1024 measured with old steps = 310 -> new = 310*1000/1024 = 302.7
>>
=== Move a motor on delta printer 
On delta printers, the X,Y and Z movements does not correspond to a motor movement, while for commissioning, you may want to operate each motor independently. in G1 code 'S2' is used to select motor instead movement. 
<<
; macros/X_carriage_up_10mm.g  Commissioning - test of displacement column by column of 10mm, up. 
G91		; use relative positioning
G1 S2 X10 F300	; move carriage of X column 10mm up
>>
=== Initial calibration 
=== Calibration report 
you can use M122 for reporting height of the sensing point – relative to previous geometrical alignment. A calibration MODIFY the geometrical alignment, and this is an iterative process.
Another solution is to create a macro identical to bed.g, but with S-1 parameters, which will report height without doing a calibration. This can be useful to test repeatability of sensing. 

=== Calibration help for mechanical sensing 
In case of mechanical sensing, the offset for each point may vary for two reasons:
* The force needed for actuation differ for each point depending relative position of sensors and hotend
*The machine deformation for a given vertical force vary for each position, 

So, you shall defined individually offset for each sensing point with the sheet paper method.
To help this tedious process, it is useful to makes macros. Unfortunately, pausing don’t work in a macro if you are not printing, so independent macros are needed for each point.  Writing all those macros ease the calibration process and is worth the task.

<<
; /macros/P0.g – go to P0 Probing point
G90 		; absolute position
M564 S0 	; // allow travel outside envelope  - needed for movement below bed level (sub 0)
G1 Z2 		;raise 2mm above bed
G1 X-69 Y-37 F4000 ;move to P0
G1 Z0.25	; lower the hotend 0.25mm  above bed 
>>

■FAQ
RepRap Firmware FAQ
(:date 11 Aug 2016 02:05:)(:clear:)
==Can I modify speed and extrusion coefficients and temperatures during a print? Yes
:%Yes%DWC_Print_Status.png

==Can I reconfigure my printer ‘on the fly’? Yes
:Yes, there is an %interactive console%DWC_G-code_Console.png, you may even modify parameters during a print, at your own risks

==Can I print from SD card? Yes
:Yes, and this is what is done by most users, as Ethernet file transfer is very fast. Lost connection from the PC don’t stop the print, but you lost control if you don’t have a local panel or another controller (which may be a smartphone if you have WiFi on your network).

== Can I run RRF with an USB front-end like Pronterface or Repetier-host? Yes
:Yes, but you shall configure your front-end program for USB hardwired handshaking

==Can I create my own macros? Yes
:%Yes%Macros!Using_macros 

==Can I control the printer through WiFi devices? Yes
:%Yes%RepRap_Firmware!Connectivity , with any web browser if you have a WiFi connection on your Network or set-up a low cost WiFi bridge on the printer

== Do I need to recompile firmware for configuration? No
:No, new issues of firmware are always delivered pre-compiled. Configuration by text files.

==Can I use standard printer LCD panel? No
:No, only PanelDue work with RRF firmware

== Is there an automatic calibration for Cartesian printer? Yes
:%Yes%Macros!bed.g , but it is different from the delta calibration and is limited to five probe points

== Does %web interface%Duet_Web_Control work on Duet if the board is only powered by USB? Yes
:Yes, but if you have accessories connected on the 5V like the PanelDue, the 5V consumption shall not exceed your USB port capability. This power supply method is recommended during commissioning as first power on. The Ethernet cable shall be installed and network configured. 

==Can I use external 5V power supply instead of the on-board supply? Yes
:Yes, there are selectors on board

==Can I install a filament presence sensor? Yes
:%Yes%Macros!Set_of_macros_for_filament_detection , based on simple switch (no filament movement detection yet)

==Do I need an USB connection for firmware update? No
:%No%Duet_Firmware_Update!In_application_update , except for the first firmware update (first step of commissioning), as boards are delivered with old firmware

==Can I run a Chamber heater from the Extruder heater output? Yes
:Yes, using a relay (SSR)

== If I have a problem with a driver, can I install an external driver? Yes
:%Yes%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values , if you have no expansion board, as drivers can be remapped on the expansion connector. Note: Buy good stepper cables to avoid risks of disconnection while powered, which is the main way to burn a driver.

== Duet board pins list with functions? Yes
%Here%Duet_pinout

== Can I use fans with other voltage than main board voltage? Yes
:Yes, See the schematic here:  %Duet Wiring 5V controlled fan%Duet_wiring!5V_controlled_fan

==Can I run a mixing hotend like the diamond? Yes
:Yes, see this "forum thread http://forums.reprap.org/read.php?416,641508" and "result http://forums.reprap.org/file.php?416,file=75442,filename=7_colour_thingy.JPG"

==Can I run a laser cutter with RRF? Yes
:Yes, see these threads "Reprap forum thread  http://forums.reprap.org/read.php?133,521301" "Reprap forum thread  http://forums.reprap.org/read.php?340,516150" "Post on RepRapPro site  https://reprappro.com/2015/06/16/reprap-duet-electronics-running-a-laser-cutter-guest-blog/"

== Can I use an RC servos for automation ? No
:No

== Can I use absolute extruder coordinate? Yes, but
:Yes, but this is not recommended

== Can I use inductive or capacitive calibration sensor? Yes, but
: Yes, but you shall add some components to protect your inputs from over-voltage. Never exceed 3.3V on input pins, at risk of board destruction.

==Are the input pins capable to handle 5 Volt? NO
:<span style="color:#ff0000">NO</span>.  5V on input pins may kill the board. Caution shall be used.

==Is there auto-calibration for heat loop PID? Not yet
: Not yet, but it is planned

== Shall I have forced cooling on the board? It depends
: It depends mostly of the current of your steppers. Natural cooling is sufficient for steppers at 1A, but board shall be installed to allow easy air flow (best is vertical position)

==Can I have a printer without end-stops sensors? Yes
:%Yes%Macros!Homing_without_end_switches, as digital potentiometers allow current reduction via G-code and you can stall steppers on mechanical stops. However, this is not very precise and for Z axis this need to be coupled with automatic calibration.

==What kind of end-stops do I need?
:Dry switches or powered sensors, provided they work in 3.3V. Pin order is different from Ramps, with center pin in 3.3V

==Can I add more extruders? Yes
:Yes For the Duet 0.6 and 0.8.5 there is 4 extruders board expansion from original designer (T3P3), simple 4 extruders extension from independent supplier and some stock of 2 extruders shields from RepRapPro. 

==Is there software movement limit? Yes
:%Yes%gcode_cvt!M208.3a_Set_axis_max_travel" . You can define maximum travel where head will not be allowed to go. This volume will be a %cylinder%gcode_cvt!M665.3a_Set_delta_configuration for a delta printer and a cube for others.

==Is it possible to install two separated end-stops on each axis? No
:No, and it is not needed, the printer knowing its own dimensions. Though dry switches can be installed in series.

==Can RRF run a SCARA printer? No
:No

==Can RRF run a rotary delta (Clavel type) like the Firepick? No
:No

== Can I set two 12V fans in serie on a 24V power supply? Yes, but
:Yes, if they are identical but this is not recommended as if one fan stall for any reason, the other will experience overvoltage.

■Updating_config
==The 'config.g' file and its update
(:date 11 Aug 2016 02:05:)To configure a board using %RepRap Firmware%RepRap_Firmware, notably the %Duet%Duet for a given machine, you have only to edit a file named 'config.g', located on the SD card in the /sys directory.
This file is read and executed at startup, but the configuration can be modified later, either by executing a macro or entering commands in the web interface. These configuration modifications will be lost at next startup.

All configuration parameters are entered via 'G' and 'M' parameters, so the %reprap firmware G-Code set%G-codes is relatively extended. A config.g file could be reexecuted via the 'M999' command or an emergency stop.

It shall be noted that a malformed file may hang your board, and this apply to all macros executed by the 'config.g' file.

The first configuration, which shall define name, password and net configuration, will probably be done while writing the file on the SD card, as it is not wise to start a machine with an unverified file, except if you can independently supply logic and power on your board.

Any text editor could be used for modification.
There is now a "web configurator https://configurator.reprapfirmware.org" which create a config.g file from interactive interface.

After uploading the file in the SD card, inserting it in the board (while power is shutdown), restarting and connecting to the board, you have other solutions to modify the config.g file without removing the SD card.

As the config.g content is stored in the limited Duet memory at startup, you shall limit this file size, makes your comments short and remove unused lines.

==Updating 'config.g'
For the updating of the config.g file, you have three solutions if your board connect properly:
*Using the incorporated editor in the web interface, but that doesn't work with all browsers, notably not with Microsoft browsers.
That editor is accessed in the "settings" tab, sub-panel "configuration file".
*Editing file on your PC/device and uploading with the web interface. In the tab "Settings", there is a button "Upload File(s)", which allow to upload printer system files from your pc. The 'config.g' file will automatically be uploaded in the /sys directory as other system files, while web interface files (model.js and viewmodel.js, formerly interface.js) will be uploaded in /www/js directory. It allow having an up-to date copy on your PC of the printer system files.
Duet_WiFi_1.0-/=
*For wired duets, editing the config.g file on your PC and uploading it via FTP. Same advantage as web uploading for tracking the printer updates, with a bit more flexibility.

To log in FTP, you shall use the machine name as defined in the config.g file, for the user name any name e.g. 'whatever'  and the password as defined in the config.g file (the leading 'P' indicates parameter and is not part of the name nor password). Beware to upload in the /sys directory. You could be simultaneously be logged in FTP and in http (web interface). If you have difficulties to connect directly in FTP, connect first with the web interface, this helps FTP connection. 

To upload/download to the SD card via FTP, you need a FTP client program (NOT a FTP server) and there is a wide choice for all systems. On Windows, you could use the FTP function of the file viewer 'Total Commander', FileZilla or WinSCP. On Linux, there is a default ftp client named 'ftp'. On a MAC you can use CyberDuck or FileZilla.
=/

If using a new SD card, it is highly recommended to format it (FAT32, cluster size 32 kB) before loading an image. card up to 32Go have been tested.

== How to configure Duet 
There are a few links which may help to configure your board
*%Configuring a Cartesian printer%Cartesian_config
*%Configuring a CoreXY printer%CoreXY_config
*%Configuring and calibrating a delta printer%Delta_config.
*"T3P3 guide to the config.g and homing files http://blog.think3dprint3d.com/2015/02/reprapfirmware-config-files.html" for Cartesian printers
* Preconfigured config.g files for various printers: "https://github.com/reprappro/RepRapFirmware/tree/test/SD-image" and "https://github.com/dc42/RepRapFirmware/tree/dev/SD-image"
* RepRapPro guide for commissioning Duet-based printers, including updating firmware: "https://reprappro.com/documentation/commissioning-introduction/commissioning-duet/." You may also find their wiring diagrams for the Ormerod, Huxley and Mendel useful.
* Duet troubleshooting guide: "https://reprappro.com/documentation/troubleshooting-introduction/electronics-problems/"
*DC42 fork allow external driver to be connected on the %expansion connector%Duet_pinout  and remapped with %M569%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values" . See "forum thread http://forums.reprap.org/read.php?178,552124,552305"
*"Using Duet with wifi router on blog.think3dprint3d.com http://blog.think3dprint3d.com/2014/04/using-duet-with-wifi-router.html"

== How do I know that my config.g have been properly executed 
Without a LED and if you do not succeed in connecting your board, you can check that the config.g is properly executed by making 'music' with your steppers.

You shall execute a file (or inserting commands it in the config.g file itself), as the last command of your config.g.

See %Macro make sound to confirm proper operation%Macros!Make_sound_to_confirm_proper_operation

■Release_notes
Release notes of DC42 Fork and DWC
(:date 11 Aug 2016 02:05:)==RepRap Firmware DC42 fork release notes
=== DC42 1.14
allb,Duet_0.85,Duet_0.6+/=
I have just released new firmware for wired Duets on "Github https://github.com/dc42/RepRapFirmware/blob/dev/Release/RepRapFirmware-1.14.bin?raw=true". The changes in this release are:
* When multiple motors are due to step, generate all the step pulses simultaneously
* Added support for multiple drivers for a single axis (M584)
* Added support for extended step pulse width when using external drivers (T parameter on M569 command)
* Removed XYZE parameters from M569 (use M584 instead)
* Added M913 command (set motor % of normal current), allowing the motor current to be temporarily reduced e.g. for homing and loading filament
* Added Z probe type 5, which is a normally-closed switch or active-high 3.3V digital signal connected to the IN pin of the Z probe connector on the Duet 0.8.5 and Duet WiFi

Please note the following:
1. If you are using M569 commands to remap axes and extruders to different drives, that will no longer work. Use the new M584 command instead.
2. If you use the M584 command, it should come before any M350 and M906 commands in your config.g file.
=/

allb,Duet_WiFi_1.0+/=
Ne wrelease for For Duet WiFi : "GitHub https://github.com/dc42/RepRapFirmware/blob/dev/Release/DuetWiFiFirmware-1.14.bin?raw=true" The changes in this release are:
* Fix for uncommanded stepper motor movement on some systems following a software reset
* When multiple motors are due to step, generate simultaneous step pulses for all of them
* Added support for multiple drivers for a single axis (M584)
* Added support for extended step pulse width when using external drivers (T parameter on M569 command)
* Removed XYZE params from M569 (use M584 instead)
* Added M913 command (set motor % of normal current) to allow motor current to be temporarily reduced
* Added Z probe type 5, which is a normally-closed switch or active-high 3.3V digital signal connected to the IN pin of the Z probe connector
* Duet WiFi default Z probe threshold is now 500 (the recommende dvalue for most types of Z probe)
* Duet WiFi defaults to using a low end homing switch on the X axis (Ormerod and Huxley, users take note!)
The other firmware files (DuetWiFiServer.bin and DuetWebControl.bin) are unchanged.
=/

=== DC42 1.13
"http://forums.reprap.org/read.php?416,674919,675054"
It looks like there may be a bug with the thermostatic fan control feature in this release. If you rely on thermostatic hot end fan control, please do not upgrade to 1.13 until this is resolved.

I have released version 1.13 of RRF here "Github https://github.com/dc42/RepRapFirmware/tree/dev/Release" (as usual, follow the link to the version you want, then press Raw to download it). The changes since 1.12 are:

* First firmware release for the new Duet WiFi (as already installed on the pre-production boards)
* Added support for M581 and M582 commands, including 'only if printing a file' condition in M581 command
* Fixed M117 for PanelDue (needs PanelDue firmware version 1.14)
* Firmware update messages are now sent to USB and PanelDue (needs PanelDue version 1.14 firmware to display them)
* M122 responses are now sent only to the comms channel that requested them
* Added gcode queue underrun counter, displayed in M122 Move diagnostic info
* SD card interface speed is included in M122 Platform diagnostic info
* Added support in M997 command to update additional firmware modules on Duet WiFi
* Corrected a possible problem with multiple incompatible gcodes being executed concurrently
* Support H parameter on M0 and M1 commands
* Treat M25 within the file being printed the same as M226
* Added additional M37 simulation modes to help identify bottlenecks
* Process M0 and M1 when in simulation mode
* When executing M0/M1 commands and no print is paused, execute stop.g/sleep.g if they exist
* Reduced interrupt latency, by not disabling all interrupts when starting a new move, to avoid losing characters sent by PanelDue
* Temporary fix for RTD temperature spikes causing failed prints
* Don't print extruder positions in M114 because they are always zero
* Allow setting of fan PWM from 50% upwards when a fan is in thermostatic mode
* Reduced default extruder heater PWM frequency to 500Hz
* Axes are flagged as not homed after using M350 to set microstepping
* Moved some utility maths functions to CoreNG

The compatible version of DuetWebControl is still 1.11 for the Duet, and 1.11a-dc42 for the Duet WiFi. I recommend that Duet users update /sys/iap.bin from here "github.com https://github.com/dc42/DuetIAP/tree/master/Release" after upgrading the firmware. There is no need to make any other changes to the SD card contents if you are already running firmware 1.10 or later and DWC 1.11.

=== DC42 1.12
"http://forums.reprap.org/read.php?416,661388"
Features :
* PT100 and other RTD sensors are now supported. See %Using PT100 temperature sensors%connecting_pt100 for more details.
* When a print is paused and then cancelled, the firmware now attempts to run file sys/cancel.g. It only turns the heaters off if that file is not found.
* The file upload speed over the web interface has been increased. Those who were getting slow file upload speeds are likely to see the most benefit.
* If a chamber heater is configured, it is now exempted from the heater timeout, just like the bed heater
* Two changes have been made to improve print quality when printing at high speeds. First, enabling extruder pressure advance is less likely to result in sequences of short moves having sawtooth velocity profiles. Second, a "Maximum average printing acceleration" can now be configured (M201 P parameter). Using this to restrict average acceleration will flatten out any remaining sawtooth velocity profiles.
* The firmware now reports itself to the USB subsystem as "Duet 3D printer control electronics",instead of as an Arduino Due. **A Windows driver file is provided.**
* **The default maximum hot end temperature is reduced to 260°C**.

Bug fixes:
* The USB interface exposed by firmware version 1.11 was not recognised by some versions of Windows on some computers, resulting in a driver installation error
* **Simulation mode (M37) did not work**
* Setting the motor current on the non-existent 9th driver on a Duet 0.6 might have undesirable side-effects

Please note the following when upgrading to version 1.12:
# If you are using Windows, please install the driver at "https://github.com/dc42/RepRapFirmware/tree/dev/Driver"  This driver does not install any new binaries, it simply tells Windows to use its usbser.sys driver to communicate with a Duet. If you are using Windows 10 then you don't need to install the driver if you don't want to, but then the Duet will show up as "USB Serial Device".
# If you are using Linux or Mac OS, be prepared to revert to earlier firmware (e.g. 1.10+4-dc42) in case your operating system does not recognise the Duet, and please let me know whether or not it did.
#If you print with hot end temperatures above 260°C then you will need to add a M143 command in config.g, for example M143 S280 will increase the temperature limit to 280°C.

In other respects, you can continue to use existing config.g and homing files. The recommended web interface is DWC 1.11.

=== DC42 1.11
"http://forums.reprap.org/read.php?416,650812" 
The changes in this release are:
*Switched to a new core based on ASF 3.31. This core features an interrupt and DMA-driven USB interface, hardware-scheduled ADC conversions, and supports not only the SAM3X processor used on the Duet but also the SAM4E processor on the next-generation Duet (which for now I am referring to as the DuetNG).
*Implemented Chrishamm's network and webserver module improvements including Telnet streaming, and some other improvements from his fork (thanks, Chris!)
*Added a build configuration for the DuetNG. The DuetNG-specific code is not published yet. 

=== DC42 1.10
"http://forums.reprap.org/read.php?340,643765"
Chrishamm and I agreed yesterday that it was time to move the version number of RRF on from 1.09. Accordingly, I am pleased to announce release 1.10 of my fork of RepRapFirmware.

The changes since my last official release (1.09x-dc42) are:
* Added support for firmware retraction (G10 with no parameters, G11, and M207). This is mainly to better support mixing extruders. To use it, configure "Firmware retraction" in slic3r, then set up your retraction parameters in config.g or in your slicer start gcode using the M207 command, see %M207%gcode_cvt!M207.3a_Set_retract_length. When using a mixing extruder, all extruders associated with the current tool will be retracted by the amount configured, regardless of the current mix ratio. Retraction speed and length are not affected by the M220 or M221 commands.
* Merged in Chrishamm's 1.09z networking, webserver, print monitor and iap.bin changes (thanks Chrishamm)
* Fixed a bug that sometimes caused auto-IP address allocation via DHCP to fail at startup (thanks Chrishamm)

The recommended web interface is DuetWebControl 1.11, available in the SD-Image folder of my repo or direct from Chrishamm's repo at "Github https://github.com/chrishamm/DuetWebControl" (download the zip and upload it on the Settings page of the web interface).

If you are already using a recent version of my or Chrishamm's 1.09 series firmware, there is no need to change your config.g or homing files.

=== DC42 1.09x
"http://forums.reprap.org/read.php?416,638316" 
The main changes in this release are:
* New build system to make it easier for developers to set up the build system and to support a different hardware abstraction layer for the next-generation Duet board. The Arduino plugin for Eclipse is no longer required and the Eclipse project is much more portable. A separate hardware support project (CoreDuet) replaces the Arduino core.
* Over-the-web firmware updates are supported. A very big thank-you to Chrishamm for implementing this.
* Network changes to improve connection stability. Thanks again to Chrishamm.
* Web interface in SD card image updated to DWC 1.10 (thanks Chrishamm)
* Print monitor improvements and bug fixes, mostly by Chrishamm
* Support for an optional external stepper driver support module, primarily for the next-generation Duet.
* **Implemented M143 (set temperature limit)**
* Implemented M350 (set microstepping - when supported by the external driver module, because the Duet does not support variable microstepping using the on-board drivers)
* Reduced the number of places where the code assumes there are exactly 3 axes, to make it easier for developers to add additional axes

Bug fixes:
* When there is a heater fault, display the correct error message
* Extrusion was often prevented if extruders and heaters were shared between multiple tools (e.g. tool 127) unless cold extrusion prevention was disabled
* Following a temperature measurement fault, extrusion could be prevented without a warning message being displayed
* When a corrupted input line with a failed checksum was received, a spurious error message was sometimes generated 

=== DC42 1.09r
"http://forums.reprap.org/read.php?146,610783" 
Changes in this release compared to 1.09o are:
* Up to 4 thermocouple temperature sensors are now supported using readily-available MAX31855 boards (thanks dnewman).
* New output buffering system to handle larger responses (thanks chrishamm). This includes fixes to the buffer starvation problem that caused me to withdraw 1.09o and reinstatement of the USB timeout code to handle loss of USB connection smoothly during a print.
* Compatibility with DuetWebControl 1.08 (thanks chrishamm)
* Support for M577 (thanks chrishamm)
* Added inkjet support (thanks RRP/chrishamm) but it is disabled by default

Bug fixes:
* Corrected a problem whereby if the Z probe type was set to 4 on a Duet 0.8.5, thermistor temperature readings were too high
* Added no-cache pragmas to web responses to better support Edge browser (thanks Wrangellboy)

This release will work with DuetWebControl versions 1.07 and 1.08, but not 1.06.

I have documented the thermocouple support for Duet electronics at %Using thermocouples%Connecting_thermocouples.

=== DC42 1.09o
"http://forums.reprap.org/read.php?146,601427"
The major changes in this release are:
* Implemented F, H and R parameters to M106 command (see %M106%gcode_cvt!M106.3a_Fan_On ). **The second fan output on a Duet 0.8.5 now defaults to being a thermostatic fan at power up.**
* Improved speed of file upload to SD card, by about 30% in my tests
* G32 is now allowed if the printer has not been homed, if there is a bed.g file - so if your bed.g file starts with G28 then you don't need to home the printer before running G32
* G30 commands are no longer allowed on a delta printer that has not been homed
* M572 parameter P (drive number) replaced by parameter D (extruder number)
* File info requests are now processed in stages to reduce impact on printing (thanks chrishamm)
* Use latest network stack and webserver modules from chrishamm (thanks chrishamm)
* Added Roland mill support (thanks RRP/chrishamm)
* Added S parameter (idle timeout) to M18 and M84 commands (thanks chrishamm)
* Moved I/O pin assignments to separate Pins.h file to more easily support alternative hardware (thanks dnewman)
Bug fixes
* Bug fix: filament usage and % print complete figures were incorrect when absolute extruder coordinates were used
* Bug fix: file-based print estimate was occasionally returned as 'inf' on some systems, which caused the web interface to disconnect
* Bug fix: M666 command now flags all towers as not homed
* Bug fix: extruder pressure compensation (M572 command) occasionally caused spurious extruder reversals on some prints

Note for Duet 0.8.5 owners:

- If you wish to take advantage of the new feature to use the second fan output to drive the hot end fan with thermostatic control based on the hot end temperature, be aware that the fan defaults to OFF at power up. It will turn ON as during firmware initialisation. However, it will not turn on if you put the Duet in firmware upload mode. Therefore, avoid pressing the Erase button on the Duet or sending M999 PERASE when the hot end is hot. Alternatively, remove resistor R99 from the Duet, then the second fan output will default to On at power up.

- If you wish to use the second fan output as a controllable cooling fan, put M106 P2 H-1 in config.g to disable thermostatic mode.

=== DC42 1.09m
"http://forums.reprap.org/read.php?146,593668" 
I am pleased to announce a new release of my fork of RepRapFirmware. 

Apart from some code tidying up, the changes in this release are as follows (unfortunately I have not yet had time to integrate some changes from Dcnewman's fork and Chrishamm's fork):

New features
*The PWM frequency for the heated bed and for any heater used as a chamber heater **is now 10Hz** for better compatibility with DC-AC SSRs.
*The PWM frequency for fans is now configurable using the F parameter on the M106 command. The default is 500Hz, which gives reasonable control of fans not designed for PWM. Increase it to 25000Hz when using 4-wire PWM fans.
***When a Duet 0.8.5 board is configured or detected, the fan control is now automatically inverted.** If you previously used M106 P0 I1 in config.g to invert it, you will need to remove that.
*M579 (scale Cartesian axes) is now implemented (thanks Chrishamm).
*M27, M114, M119 and M573 commands can now be executed concurrently with other commands.
*When DDA debugging is enabled, the debug output now includes all active extruders instead of just the first two.
*M408 S0 now includes the fan speeds (for PanelDue).
*M119 now reports the Z probe as well as the endstop switch states.
*A tool can now be defined even if a tool with the same tool number exists already. The existing tool will be shut down and deleted.
*The bed heater can now be disabled using M140 S-1 (thanks Chrishamm).
*The chamber heater (if present) and the endstop switch states are now reported to the web interface (thanks Chrishamm).
*Increased default Z prove dive height to 5mm.
*Increased default PID Ki to 0.2

Bug fixes
*On a CoreXY machine, XY speeds were too low by a factor of sqrt(2).
*On a delta machine, after running auto calibration the Z=0 height could be slightly inaccurate, depending on the difference between the X and Z endstop corrections
*When using a non-intelligent modulated Z probe on a Duet 0.8.5, the modulation pin number was incorrect.
*The M27 (Report SD card print status) response was inverted compared to what it should be. When in Marlin emulation mode it now includes the "byte n/m" field that some versions of Pronterface expect.
*Cold extrusion prevention did not work - an error message was generated, but the extruder was driven anyway.
*M999 PERASE is now more reliable (thanks Chrishamm), but still not completely reliable.
*M23, M30 and M32 commands did not work when the filename parameter passed included an absolute path.
*A memory leak occurred when a tool was deleted.
*All moves are now completed before switching to CoreXY mode.
*Polling requests from PanelDue were not replied to while a macro was being executed.
*M667 with no parameters returned an incorrect string. 

=== DC42 1.09k
"http://forums.reprap.org/read.php?146,560675" 
The changes since 1.09j-dc42 are:
*Added F (probing speed) and T (travel speed) parameters to M558 command
*Removed M210 command because home feed rates are defined in the homing files and the M210 Z parameter no longer defines the Z probing speed
*Increased UART interrupt priority to avoid dropping characters sent by PanelDue
*Implemented M42 command, see %M42%gcode_cvt!M42.3a_Switch_I/O_pin for supported pins

Bug fixes
*Bug fix: M558 P3 did not leave the Z probe control pin high
*Bug fix: in version 1.09j only, moves surrounding a G92 E0 command were sometimes executed incorrectly (this affected printing of gcode files that use absolute extruder coordinates)
*Bug fix: G4 dwell commands were sometimes executed before the previous move was complete
*Fixed driver bugs to allow multiple sector reads/writes from/to the SD card
*Increased SD card upload speed
*Updated to latest Atmel HSMCI driver
*Moved FileStore, MassStorage and Line classes into separate source files

The compatible web interface is still DuetWebControl 1.06.

=== DC42 1.09i
"http://forums.reprap.org/read.php?146,553130" 
Improvements in this release:
*Added support for second extruder and cooling fan on Duet 0.8.5 (thanks T3P3)
*Added auto detection between 0.6 and 0.85 Duet revisions
*Added optional P parameter to M115 command to select board type between Duet 0.6, 0.7 and 0.85
*Changed M115 output to report the board type that was configured or auto-detected
*Improved the step ISR and step pulse generation efficiency to allow higher movement speeds, especially when using 0.9deg/step motors on delta printers
*Added XYZE parameters to M569 command to allow stepper driver remapping (e.g. to use external stepper drivers connected to the expansion connector)
*Added R parameter to M569 command to allow enable signal to be reversed when using external drivers (thanks dnewman)
*Removed R parameter from M558 command, This is no longer needed, because board type Duet 0.7 can now be set via M115 instead.
*Moved Fan0 RPM sense pin to expansion connector pin PA14 to avoid conflict with Duet 0.8.5 FAN1 pin
*M408 poll command (used by latest PanelDue firmware) can now be handled concurrently with other commands

See %M115%gcode_cvt!M115.3a_Get_Firmware_Version_and_Capabilities and %M569%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values for details of the new M115 and M569 parameters supported.

===DC42 1.09g
"http://forums.reprap.org/read.php?409,548713" 
*Fixed print quality problems that mostly affected delta printers e.g. on spiral vase cylinder
*When reconnecting a browser, cancel any file upload from the same IP address
*M111 now prints the number of each module with debugging enabled or disabled
*In special moves on delta printers, the F parameter is now interpreted as the speed of the tower that moves the most
*M114 now reports stepper positions as well as head position Default to output in Marlin mode
*M104 command defaults to the only tool if there is only one tool and it is not selected
*Trying different code for M999PERASE command to see if we can get it to unlock flash and reset more reliably
*When step errors are logged, report them immediately if Move debugging is enabled. Also reports the total number of step errors in M122.
*Changed interrupt priority to make tick interrupt higher priority than step interrupt, because we rely on the tick interrupt to check for over temperature conditions and kick the watchdog

=== DC42 1.09e
"http://forums.reprap.org/read.php?340,544298" 
* Added H (height correction) parameter to G30 command, to allow for the Z probe trigger height varying with XY position
* G30 S-1 now reports trigger height without changing the Z origin
* Changed interrupt priorities to make step pulse timing interrupt higher priority than Ethernet (thanks Chrishamm)

=== DC42 1.09d
"http://forums.reprap.org/read.php?146,540140" 
I have released a new version of my fork of RepRapFirmware. 
For users of delta printers, the main improvement is that you can now include the X and Y tower position corrections in the M665 command in config.g.

=== DC42 1.09c
"http://forums.reprap.org/read.php?340,526505" 
Changes since 1.09b are:
*Fixed two potential divide by zero errors in PrintMonitor
*No longer reports an error if a tpre, tpost or tfree macro file is not found
*Changed the way bed height errors are reporting after bed probing without calibration (i.e. with parameter S-1 on the final G30 command)
*Final Z probing speed is now always 1/3 of the initial probing speed as set by M210 instead of the Z jerk speed
*Bug fix: after Z probing, the Z height was set incorrectly by 1 motor microstep, which affected delta calibration
*Updated homedelta.g file to use slower final homing and faster positioning after homing

The recommended web interface is still DuetWebControl 1.06.

=== DC42 1.09a
"http://forums.reprap.org/read.php?178,510151" <small>17 May 2015</small>
*Merged in Chrishamm latest changes to Network and Print Monitor modules. DHCP and Netbios names are now supported (thanks RRP/Chrishamm)
*Added command M999 S4321 to unlock flash memory, reset and boot to BOSSA port (so you don't need access to the Erase button on the Duet)
*Z dive height is now relative to Z probe trigger height and the default is reduced to 3mm. As before, you can use the M558 H parameter to adjust it.
*Added experimental support (not yet complete) for an acoustic Z probe for delta printers (Z probe type 5)

Bug fixes:
*Bug fix: when using a simple modulated IR probe, very high readings were occasionally read
*Bug fix: on Cartesian printers, the firmware once again prevents Z homing before X and Y are homed, if the Z probe is used for Z homing
*Various code tidying

If you upgrade to this release from my 1.04 series firmware on a delta printer, please note the following:
# If you are using the H parameter in the M5568 command to increase the Z dive height, you may wish to remove it, or reduce the value - because the Z probe trigger height is now added to the dive height automatically.
# The meaning of the S parameter in the G30 command changed at version 1.04d, so if you upgrade from a version prior to 1.04d, be sure to pick up the new version of the bed.g file and adjust the probe coordinates for your machine.

== Duet Web Control - <small>by Chrishamm</small>
=== Duet Web Control v1.11 
Features:
* Implemented new notification system
* G-code responses are always shown via notifications (if the Console page is not active)
* Progress bar is shown in notification while new firmware is being flashed
* Restructured settings page
* Added preparations for new CPU temperature sensor field
* Updated Bootstrap, Bootstrap-Slider and JQuery to latest versions
* .map files will be uploaded to /www/css in the future
Bug fixes :
* Bug fix: Upload button(s) could open file dialog even if not connected
* Bug fix: Beep wasn't working any more with latest browser versions
* Bug fix: Headings were too small when using the dark theme
* Bug fix: Config file was occasionally not updated
* Bug fix: Disconnect and reconnect didn't work as it should
* Bug fix: AJAX timeouts were not applied properly
* Bug fix: Directories could be dropped on themselves which unlinked them
* Bug fix: Upload confirmations were shown after failed uploads

===  Duet Web Control  v1.10 
* **Added support for autonomous firmware updates**
* Fan RPM field can be hidden on the Settings page
* DWC asks for page reload after web interface update
* ZIP file uploads are now only allowed on Macros and Settings pages
* Minor other changes

=== Duet Web Control v1.09 
* Replaced textarea autoresize library to fix issues with the dark theme
* Warm-up time on the print status page always uses firmware value
* Moved web cam integration panel on the settings page to the centre
* Added margin below config file textarea
* Bug fix: Web cam integration generated a faulty URL 

=== Duet Web Control v1.08
"http://forums.reprap.org/read.php?146,610309" <small>16 Jan 2016</small>
I think this new web interface version leaves nothing to be desired, but if you're wondering what has changed this time, here the full changelog:

* Cookies are no longer used and settings are now stored in localStorage
* Added French and Swedish translations (thanks PRouzeau and Djhg2000)
Rewrote many parts of the print status page and made the following changes:
* Improved print end detection
* Layer times are now added as hoverable dots
* Last layer time is displayed in Collected Data
* Optional webcam surveillance image can be displayed
*Implemented drag and drop on the G-Code and Macro file pages
*ZIP files can be uploaded (their content is unzipped via JS and each file is uploaded individually)
*Configuration file can be edited (requires new rr_configfile response)
***Split up JS code into model and viewmodel files**
*Removed Spools page (load+unload functionality can be restored via macros)
Bug fixes
*Bug fix: Removed bad JS call from the macro update function
*Bug fix: Sometimes the update loop was running twice

The great advantage of this web interface version is that it no longer stores its settings in a cookie, which means that it sends less data in every HTTP request. I hope this will purge some connectivity problems and increase networking performance a bit. When you load it for the first time, all of your cookie settings will be migrated to HTML5's localStorage automatically. If you are missing translations, just send me a pull request at GitHub.

Note that multiple files can be already uploaded at once on the Settings page.

In my latest firmware version I have improved the output memory management and merged dc42's recent changes from his 1.09p-alpha2 release. My fork is almost identical to dc42's (in fact all G-codes should be compatible), but there are differences in the G-code processor and I maintain an individual Arduino device tree for the RepRap Duet, which works with the latest Arduino version and doesn't require any extra patching.

■Heating
Heating
(:date 11 Aug 2016 02:05:)On all printer firmwares, you find heating loops, mostly controlled with "PID algorithm https://en.wikipedia.org/wiki/PID_controller."
All self-build printers and a lot of commercial printer suffers from heterogeneity in temperature displayed values.
This does have many sources. 

Calibration is needed for the heating loops and its code shall be written in config.g:
*G-code for thermistor and ADC calibration is %M305%gcode_cvt!M305.3a_Set_thermistor_and_ADC_parameters (was M304 on old firmware version)
*G-code for PID loop is %M301%gcode_cvt!M301.3a_Set_PID_parameters  (alternatively %M304%gcode_cvt!M304.3a_Set_PID_parameters_-_Bed could be used for BED PID)
Note that if there is no code in the config file, defaults values are used. 

As for most %RepRap Firmware%RepRap_Firmware documentation on this wiki, some details of this page apply only to recent Firmware version of DC42 or Chrishamm forks (1.10 or later).
==Measurement
=== Temperature measurement 
Due to very low sensor cost and simplicity of the electronic, most printers are using "thermistors https://en.wikipedia.org/wiki/Thermistor" for temperature measurement. The resistance of a thermistor with "negative temperature coefficient" (NTC) reduce while its temperature increase. This is not linear and for the type of thermistor used in printers, the resistance became fairly low when approaching 300°C, decreasing the precision in this range. In addition, 300°C is the maximum temperature usable for most thermistors and they tend to failed if used over this temperature.

In the simplest approximation method, 2 parameters are used to qualify a thermistor: first its resistance at a fixed temperature, generally 25°C then the rate of resistance change for a temperature modification named "Beta". It is an approximation and so this Beta coefficient is only valid for a reduced range of temperature. This is the method used in RepRap Firmware. Other firmware may use tables instead of this formula, which may be more precise but the tables are not always available. 

Common resistance for printer thermistors is 100 kOhm at 25°C, sometimes 10kOhm thermistors are used for Bed.   

Typically for 100k NTC thermistors the Beta coefficient vary from 3800 to 4200. 

Unfortunately, for a same reference, the parameters varies for each manufactured part.

===Analog converter
320%Duet_Thermistor.jpg
For thermistor, this is a voltage which is measured by the microcontroller. A current flows through the thermistor and the voltage drop in thermistor is measured. To limit the current flow, a fixed resistor is installed. The value of this resistor have an important effect on the measure. On the first batches of Duet 0.6 boards, these resistors were 1kOhm and later this was modified to 4.7kOhm. It shall be noted that Replikeo clone boards v0.6 are in principle, still using 1kOhm resistors. All 0.8.5 boards are using 4.7kOhm resistors.
The electronic circuit measuring the voltage in the micro-controller is called an Analog to Digital converter, ADC in short.
The values given by these ADC have also significant variation for each manufactured unit, and for all ADC within the same controller. 

The parameters of M305 command are :
*Pnnn ;heater number: 0 is bed, 1 is extruder 0, etc. 
*Tnnn ;thermistor resistance at 25°C, typically T100000 (100k), sometimes T10000
*Bnnn ; beta coefficient , shall be defined for the usable range, typically B4200 for a 100k thermistor
*Rnnn ; value of the board resistor 1000 for old 0.6 boards, 4700 for others – see your board documentation.
*Lnnn ; ADC low offset – shall be measured according below method
*Hnnn ; ADC high offset – shall be measured according below method
*Xnnn ; Heater ADC channel . Sensor remapping – mostly used if the thermal sensor is not a thermistor. See %other sensor type%Heating!Other_sensor_type_
Typical example :
<<M305 P1 T100000 R1000 B4200>>

==Heating power
Most heaters use resisting material which heats while current flows. The resistance varies somewhat while the material is heating, but a measure of resistance while cold gives a valuable element of comparison within different units.

Again, there is significant manufacturing variability of power for a given model of heater.

The power (often noted W) of a resistive heater is equal to = Resistance * Current^2. 

The current is : Voltage / resistance, so W = Voltage^2 / resistance. So the power rise very quickly with voltage. 

RRF allow power limitation for heaters in M301/M304 codes.
If your voltage exceed the nominal voltage of the heater or if the heater resistance is lower than expected, You may want to limit the power, which can be done with a coefficient limiting the PWM ratio. This coefficient default to 1 and is names S. So S0.8 will cap the PWM ratio to 80% of the time.  

This also may be used if your power supply power is a bit insufficient, however this only will work if your power supply have high capacitors on their output to limit the pulse due to the PWM. 
The power of an heater increase as the square of the voltage, so the limit shall be approximately the inverse of square of the extra voltage. e.g. if you are using 14V power supply for a 12V cartridge, the coefficient shall be (12/14)^2 = 0.735, entered as S0.735.

== Calibration 
To compare temperatures, you need to calibrate the equipment. This is especially important for a multi head printer to have the same behaviour within all the heads. 
For measure, two thing shall be calibrated :
*The Analog to Digital converter (ADC)
*The Thermistor
*A third element is of utmost importance for calibration, this is the board resistor value, you shall rely on documentation or board inspection to confirm it.

Sometimes, at room temperature, the temperature indicated by the software is -273 °C (absolute zero), which indicates the measure temperature is out of the range, due either to wrong parameters or ADC variability in excess of what can be measured. If you get this temperature, if your parameters are correct and the thermistor is properly wired, you shall calibrate the ADC (see below), as software will not start the heating loop without a temperature measurement.

===ADC calibration
320%Duet_ADC_calibration.jpg
Parameters for thermistor and ADC are handled by %M305%gcode_cvt!M305.3a_Set_thermistor_and_ADC_parameters code.
DC42 fork of RepRap Firmware added parameters for ADC calibration since v 0.57u (march 2014)
For ADC calibration, you will need two resistors, one of 220 Ohm (1%) and one of 100kOhm (1%). It is practical to connect these resistors to Dupont connectors, which may help to avoid false contact while measuring. 
*Connect the 100K resistor at the thermistor pins and adjust the H parameter to get a reading as close to 25°C as possible (you probably won't manage exactly 25°C because the ADC quantum is about 0.6°C at this temperature). 
*Then substitute a 220 ohm 1% resistor and adjust the L parameter to get a reading of 260.1°C. 
*Change the resistor back to 100K, check you are still getting a reading close to 25°C, and fine-tune the H parameter if necessary.
This shall be done for each ADC of your board, as there could be more than 10°C variation within different ADC on the same board. 

Note: Software will indicate a temperature of 2000°C for a shorted thermistor.

===Thermistor calibration
While buying a thermistor, check that either the exact model or NTC coefficient is supplied. 
You may check a thermistor by measuring its resistance at known temperatures if you have the appropriate tools. The room temperature resistance is easy to check and you also can easily check 100°C (boiling water at sea level) , which is nice for a bed thermistor, but far from the used range for a hotend thermistor. 
If you have a trustable thermometer for comparison, you can test with a hot oil bath (dangerous!). 
Then you can enter the measured resistances in "this calculator http://www.giangrandi.ch/electronics/ntc/ntcparam.html"  or this "Libre office sheet http://reprap.org/wiki/File:MeasuringThermistorBeta-ThermistorBeta.ods" which will give you the Beta coefficient. It shall be noted that the beta parameter is an approximation which is only valid in a given temperature range.

Remember water boiling temperature change with altitude, e.g. you will have 90.5°C boiling temperature in Quito (Equator).  You already have 99°C at 305m altitude. 

== Control loop PID parameters 
===Presentation
"PID algorithm https://en.wikipedia.org/wiki/PID_controller" is the most used control method for "closed loop https://en.wikipedia.org/wiki/Feedback" system. It stand for Proportional, Integral and Derivative and is described in details in many web pages. 
It does exist algorithms which can test the feedback of the heating loop and evaluate automatically the PID parameters. However (as of May 2016), there is not yet any auto-tuning algorithm in RepRap Firmware and you have to adjust parameters manually.
RRF DC42 fork added a few parameters to improve the control (command M301 and M304).

"Tuning a PID http://reprap.org/wiki/PID_Tuning" loop is not an easy task. Some are using a mathematical method named "Ziegler-Nichols https://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method" , which may be long to undertake and may not give convincing results. One manual strategy is defined "Here http://robotics.stackexchange.com/questions/167/what-are-good-strategies-for-tuning-pid-loops"

The RRF default values are a good starting point.

M301/304 parameters
*Hn : Heater number (only for M301) H0: bed, H1: E0, H2: E1…
*Pnnn : Proportional coefficient
*Inn : Integral coefficient
*Dnn : Derivative coefficient
*Wnnn : Maximum value of the integral ‘accumulator’. Limit the effect of integral after long heat/cool phase
*Tnn: Percentage of PWM (scale 0:255) to maintain 1°C temperature rise. To get it, run a few times M573 to get the average percentage, then T value shall be : (M573 result)*255/(temperature rise over ambient, by example 215-20=195). This parameter is specific to RRF, but when properly adjusted, it will improve notably the control. 
*Bnn : When measured temperature difference with the set-point temperature exceed this value, control is on/off

===Hotend parameters
Hotend default parameters are reasonably accurate on all metal hotends and others (e.g. RepRapPro hotends).

Default parameters : 
<<M301 Hn P10 I0.1 D100 T0.4 W180 B30 ;n being the heater number: 0 for bed, 1 for hotend 0, etc.>>

For an hotend with low inertia and high power as the "Fisher http://reprap.org/wiki/Fisher" delta hotend, other parameters were used (with a heating block insulated with Kapton and no part cooling). 
<<M301 H1 P12 I0.25 T0.21 D70 W150 B20 S0.7; power is limited as the cartridge is 50~60W>> 

It shall be noted that if you insulate your Hotend with polyimide tape or use a part cooling fan, that will modify the loop feedback, and you may modify its parameters. Try first to re-evaluate T parameter (which is linked to the thermal loss).

===Bed parameters
Bed control is set by default to ‘bang-bang’ control, which is just an on/off switch while measured temperature exceed a given difference with the setpoint. It is quite unstable with oscillation within 10/15°C range, so it is recommended to use PID control. It shall be noted that for bed control, the PWM frequency is lowered to 10Hz (on recent firmware) and so is compatible with "SSR https://en.wikipedia.org/wiki/Solid-state_relay." 

'P-1' proportional coefficient is used to indicate bang-bang control so there is no default proportional coefficient for a PID loop, but a starting point is setting the proportional coefficient to 85.

With this proportional coefficient, the default for bed PID control became:
<<M304 P85 I5 D500 T2.7 W255 B5>>
These default may be reasonable values for relatively high inertia bed (Glass bed or thick aluminium).

Another example with a top surface which create insulation on the top of the bed (printbite) with 280W for a bed of 700 cm2.
<<M301 H0 P85 I0.25 D750 T1.3 W200 B5; 'M301 H0' is equivalent to M304>>

=== Using Ziegler-Nichols method
"RepRap forum http://forums.reprap.org/read.php?416,666677,666756"
* Set S to 1.0, P to 20, B to 30, and I, D and T to zero.
* Command the hot end to a high temperature, say 250°C. As soon as it reaches 160°C, command it to 0°C. Watch the temperature to see how much it overshoots. Set the B value to about 5 to 10 higher than the amount of overshoot.
* Command the temperature to 250°C and wait. It won't ever reach 250°C because of the zero I and T terms. When the temperature has stopped increasing, read it off, also use M573 P to get the average PWM.<br />Set the T value as follows:<br />. T = average_pwm*256/(temperature_reached - room_temperature)
* Now follow classic Ziegler-Nichols tuning. With the temperature set to e.g. 200°C, increase P up to the point at which the temperature shows regular oscillations. Call this value Posc. <br />Measure the period of the oscillations, call this Tosc. Then: <br />. P = Posc/3 (increase/decrease this if desired to increase/decrease the overshoot) <br />. I = 2P/Tosc <br />. D = Tosc * P/3

==Maximum temperature
There is a maximum temperature for hot-ends which will stop the heating loop and trigger a default if it is reached, even for a very short time. 

This maximum temperature is defined by code %M143%gcode_cvt!M143.3a_Maximum_hot-end_temperature and its default is now 260°C (from V1.12) while its used to be 300°C.

==Heating timeout
There is a safety which stop the heating and trigger a default if the temperature setpoint is not reached within a given time.

This timeout is defined by %M570%gcode_cvt!M570.3a_Set_heater_timeout and the default value is 150 sec. This timeout is not activated for bed and chamber heating (from v 1.12).

If you get this default, you may question the power of your heating cartridge, but this is also often related to poor PID adjustment.  Insulation of the heating block will help.

==Evaluating instant heater power
There is a code %M573: Report heater PWM%gcode_cvt!M573.3a_Report_heater_PWM which gives you the PWM ratio currently in use for heating, on a scale from 0 to 1.

The PWM ratio varies permanently with the loop control, so you may run this code three or four times and calculate mean value to get accurate result.

This helps you evaluate your heater power (which is proportional to the PWM ratio) at the operating temperature and may help evaluate if difficulties to reach a temperature are related to poor PID adjustment or insufficient power. This is also used to adjust M301 T parameter.

== Controlling temperature 
*%G10%gcode_cvt!G10.3a_Tool_Offset defines heaters operating and standby temperature 
*Selecting a tool will start heating and continue.
*Tool shall be selected before using M104 or M109
*%M104: Set Extruder Temperature and continue%gcode_cvt!M104.3a_Set_Extruder_Temperature
*%M109: Set Extruder Temperature and wait for it%gcode_cvt!M109.3a_Set_Extruder_Temperature_and_Wait
*%M140: Set Bed Temperature and continue%gcode_cvt!M140.3a_Set_Bed_Temperature_(Fast)
*%M190: Set Bed Temperature and wait for it%gcode_cvt!M190.3a_Wait_for_bed_temperature_to_reach_target_temp
*%M141: Set Chamber Temperature and continue%gcode_cvt!M141.3a_Set_Chamber_Temperature_(Fast)
*%M144: Stand By Your Bed%gcode_cvt!M144.3a_Stand_By_Your_Bed
*%M562: Reset temperature fault%gcode_cvt!M562.3a_Reset_temperature_fault

==Other sensor type
===Why using other sensor
Due to the limitation of thermistors, other type of thermal sensors may be used. They need external small conversion boards with serial communication (SPI) to the main board. You shall be cautious not using boards with 5V level shifters, which may kill your main board (maximum signal voltage is 3.3V on Due processor). 

===Thermocouples
"Thermocouples https://en.wikipedia.org/wiki/Thermocouple" are the most frequently used sensor type in industrial environment. They are rugged and can stand high temperature. They produce a very low voltage while submitted to temperature.  They are reasonably precise even when not calibrated (~2°C). The terminals and cables metallurgy shall be specific and related to the thermocouple type (most frequently ‘K’ type). These constraints explains why they are less frequently used than thermistors in printers.

However, some are using them because of their better reliability at high temperature. 

See %Using thermocouples sensors%Connecting_thermocouples

===Pt100
"Pt100 https://en.wikipedia.org/wiki/Resistance_thermometer" is another type of resistive sensor.

The name stand for Platinum (Pt) resistance of 100 Ohm at 0°C.

It can be very precise and is usable with higher temperatures than thermistors (max ~600°C), but it is sensitive to parasites if connected with only two wires.

See %Connecting PT100 temperature sensors%connecting_pt100 

==See also
*"Thread about ADC calibration on RepRap Forum http://forums.reprap.org/read.php?340,326029" 
*"Thread about PID tuning on RepRap Forum http://forums.reprap.org/read.php?340,326029"
*"PID_controller: Manual_tuning https://en.wikipedia.org/wiki/PID_controller#Manual_tuning" on wikipedia

■Connecting_PT100
Connecting PT100 temperature sensors
(:date 11 Aug 2016 02:05:)
This page describes the support for PT100 and other RTD temperature sensors in RepRapFirmware for Duet and Duet WiFi electronics.  For thermocouple temperature sensors, see %Using thermocouples%Connecting_thermocouples instead.
==Hardware
To connect a PT100 sensor to a Duet, you need a RTD interface board based on the MAX31865 chip. The interface board you need depends on which Duet you have.

allb,Duet_WIFI_1.0+/=
==Duet WiFi
220%DWiFi-PT100-board.jpg

The Duet WiFi supports up to two MAX31865-based daughter boards. Each daughter board supports two PT100 temperature sensors. These daughter boards can be purchased from Think3DPrint3D and Duet WiFi distributors . On the lower board, the terminal blocks labelled RTD1 and RTD2 will be temperature measurement channels 200 and 201 respectively. If you stack two daughter boards, the terminal blocks on the upper board will be channels 202 and 203.

The pre-production daughter boards are configured for 2-wire PT100 sensors as shipped. Connect the PT100 sensor to the inner two terminals of the 4-way terminal block. If you want to use a 4-wire connection, you need to cut the two short traces that join each pair of solder pads next to the terminal block. This requires a craft knife with a sharp point, and a steady hand. To revert to a 2-wire connection, bridge the solder pads.

The production PT100 daughter boards will not have a trace between the pads, and the pads will be closer together to make it easier to solder-bridge them. To use a 2-wire PT100 connection, you will need either to solder-bridge the pads, or to link the outer pairs of terminals together using short pieces of wire.

See https://miscsolutions.wordpress.com/2016/06/25/more-delta-printer-upgrades-wifi-and-silence/ for additional information about using a 4-wire PT100 connection.
=/

allb,Duet_0.85,Duet_0.6+/=
==Duet 0.6 or 0.8.5
220%Max31855-board.jpg

Purchase a third-party MAX31865-based PT100 interface board. The Duet uses 3.3V signalling, so get a board without 5V level shifters. These boards are readily available on eBay. You will need one MAX31865 for each RTD sensor you want to connect. You can also buy boards with two MAX31865 chips, providing two channels on a single board.

These boards generally work with both 2- and 4-wire RTDs so they have a 4-pin terminal block. When using a 2-wire RTD, connect it to the RTD+ and RTD- terminals, and also add a wire link between the Force+ terminal and the RTD+ terminal, and another between the Force- terminal and the RTD- terminal.
/: 
=MAX31865 signal name ::=Duet signal name ::=Duet expansion connector pin ::=DueX4 expansion connector pin ::
Vcc ::+3.3V ::3 ::25 ::
Gnd ::GND ::2 ::21 ::
SDO ::MISO0 ::30 ::26 ::
CS (see below) ::NPCS0,NPCS1,TXD1,RXD1 ::27,26,11,12 ::20,11,6,7 ::
SCK ::SPCK0 ::28 ::24 ::
SDI ::MOSI0 ::29 ::23 ::
:/

Connect the CS pin to one of the pins listed above, a different one for each MAX31865 board. The pins listed are for temperature sensor channels 200, 201, 202 and 203 respectively. If you have Roland mill support enabled in the firmware, only two channels (200 and 201) are available because the mill uses the other two pins.

You may connect both thermocouple and RTD boards to the SPI bus at the same time, but each device must have its own CS pin. For example, you can have a thermocouple board on channel 100 and a RTD board on channel 201.

Your RTD interface board may also have a DR (Data Ready) pin. Leave it unconnected.

The communication between the Duet and the RTD interface board uses 4MHz SPI signalling, so the wires should be kept short.
=/
==Firmware configuration
To tell the firmware to use a RTD channel for one of the heaters, use the X parameter in the M305 command for that heater to specify the required channel (200 to 203). For example, M305 P1 X200 tells the firmware that for heater 1 (which is normally the first hot end heater) it should sense the temperature using the PT100 board whose CS pin is connected to NPCS0. The R, S, T, B, H and L parameters of the M305 command are not used.
Troubleshooting

If the reading at room temperature is higher than it should be, then you probably have a bad connection between the RTD interface board and the sensor, or the wires to the sensor are too long or too thin. Each additional ohm of wiring resistance will increase the temperature reading by 2.5C. 

<small>Author: DC42 </small>

■Connecting a bed heater
Connecting a bed heater
(:date 11 Aug 2016 02:05:)==Low voltage bed heater driven directly from the Duet
Duet and Duet WiFi provide a terminal block for connecting a bed heater. The voltage supplied to the bed heater is the voltage you apply to the VIN terminals from your power supply. The maximum current you can safely draw depends on the Duet version.

allb,Duet_WiFi_1.0+/=
==Duet WiFi
The Duet WiFi is safe at up to 15A bed heater current. The trace between Vin+ and bed Heater + is duplicated on both sides of the PCB.
=/

allb,Duet_0.85+/=
==Duet 0.8.5
The safe bed heater current has not been measured, but should be somewhat above 10A because the PCB trace between Vin+ and Bed Heater + is wider than on the Duet 0.6. As with the Duet 0.6, you can connect a wire between the Power In +(VIN) and Bed Heater +(VIN) terminals on the back of the board to increase the current capacity. The bed heater terminal block is larger than on the Duet 0.6.
(:clear:)
=/
allb,Duet_0.6+/=
==Duet 0.6
The board is comfortable with 10A bed heater current, but not much more. The weak link is the PCB trace on the top side of the board that connects the Power In V+ and Bed Heater V+ terminals. If you want to use a bed heater that draws more than 10A, solder a thick wire between those terminals on the back of the board.
=/

==Bed heater driven using a Solid State Relay
You can use a solid state relay (SSR) to switch the bed heater by connecting its control terminals to the Duet bed heater terminals. Make sure that you get the wires to the + and - control terminals of the SSR the right way round. On the Duet 0.6, the + bed heater terminal is closest to the VIN terminal block. On the Duet 0.8.5 and Duet WiFi, the - bed heater terminal is the one nearest the VIN terminal block.

When using PID to control the bed heater, RepRapFirmware uses a low PWM frequency (10Hz) so as to be compatible with all standard types of SSR.

**Caution**: when using a high-powered bed heater, in the event that temperature control fails and the bed heater is turned on at full power for an extended period of time, you should **either** make sure that the bed heater and bed will not exceed a safe temperature, or else install a thermal cutout to disconnect the bed heater or its power supply before excessive temperatures are reached.

==Mains voltage AC bed heater
Use a zero-crossing DC-AC SSR such as Crydom D2425 or Fotek SSR-25DA + safety cover, or Crydom D2425 + safety cover KS101. If your bed heater draws more than about 5A then the SSR may need a heatsink.
720C%Duet_0.8.5_wiring2.png

Take appropriate safety precautions when using a mains voltage bed heater. In particular:
*Connect metal parts of the printer to mains ground. This includes the printer frame, the bed plate if it is conductive (e.g. aluminium), and any other metal parts that the bed heater or SSR wiring might come into contact with if wires break.
*Ensure that it is not possible for the user to touch the SSR terminals or any other exposed mains wiring, or for yo to touch the mains wiring when you are working on the printer with power applied. If your SSR is not supplied with a clear plastic safety cover, buy one (for the Crydom SSR listed above, the part number is KS101).
* If the bed is moving, use highly-flexible wire or cable to connect the moving bed heater to the stationary wiring, and use  strain relief at both ends of that cable to reduce the risk of the cable fracturing with repeated movement.
* Provide a fuse for the bed heater circuit or the whole printer appropriate to the current draw and the current rating of the mains lead. One option is to use a panel mount IEC mains inlet connector with a switch, neon indicator and fuse built in.
* It is highly recommended that you power the printer via a Ground Fault Current Interruptor (GFCI) - more commonly called a RCD (Residual Current Device) in the UK - to protect against electric shock in the event of a fault.

If in doubt, consult a qualified electrician.

==Low voltage (12V or 24V) DC bed heater
Use a low voltage drop DC/DC SSR such as the Auber Instruments MGR-1DD80D100 or Crydom DC100D40. The SSR may need a heatsink, depending on the current. Do not be tempted to cheap DC-DC SSRs such as the SSR-40DD, which is basically useless for this application because of its high voltage drop.

<small>Author: DC42 </small>

■Connecting chamber heater
Connecting and configuring a chamber heater
(:date 11 Aug 2016 02:05:)RepRapFirmware supports a chamber heater, but by default no chamber heater is configured. To use a chamber heater, you will need a spare heater channel, and either the thermistor channel associated with that heater or another temperature sensing channel.
==Connecting the chamber heater
720C%Duet_0.8.5_wiring2.png
Chamber heaters are typically AC mains powered, so you will need a Solid State Relay (SSR) to drive one. Use a zero-crossing DC/AC SSR such as Fotek SSR-25DA + safety cover, or Crydom D2425 + safety cover KS101. If your chamber heater draws more than about 5A then the SSR may need a heatsink.
Connecting a SSR to a heater output on the Duet, Duet Shield, DueX4 or DueX5

SSRs generally accept anywhere between 3V and 32V input voltage, so you can connect the SSR to the heater terminal block. Make sure you connect the + and - terminals the right way round. The + terminal on the SSR goes to the heater terminal marked + or VIN, and the - terminal pin the SSR goes to the heater terminal marked -.

Connect the thermistor that measures chamber temperature to the associated thermistor input.

==Connecting a SSR directly to the expansion connector
If you have a Duet without an expansion board and no spare heater channels, you can connect the input of the SSR directly to the expansion connector. The heater outputs of the Duet are active low, so connect the SSR - input terminal to the appropriate expansion connector pin, and connect the SSR + input terminal to +3.3V (pin 3 on the expansion connector).

You will also need a thermistor input channel to monitor the chamber temperature. If you are using a PT100 or thermocouple sensor for a hot end, then you can use the thermistor input pins that would otherwise be used for that hot end. The following applies to all Duet versions.

==Configuring the chamber heater
You will need to add a M141 command to config.g to tell the firmware that you have a chamber heater and which heater channel it uses. You will also need a M305 command to configure the temperature sensor, and a M301 command to configure the PID parameters. Here is an example:
<<
M141 H3                       ; heater 3 is the chamber heater
M305 P3 R4700 T100000 B3950   ; heater 3 is monitored by a 100K thermistor with B=3950 and a 4.7K series resistor
M301 H3 P-1                   ; use bang-bang control for the chamber heater
>>
To use a different thermistor channel form the heater channel, add a suitable XS parameter to the M305 command. For example, X1 would tell the firmware to use the thermistor channel associated with heater 1 (which is normally the first extruder heater).

You can use PID control of the chamber heater if you wish. RepRapFirmware uses low frequency (10Hz) PWM on the chamber heater channel so as to be compatible with most SSRs.

==Using the chamber heater
Add the command M141 S### to your slicer start gcode, where ### is the required chamber temperature at the start. Also make sure there is a M116 command somewhere after the M141 command, to wait for all temperatures to reach their assigned values.

In your end gcode, either use the command M0 (which normally switches all heaters off), or the command M141 S0 to turn the chamber heater off. 

<small>Author: DC42 </small>

■Connecting extruder heaters
Connecting extruder heaters
(:date 11 Aug 2016 02:05:)(:notoc:)
The extruder heater connectors vary with the Duet version.
allb,Duet_0.6+/=
==Duet 0.6
The Duet 0.6 provides a 4-way Molex connector for the hot end heater. Pins 1 and 2 are connected together, so are pins 3 and 4. This is to allow the hot end heater current to be shared between the two pins in each pair. If you are using a 12V hot end heater of more than 25W power, we strongly recommend that you connect each of the hot end heater wires to both pins in its pair, to avoid overloading a single pin. With a 24V hot end heater of up to 50W, you need only use one pin in each pair.

Early Duet 0.6 boards did not use Molex connectors but instead had a 6-pin header, of which the two nearest the edge of the board were for the hot end thermistor and the remaining four were for the heater.

Caution! If you use a 4-pin Dupont-style header shell instead of Molex, and you accidentally plug it on to the pins shifted by one position left of right, you are likely to cause irreparable damage to the Duet.
=/
allb,Duet_0.85+/=
==Duet 0.8.5
A 2-pin 2.54mm terminal block is provided for connecting each of the two supported hot end heaters.
=/
allb,Duet_WiFi_1.0+/=
==Duet WiFi
A 2-pin 3.5mm terminal block is provided for connecting each of the two supported hot end heaters. 
=/

<small>Author: DC42 </small>

■Connecting a Z probe
Connecting a Z probe
(:date 11 Aug 2016 02:05:)The Duet 0.8.5 and Duet WiFi provide a dedicated 4-pin connector for connecting a Z probe.
The Duet 0.6 does not have the Z-probe connector, but you can use some pins on the expansion connector for the same purpose.

These are the pins provided on the 4-pin connector, and the corresponding pins on the Duet 0.6 expansion connector:
/:
=Duet WiFi pin marking ::=Duet 0.8.5 pin marking ::=Duet 0.6 expansion connector pin ::= Purpose ::
IN ::AD12 ::39 (AD12) :: Input from Z probe ::
GND ::GND ::2 (or use the GND pin on E0 endstop connector) :: Ground ::
MOD ::PC10 ::41 (AD14) 	:: Control signal for some types of Z probe ::
3.3V ::3.3V ::3 (or use the 3V3 pin on E0 endstop connector) :: Power to Z probe
:/
You can use a Z probe with either an analog or a digital output. The advantage of an analog output is that the firmware will slow down the probe speed when it is getting close to trigger height. Some types of Z probe with digital output should be connected to the E0 endstop connector instead of ot the Z probe connector.

Firmware selection of the type of Z probe you are using is done using the P parameter of the the M558 command in config.g. For example, M558 P1 selects Z probe type 1.

==Z probe modes selectable in firmware
===Mode 1
This is a probe with an analog output connected to the Z probe connector. The probe output rises as it gets closer to the bed. The control signal is driven HIGH.
===Mode 2
This is a probe with an analog output that requires a modulation signal. The probe output rises as it gets closer to the bed. The control signal is driven by a square wave with a frequency of 500Hz. The firmware extracts that part of the analog signal received on the IN pin that is in phase with the modulation.
===Mode 3
As mode 1 except that the control signal is driven LOW.
===Mode 4
The trigger signal is read from the E0 endstop circuit. You can choose whether the signal is high or low when triggered, by using M574 E0 S1 to select active high, or M574 E0 S0 to select active low. The device connected to the E0 STP pin must be able to sink 1.5mA for the Duet WiFi, or 2.1mA for the Duet 0.6 or 0.8.5.
===Mode 5
A switch or digital output device connected between the IN and GND terminals of the Z probe connector. Similar to mode 4 except that the Z-probe connector is used, the input must be active high when triggered, and the only pullup resistor is the 100K nominal pullup in the microcontroller so the sink current requirement is tiny.

==Connecting different types of Z probe
===Mini differential IR sensor by dc42
Connect the VCC, GND and OUT pins of the sensor to 3.3V, GND and IN respectively on the Z probe connector, and select mode 1 in the M558 command.
===RepRapPro 3-wire IR sensor (as shipped with Ormerod 1)
Connect as shown in the RepRapPro Ormerod 1 wiring instructions, using the table above to translate between expansion connector pins and Z probe connector pins if necessary, and select mode 1.
===RepRapPro 4-wire IR sensor (as shipped with Ormerod 2, Huxley Duo and Mendel)
Connect as shown in the RepRapPro Ormerod 2/.Huxley Duo/Mendel wiring instructions, using the table above to translate between expansion connector pins and Z probe connector pins if necessary, and select mode 2.
===Force sensitive resistor(s)
If not using JohnSL's trinket board: Connect the FSR(s) between +3.3V and the IN pin of the Z-probe connector, and connect a fixed resistor between the IN pin and the GND pin. Select mode 1.

If using JohnSL's trinket board: Connect its Vcc, Output and Ground pins to 3V3, STP and GND respectively on the E0 endstop connector, and select mode 4. Alternatively, connect them to 3.3V, IN and GND on the Z-probe connector and select mode 5.

===Microswitch
Connect it between the STP and GND pins of the E0 connector and select mode 4. If it is a normally-closed microswitch, use M574 E0 S1 to select active high trigger level. For normally-open contacts (not recommended), send M574 E0 S0.

===NPN output normally-open inductive or capacitive sensor
Connect its output wire to the cathode of a diode, and the anode of the diode to the E0 STP pin. Connect the sensor ground wire to a ground pin on the Duet, and the sensor's + power wire to a suitable voltage (typically to Vin because these sensors usually need between 6 and 30V power).

The diode should preferably be a small-signal Schottky diode such as BAT43 or BAT85, but a small signal silicon diode such as 1N4148 works for some people.

Select mode 4 in the M558 command.

===PNP output normally-open inductive or capacitive sensor
Connect the sensor output wire to one end of a resistor (call this R1), and connect one end of another resistor (call this R2) to GND on the Z-probe connector. Connect the free ends of R1 and R2 together and to the IN pin of the Z-probe connector. Also connect the sensor ground wire to Duet ground, and the sensor's + power wire to a suitable voltage (typically to Vin because these sensors usually need between 6 and 30V).

The values of R1 and R2 should be chosen so that about +3V appears at their junction when triggered. If R2 is 10K, then suitable values of R1 are 30K if the sensor is powered from +12V, and 68K if it is powered from +24V. 
	
Select mode 5 in the M558 command.

<small>9 aug 16 - Author: DC42 </small>

■Power wiring
Power wiring
(:date 11 Aug 2016 02:05:)(:notoc:)
320R%DuetWiFiPower.jpg 
Connect the terminal block labelled POWER IN to your power supply. Make sure the wires you use are of adequate gauge to carry the current to supply the bed heater, extruder heater, stepper motors and electronics.

**Caution: be sure to get the polarity right!** The board is not protected against reverse polarity. The positive wire from the power supply goes to the terminal marked + which is the one nearest the stepper motor connector side of the board.

If you use stranded core wire, **do not tin** the ends of the wire, because of you do then the heat generated by the current will cause the solder to flow and the connection will become loose. Preferably, use bootlace ferrules on the end of the wires.

See "RepRap Wiki:Crimping http://reprap.org/wiki/Crimping". 

<small>Author: DC42 </small>

■Duet_Web_Control
==Duet Web Control
(:date 11 Aug 2016 02:05:)While the %Duet%Duet board could be handled with a command program on your PC communicating by USB with the board as traditional in 3D printing, a web server (Duet Web Control – DWC) exists on the Duet. It is the primary choice of communicating for most users and it is a major asset of the %RepRap Firmware%RepRap_Firmware. A capable server integrated in the main printer board is rare %[ref]%Duet_Web_Control!References Connecting via Ethernet allows communication with the web server to drive the printer. With Duet 0.6 or 0.8.5 "using duet with wifi router http://blog.think3dprint3d.com/2014/04/using-duet-with-wifi-router.html"  will allow connection with any Wi-Fi enabled device having a browser. Duet WiFi have integrated WiFi connection (and no Ethernet).
448%RRF_connection1.png 
All printing is done after uploading a G-code file on the board SD card, which benefits from the fast Ethernet communication of the Duet (up to 700~900 kb/sec with a good SD card).

==Principle of operation
448%RRF_connection2.png 
This web server, operated by program files located on the SD card in the www directory, is somewhat independent from the firmware stored on the board flash memory. First, the web server shall connect to the firmware, which is automatic while opening the web server, and could be forced with the button "Connect" if communication is lost (which occurs regularly).
The server send commands to the board firmware and get information from answers to a small set of commands (%M408%gcode_cvt!M408.3a_Report_JSON-style_response , %M105%gcode_cvt!M105.3a_Get_Extruder_Temperature , %M20%gcode_cvt!M20.3a_List_SD_card ,%M36%gcode_cvt!M36.3a_Return_file_information) according to a %specific protocol%Status_responses .
The browser window layout adjustment is mainly automatic, based upon the printer configuration as reported by firmware. The web interface layout is adapted to the device form factor and is different on a smartphone than on a desktop PC.

It is now possible to display in the web interface a still image transmitted by an IP camera.
(:clear:)
==How  does it looks
==="Machine control" tab. 
This is the main tab, opened at web control startup
Note that if the calibration button is not available, you will restore it with a "Zoom out" of the window.
648L%DWC_MachineControl.png 

While you could upload files to print in the "G-codes Files" tab, it is often wise for up-to-date files to use the first line button "upload and print". You can also drag and drop a file on this button.
(:clear:)
==="Print Status" tab 
This tab opens automatically while the printing starts.
648L%DWC_Print_Status.png 
There is three time estimates, based upon filament use, file progress and layer progress, with not very accurate values.
(:clear:)
==="G-code Console" tab
To send G-code or check calibration result, you will use the G-code console tab
648L%DWC_G-code_Console.png 
View all user commands and the result of some server sent command (notably calibration)
(:clear:)
==="G-code Files"" tab
To upload or execute , the G-code Files tab:
648L%DWC_G-code_Files.png 
G-code files could be organised in directories.
(:clear:)
==="Settings" tab
To configure the web server or survey component status, there are sub-tabs:
"General", "List items", "Configuration File", "Machine properties" and "Tools"
648L%DWC_Settings.png
Modify configuration or upload system files. 
Survey component and parameters status.
(:clear:)

==Compatibility 
There are many evolutions in DWC, and it does work properly only with recent versions of "own Chrishamm fork https://github.com/chrishamm/RepRapFirmware/tree/dev/Release" or "DC42 fork https://github.com/dc42/RepRapFirmware/tree/dev/Release". It is highly recommended to %upgrade firmware%Duet_Firmware_Update and DWC jointly to the last versions, as they carry many improvement. If you want to test with an old firmware version, you shall use the DWC version associated with this old firmware (probably 1.06 or 1.07). 

==First start 
If %Netbios http://www.techrepublic.com/article/how-netbios-name-resolution-really-works/" or "mDNS https://en.wikipedia.org/wiki/Multicast_DNS" names are recognized on your network  (most network do, but not mobile devices), you can simply connect to the web server using the printer name as defined in the 'config.g' file.  e.g.  http://lily. Name is not case sensitive. Note that in the config.g file the first letter ‘P’ indicates a parameter and is not part of the name. See "M550: Set name%gcode_cvt!M550.3a_Set_Name

Alternatively, you can connect to your printer with its IP address, e.g. %http://192.168.1.14" . In that case, it is more practical to define a static IP address (and IP mask) in config.g file instead of relying on address attributed by "DHCP https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol" server. See "M552: Set IP address%gcode_cvt!M552.3a_Set_IP_address", "M553: Set NetMask %gcode_cvt!M553.3a_Set_Netmask and %M554: set Gateway%gcode_cvt!M554.3a_Set_Gateway .

On mobile devices, the printer name may not be recognised, in this case you shall define a static IP address and load the interface with this address.

476%RRF_connection3.jpg 
Note that you could open multiple sessions of the web server and could operate from multiple computers operating a single printer. 

Loosing a connection to the printer does not have any effect on the print, but you cannot pause a print without having a connection (which could be with another device than the one which started the print). 

Many printers can coexist in the same network, provided you define a specific %MAC address https://en.wikipedia.org/wiki/MAC_address" for each printer (change the last digit for each printer). See "M540: Set MAC Address%gcode_cvt!M540.3a_Set_MAC_address_. They can be operated from a unique browser session.
(:clear:)

==Languages
Default language is English, but other languages are available (in Settings tab): German, French, Spanish, Swedish and Chinese. New translation could be added while modifying the '/www/language.xml' file.

==Configuration
In the "settings" tab, you could modify parameters.
Configuration parameters are stored in the "local storage https://en.wikipedia.org/wiki/Web_storage" of your browser and the cookies shall be activated. If you clean up regularly your browser cookies/cache for safety, this will cancel the configuration. To set permanent modifications independent from your browser, you shall modify the variable "settings" in file "/www/js/model.js". This file replace the former "interface.js" file which was splitted in "model.js" (configuration) and "viewmodel.js" (execution) from DWC version 1.08.
Updating this file on SD card is done like %updating the config.g file%Updating_config

Note that the web server use a password defined in the file %/www/js/model.js", which shall be the same as the one defined in the config.g (default password: RepRap).  A modified password is needed if your network is connected to wifi. See "M551: set password%gcode_cvt!M551.3a_Set_Password

==Using an IP camera
448%RRF_IPcam_view.jpg
It is possible in recent versions to insert an image from an IP camera in the "print status" tab.
You can use any camera accessible from your network, either by wifi or Ethernet, capable to produce still images. 
(:clear:)
416%RRF_IPCam_settings.jpg This is configured in the "settings" tab, sub-tab "General", panel "Webcam integration".
You shall enter the web address of a still image as produced by your camera. Alternatively, for some configurations, you may supply a web address and port, as shown in example.
The Camera used in this example is the RaspBerry Pi equipped with its dedicated camera and configured with Raspberry Cam. It is preferable to use a static IP address.

Yet there is no recording function within the interface and you shall use other programs for that, for example ZoneMinder on Linux or iSpyConnect on Windows

The example use dark theme as can be configured in "settings" "General" panel "Appearance and behaviour" 

=== Recording timelapse. 
It does exist many timelapse software, but only a few could work with IP cameras. The most simple may be to use a Browser extension, as: 
*"FireFox Timelapse https://addons.mozilla.org/fr/firefox/addon/firefox-timelapse/"

(:clear:)

Duet_WiFi_1.0-/=
==Installing Web Interface for wired Duets
Web interface is a web program entirely contained in the /www directory of the SD card.
The source can be found in "Chrishamm GitHub repository https://github.com/chrishamm/DuetWebControl." 
Updating the web interface is done by writing the revised set of files in the /www directory of your SD card. This can be done by direct upload on SD card or more simply via FTP (login: anything, password: defined in www/js/model.js, default password being 'reprap').
Files www/js/viewmodel.js and www/js/model.js contains configuration. You may edit those files according next paragraph if you want some personalisation, while commenting your modification to be able to track them for future releases. It is wise to save the configuration file on your machines.

==Special configuration (wired Duets only)
*The graph scale max temperature is defined in the "www/js/viewmodel.js" file, variable "tempChartOptions" "yaxis" "max" which may be increased if you use temperatures over 250°C
*The minimum manual displacement of the head (for calibration) is defined in file "www/js/model.js" in variable "increaseVal". For finer calibration, you may reduced it to e.g. 0.025, however all other Z displacement will be scaled by multiples of 10 of your minimal value.
*You can change the color of Z sensor trigger field for better noticeability in file "www/js/viewmodel.js" in the variable "probeTriggerColor", which may be set to another more visible color, e.g. "#FF4500"
400%DWC_head_color_ex.png 
*If you have multiple printers, it is quite easy to confuse control panels of each printer, so you can distinguish your printers while giving panel headers a different background color in the file "www/css/default.css", you may add following paragraph at the beginning, choosing whatever color you want:
<<
.panel-heading, .navbar-default {
  background-color:#e6f8e0 !important; /*define header color*/
  background-image:none  !important;       
}
>>

Other example colors:
*<span style="background-color:#e6ffff">_ #e6ffff _</span>
*<span style="background-color:#e6ffe6">_ #e6ffe6 _</span>
*<span style="background-color:#ffffe6">_ #ffffe6 _</span>
*<span style="background-color:#ffe6ff">_ #ffe6ff _</span>
*<span style="background-color:#e6e6ff">_ #e6e6ff _</span>
(:clear:)
=/
==Web Interface design
The "http https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" web server is part of the firmware and send web pages to the browser.

There is no server-side language and all the interface is written in "Javascript https://en.wikipedia.org/wiki/JavaScript" and fully executed in the browser, so the board resources use is minimal.

The web interface is written using the "Framework https://en.wikipedia.org/wiki/Bootstrap_%28front-end_framework%29" based on "Javascript library https://en.wikipedia.org/wiki/JavaScript_library" "JQuery https://en.wikipedia.org/wiki/JQuery." 

To allow web interface getting data from the firmware, specific G-Code were created and a %data exchange protocol%Status_responses was defined using "JSON https://en.wikipedia.org/wiki/JSON" format.

The main G-codes for reporting data to web interface are %M408: Report JSON-style response%gcode_cvt!M408.3a_Report_JSON-style_response, %M36: Return file information%gcode_cvt!M36.3a_Return_file_information, %M20: List SD card%gcode_cvt!M20.3a_List_SD_card and %M105: Get Extruder Temperature%gcode_cvt!M105.3a_Get_Extruder_Temperature.

Web page (reprap.htm) is uploaded with %M560: Upload web page file%gcode_cvt!M560.3a_Upload_web_page_file.

==Author
Christian Hammacher (Chrishamm) write and maintain the present "web server on GitHub https://github.com/chrishamm/DuetWebControl." It also maintain "own fork https://github.com/chrishamm/RepRapFirmware" of the RepRap firmware, as the web server improvement may need new firmware functions or modifications. Chrishamm fork is itself a fork of "DC42 firmware fork https://github.com/dc42/RepRapFirmware/tree/dev/Release" and they have frequent exchanges and are very similar.
Chrishamm also added useful functions on the RepRap firmware, notably recently the capability to do firmware update from the web interface (see %M997:Perform in-application firmware update%gcode_cvt!M997.3a_Perform_in-application_firmware_update).

==References
*Replicape for BBB board using Redeem as firmware have a web server based on Octoprint 
*There is a web server on the Smoothieboard, but with limited capabilities. The low speed of the Smoothie Ethernet link will also limit usability.



■Duet
Duet
(:date 11 Aug 2016 02:05:)allb,Duet_WiFi_1.0+/=
==Duet WiFi
Duet WiFi is a developed 3D printer board, using a 32bit Arm core processor, succeeding to other Duet boards produced since 2014.
It was developed in Conjunction by T3P3 and David Crocker.

It was first issued in June 2016.
Communication is done with WiFi, though there is still an USB connection for maintenance.

===Specifications
* 120MHz 32 bits ARM Cortex M4 processor (ATSAM4E8E) with 128Kb RAM and floating point unit
* WiFi connection, supporting typically 800kbytes/sec file upload speed with a good wireless network connection.
* TMC2660 stepper drivers. Can use up to 256x microstepping, with optional 16x interpolation when using 16x microstepping.
* Variable microstepping.
* The maximum recommended supply voltage is 25V.
* Auto ADC calibration (Analog to digital converters: for thermistors)
* Three controllable fans.
* Fans can be powered from VIN, from 5V, or using external power supplied through the centre pin of the VIN/5V selector block.
* High bed heater circuit current rating. [To be quantified]
* Connector for thermocouple and RTD daughter boards.
* Connector for a second Z motor.
* Connector for PanelOne 20x4 text display (not yet supported in firmware).
* Supply voltage monitoring.
* Large terminal blocks for the extruder heater outputs.
* Diagnostic LED
* Support for up to five additional heaters and stepper drivers on the expansion bus

Dimensions are identical to former boards (123x100mm), but there is no connectors on the sides on 20mm from the front connector row (with SD card and USB). This allow insertion of the board between 20mm extrusions. 

It is using a WiFi module ESP8266-12. The web server is running in the WiFi module (which is equipped with an Arm processor), which free main processor for other tasks. 
In good WiFi environment, the speed is equivalent or higher than the Ethernet speed, with 800~900 kB/sec with a good SD card.

Connectors have been reorganised and end stops connectors are now separated from stepper connectors.

=== TMC2660 Stepper drivers
These driver are more silent than the A4982, have more Configuration options, accept microstepping up to 256 microsteps/step and have a chip resistance nearly 8 time lower than the A4982.
The chip nominal current is 4A, but waiting furthers board tests, the maximum current is yet limited to 2A.
=/

allb,Duet_0.85,Duet_0.6+/=
==Duet 0.8.5
352%Duet_0.8.5_Opensource_32bit_Electronics_for_3dprinters.jpg
The Duet was developed by Andy and Tony from "Think3dPrint3d http://www.think3dprint3d.com" in conjunction with "RepRapPro http://www.reprappro.com" and with much advice from Chris Palmer (Nophead), and is under open source license CERN OHL V1.2

The Duet is a 3D Printer controller board that is compatible with the Arduino Due. This 3D Printer controller combines the 32 bits Arduino Due microcontroller with 4 (v0.6) or 5 (v0.8.5) stepper motor drivers, Ethernet, Hi-Speed SD card slot and more. 

The Duet runs the 32 bit, ARM core "Atmel SAM3X8E http://www.atmel.com/devices/SAM3X8E.aspx" microprocessor, as found on the "Arduino Due https://www.arduino.cc/en/Main/ArduinoBoardDue." This is a step change from preceding controllers using 8 bit microprocessors and leaves loads of overhead to do cool things (like running a web-server or running delta bots much faster). The Duet comes with Ethernet built in allowing it to run as a network printer controller, along with USB and an SD card (fully SD 2.0 compliant). The Duet 0.8.5 version update supports an additional extruder, so it can be used with both dual and single extruder printers (5 axes control). In addition it takes the "Duex4 http://www.think3dprint3d.com/Duex4-Duet-Expansion-Board" expansion board which adds a further 4 stepper channels - for a total of 9 axes controls (3 axis + 5 extruders for example). A more in-depth description of the original design can be found in "this blog post http://blog.think3dprint3d.com/2013/12/Duet-Arduino-Due-compatible-3DPrinter-controller.html." The v0.8.5 update is described "here http://blog.think3dprint3d.com/2015/08/new-duet-electronics-version-085.html." Another expansion "shield" for two drives was distributed by RepRapPro (only for Duet 0.6).

In addition to 3D printer, this board can be used to control a laser cutter "Laser cutter on RepRap forum http://forums.reprap.org/read.php?133,521301"  "Laser cutter on RepRap forum http://forums.reprap.org/read.php?340,516150"  "Laser cutter blog post https://reprappro.com/2015/06/16/reprap-duet-electronics-running-a-laser-cutter-guest-blog"

The "PanelDue https://miscsolutions.wordpress.com/paneldue" is a compatible colour graphics touch screen control panel. 
The Duet can also be controlled over Wi-Fi as described "here http://blog.think3dprint3d.com/2014/04/using-duet-with-wifi-router.html".

"description http://blog.think3dprint3d.com/2013/12/Duet-Arduino-Due-compatible-3DPrinter-controller.html"

See also %Duet design%Duet_design.
=/

allb,Duet_0.85+/=
== Wiring 
736%Duet_0.8.5_Duex4_wiring_0.2.png
See dedicated pages %Duet Wiring%Duet_wiring and %Duet pinout%Duet_pinout.
(:clear:)
=/
== Hardware 
=== General 
All connectors are now Molex KK type, with lock and polarization.

Board is built with four layers, including a complete ground plane, which allow good thermal dissipation and reduce noise and ground loops. 

Biggest thermal dissipation came from the bottom of the board, which shall be taken into account while establishing the cooling flow.

Processor voltage is 3.3V and inputs are not protected, so using sensor with higher voltage need reliable protection. Optocoupler or diode protection may be more reliable than voltage dividers.

allb,Duet_0.85,Duet_0.6+/= 
=== Specifications for Wired Duets
Designer/manufacturer haven't supplied specifications, so data came from component datasheets and user experience and is for information only.
*Ultimate voltage is 35V, maximum acceptable by stepper drivers and capacitors, so the usable voltage shall be lower. Boards were tested at 24V and may be safe for a stable supply up to 30V.
*Stepper driver A4982 are designed for a maximum current of 2A, with a really usable current depending from the board cooling. Board was tested with 0.8A without cooling and 1.5A on all drivers with good cooling. Drivers have a thermal safety. 
*Stepper driver current is adjusted by program, using a %specific G-code%gcode_cvt!M906.3a_Set_motor_currents .
*Microstepping is locked to 1/16. Board throughput is always sufficient to handle it, including on 0.9° steppers.
*On board 5v is supplied by a buck converter with ultimate current of 2A, however the 3.3V is taken from this 5V supply, so the available 5V current (for fans or small wifi router) shall take into account the 3.3V consumption of the board and other 3.3V accessories (sensors and control panel).
*Micro-SD card type SDHC, to be formatted in FAT32, cluster size 32 kB.
*Ethernet sustained transfer speed came from 100 kB/sec to 900 kB/sec depending SD card quality and file size. You may experience faster speed with larger files. RepRap forum thread about "Ethernet speed transfer http://forums.reprap.org/read.php?416,664836"
*Direct connection of mechanical switches to endstop inputs is reliable with shielded or twisted cables.
=/
=== Dimensions 
All Duet variants have four 4mm clearance holes at the corners of the board. You can use M4 screws to attach the board to a panel or an enclosure. The mounting centres are 115mm x 92mm:
allb,Duet_0.85,Duet_0.6+/=
====Wired Duets
Size 123 x 100mm, hole spacing 115 x 92mm  508%D0.85_board_dims.png
Ethernet plug, micro-SD slot and mini USB plug are on one small side. For 0.8.5 version, the reset and erase buttons are also on same side (they were on board face on 0.6 version).
There is no plug for power supply, but a terminal block on the side opposed to plugs. 5V could be from internal converter or external supply, with pins aside the power supply terminal block.

The export from KiCAD shows the board (V 0.8.5) and hole dimensions:
(:clear:)
=/
allb,Duet_0.85,Duet_0.6+/=
====Duet WiFi
640C%DuetWifiDims.png

The board shown is the production version which has 3 additional 2.54mm holes at: [53.1,9.1],[56.7,28.7],[81.5,22.9]
=/
====Mounting recommendations
On Duet 0.6 and 0.8.5 boards, and pre-production Duet WiFi boards, the holes are plated-through and connected to the ground plane. On Duet WiFi production boards, the holes are isolated and not plated through.

Please note:
*If you mount the board on a metal surface, use standoffs to ensure that the back of the board cannot short against the plate. A minimum standoff length of 5mm is advised, however larger is preferred for better cooling.
* **Do not use metal washers under the mounting screws**, or screws with large heads (e.g. button head). Nylon washers are recommended. With a metal washer there is a risk of creating a short between the E1 LED and ground.

===Cooling
The PCB is designed to transfer heat from the stepper drivers and power mosfets to the underside of the board. Therefore your mounting method should encourage good airflow underneath the board. 

If you mount the board vertically, make sure that cool air can enter at the bottom of the board, flow upwards behind the board, and escape at the top. Convection cooling will usually be sufficient, but if you are using high stepper motor currents then you may wish to add a fan below the board to encourage the upward flow of air. Make the spacing between the back of the board and the panel or enclosure large enough to allow a good flow of air.

If you mount the board horizontally then a cooling fan is recommended, especially if there are other heat-generating components in the vicinity such as power supplies, SSRs or stepper motors. Position the fan to blow air underneath the board (optionally along the top as well), especially along the row of stepper driver chips and between the power input and bed heater terminal blocks.

=== Drive numbers 
Drive number for G-Code commands (M569 and others)
0:X; 1:Y; 2:Z; 3:E0; 4:E1; 5:E2; 6:E3; 7:E4; 8:E5

Duet_WiFi_1.0-/=
=== Ethernet 
The Ethernet connection is handled natively by the SAM3X8E processor, allowing much higher speed than boards handling Ethernet connection through serial link to the processor. In practice, the throughput is only limited by the SD card performance. Printing with web interface being done from the SD card, this improve usability for large files. 
=/
==Open hardware license
The Duet hardware design is licensed under the "CERN OHW License 1.2  http://www.ohwr.org/documents/294" :the design is free to be distributed and modified within the terms of this license. All the design files are available on "Github https://github.com/T3P3/Duet" . The Duet was completely designed using the Open Source software package "KiCAD  http://www.kicad-pcb.org/display/KICAD/KiCad+EDA+Software+Suite" so hacking and building on this design is accessible to all.

Pins/output references correspond to the references used for Arduino Due, see %schematic%%Due-pinout-WEB.png

==Software
The Duet runs %RepRap Firmware%RepRap_Firmware, initiated by Adrian Bowyer, which was initially designed for it. The software can receive G-Code from the USB serial port, the SD card and Ethernet interface or WiFi for the Duet WiFi. Duet WiFi don't have Ethernet connection.

Its philosophy is everything is done with G-code, including all configuration and it use %an extended set of G-codes%G-codes .

%Configuration file%Updating_config  is read on SD card at start-up. Interactive configuration with immediate feedback is possible.

A pre-compiled version of the firmware is supplied with each new release. Average user never have to compile the program and does not need any development tool. 

SD image shall be copied on SD-card and %macros%Macros may be adapted for a given configuration. 

Duet_WiFi_1.0-/=
When Duet board is connected via Ethernet, any Ethernet or WiFi device having access to your network can operate the printer with a %web interface%Duet_Web_Control .

Recent firmware %can be updated%Duet_Firmware_Update  with simple file uploading over the network.
=/

The software is evolving constantly. The dc42 and ChrisHamm forks includes Delta and CoreXY printer support.

See %RepRap Firmware FAQ%FAQ

allb,Duet_0.6+/=
==Older versions
576%Think3DPrint3D_DUET_Arduino_DUE_Compatible_3DPrinter_Controller.jpg
===Duet v0.6
The Duet version 0.6 was the first issue of Duet board (in december 2013) and is still available. It combines the Arduino Due microcontroller with 4 stepper motor controllers to control a single extruder printer. Together with the "Duex4 http://www.think3dprint3d.com/Duex4-Duet-Expansion-Board" expansion board it allows for a total of 5 extruders or up to 8 axis drives. The dimensions are the same as version 0.8.5, however connector position is slightly different. 
(:clear:)
===Wiring
736%Duet_Duex4_wiring.png
See dedicated pages %Duet Wiring%Duet_wiring and %Duet pinout%Duet_pinout.

Minor changes have been made to the Duex4 resulting in version 0.2a, as detailed in "this blog post: http://blog.think3dprint3d.com/2015/04/duex4-v02a-minor-updates.html" 
(:clear:)
=== Issues of v0.6 boards 
The following are not intended to put you off using a Duet, indeed some other electronics boards have much worse issues.

====USB connector soldering
:The Mini USB A/B connector has 4 metal lugs that need to be soldered to secure the connector to the board. Manufacturers of Duet boards sometimes don't get this right, probably because through-hole components are typically wave-soldered from the underside, but the USB connector lugs really need to be soldered from the top. Therefore, when you receive a Duet, check that the USB connector lugs are securely soldered from the top.

====On-board 5V regulator
:This produces excessive EMI to meet CE regulations in a complete printer without shielding. If the EMI produced by the switching regulator is unacceptable, leave it disabled (by leaving JP9 open) and provide 5V power via the external 5V connector instead. In practice, the EMI is unlikely to cause problems, e.g. it can only be heard on an FM radio if the radio is tuned to a very weak station and placed very close to an unshielded Duet.

====SD card
:The board and firmware are a little fussy in respect of the SD card specifications. A Class 10 card with a capacity of around 4Gb is recommended, although good Class 4 cards will generally work too, though with reduced transfer speed.

====Extruder connectors
:On boards that use header strips for the I/O connections, this is a 6-pin header strip that uses 4 pins (two paralleled pairs) to provide power to the hot end heater, and 2 pins to connect the thermistor. If you plug the 4-pin heater connector into the wrong end of the 6-pin strip, you will feed 12V into the thermistor input, and destroy the microcontroller. More recent boards use 4- and 2-pin Molex connectors instead to eliminate the risk of mis-connection.

====ATX PS_ON output
:If the PS_ON output is used to turn off an ATX power supply, and this results in all power being removed from the Duet, then as the Duet powers down it produces a glitch on PS_ON. This may result in the ATX PSU turning on again. One fix is to power the Duet's 5V rail from the +5VSB output of the ATX PSU so that the board does not power down. Another is to add a 3.3K pulldown resistor between the gate and source terminals of TR7.
=/

====Shorting +3.3V rail
:If you short the 3.3V rail to ground (for example, by connecting 2-pin endstop switches to the wrong pins on the 3-pin connectors), or by wiring an intelligent Z probe with the +3.3V and ground wires reversed), then the Duet will typically be unharmed; but all heater outputs will turn on while the short persists.

==Where to get it
* "Think3DPrint3D (UK) http://www.think3dprint3d.com/Electronics/Duet" Duet 0.8.5, Duex4 and PanelDue with screen 4.3", cable looms.
* "Filastruder (USA) http://www.filastruder.com/collections/electronics/products/duet-controller-v0-8-5" Duet 0.8.5, Duex4 and PanelDue with screen 4.3"
* "builda3dprinter.eu (The Netherlands) http://builda3dprinter.eu/product/duet-v0-8-5-32-bit" Duet 0.8.5 and PanelDue with screen 4.3"
* "emaker.io (UK) https://emaker.io/product/duet-pcb/" Duet 0.6 and "2 drives shield https://emaker.io/product/duet-shield-pcb" only for Duet 0.6
* "Replikeo Duet (China) http://www.replikeo.com/electronics/18-duet-board.html" Duet 0.6 clone
* "Escher 3D (UK) http://escher3d.com/pages/order/orderindex.php" PanelDue without screen
* "RepRap Ltd https://reprapltd.com" Duet shield (2 drives - for Duet 0.6 only)
* "kurzschluss http://www.kurzschluss-blog.de/p/duet-extension-board-build-manual.html" Small extension board for Pololu drivers

== Gallery 
440%Kraken_scene.jpg
Here is a picture of a 4 colour print from the Duet and Duex4 expansion board combo...

576%Think3DPrint3D_DUET_and_Expansion_board_5_Extruders.jpg 
 ... and a picture of the set-up.
(:clear:)

== Resources 
=== Support 
* General support: RepRap forum: "Duet  http://forums.reprap.org/list.php?416" or the "Ormerod forum http://forums.reprap.org/list.php?340" (most of the thousands of Duet boards in the field are in Ormerods)

=== Hardware 
* "Duet 0.8.5 schematic - Github https://github.com/T3P3/Duet/blob/master/Duet0.8.5/Duet0.8.5_Schematic.pdf"
* "Duet 0.6 schematic  - Github https://github.com/reprappro/Duet/blob/master/Duet/Duet_06_Schematic.pdf"
* Duet / Duex4 expansion header pin mapping and usage %Duet pinout%Duet_pinout
* "Wiring and commissioning a Duet on a delta miscsolutions.wordpress.com https://miscsolutions.wordpress.com/2015/01/04/upgrading-the-mini-kossel-to-duet-electronics-part-1-hardware"
* "PanelDue to Duet wiring - miscsolutions.wordpress.com https://miscsolutions.wordpress.com/paneldue"

=== Firmware 
*%RepRapFirmware%RepRap_Firmware
*%RepRap Firmware FAQ%FAQ
*%RepRap Firmware G-Codes%G-codes 
*%RepRapFirmware Configuration and commissioning%RepRap_Firmware!Configuration_.26_commissioning 

(:clear:)
== References 


== Further reading 
* "Official Think3DPrint3D documentation https://docs.google.com/document/d/1DAr1vqM0WEwobSHbTGT9Oy9M4HotH0ahYKY_W5eO0Ok/pub"
* "RepRap forum: Duet http://forums.reprap.org/list.php?416"
* "Comparison of Electronics http://reprap.org/wiki/Comparison_of_Electronics"
* "list of electronics http://reprap.org/wiki/list_of_electronics"
* "Impressions:Duet vs Smoothie http://forum.seemecnc.com/viewtopic.php?f=111&t=9205" A thorough comparison between these boards - on SeemeCNC forum

(:clear:)
<small>Page, drawings and photos author: T3P3</small>	
(:trail Duet hardware:)
		
■Fans
Fans
(:date 11 Aug 2016 02:05:)== Controlled fans
=== Controlled output
M106 G-code control the controllable fan outputs (Fan0 on Duet 0.6,  Fan0 and Fan1 on Duet 0.8.5 and RADDS). These output shall not be confused with the fixed voltage fans output. As for other controllable equipment, a MOSFET connect the ‘-’ pin to the ground.

It shall be noted that these output can be used for something else than a fan, while the current capacity of the fan output is lower than those dedicated to heaters. See specification paragraph. 
By example, it can be used to control a SSR for starting a spindle on a CNC.

=== Control mode
Power, so speed can be imposed and is adjusted with PWM (parameter S). The PWM frequency can be modified (parameter F).

A fan can be started automatically (at a fixed value) when an equipment exceed a given temperature (e.g. hotend or chamber) . This mode is called ‘Thermostatic’ (parameter ‘T). In this mode, you shall define an associated heater (or in fact its thermistor input) (parameter ‘H’). Multiples heaters can be monitored in thermostatic mode, starting the fan as soon as one of the heater exceed the set temperature. Speed control for thermostatic mode is not yet available (V1.13) but is planned.

It shall be noted that fans does not always behave well while controlled with PWM, especially at low setpoint. Adjusting the frequency may help. 

Examples 
<<
M106  S0.33   ; set PWM of Fan0 (default) at 33%
M106 P1 S150  ; set PWM of Fan1 at 59% (150/255)
>>
<<
M106 P1 T65 H1;  Thermostatic Fan will start while Heater 1 reach 65°C (by example that can be used for chamber temperature cooling) T and H parameters shall always be combined?
>>
<<
M106 F800; modify PWM frequency of Fan0 (default) to 800 Hz
>>
<<
M106 P1;  report status of Fan1 output
>>

=== Default values
Default PWM frequency is 500 Hz.
If present, the Fan1 is set by default in thermostatic mode with a temperature setpoint of 45°C and monitored heaters from 1 to 6.

The signal can be inverted, which may be used to control a 4 wires fan.

=== Fan wiring
*Fans with two wires have + and – wires, the ‘-’ wire (black) shall be connected the the board connector ‘-’ 
*Fans with three wires add a tachometer wire giving speed pulses (often 2 per rotation). The tachometer wire is yellow and is generally on one side of the connector with ‘+’ being in the center of the connector. There is no harm if the tachometer wire is not connected.
*Fan with 4 wires add a pin for separated PWM control. Wrong wiring may burn such fan, so you shall check manufacturer specification about wire color coding. Note that it can be different from other fan type, as by example the ‘+’ wire can be yellow or red depending manufacturers. See "CPU 4 Pin Fan http://www.allpinouts.org/index.php/Motherboard_%28CPU%29_4_Pin_Fan" The PWM signal on control pin shall be at 25 kHz (25 000 Hz) with a maximum voltage of 5V, so need a protection diode. They are not recommended for this board due to the complex wiring.

=== Supply voltage
The voltage available on the connectors is VIN (Board main supply voltage).
However, as the control is done by ‘sinking’ current to ground, any voltage can be used for the controlled equipment. However, there is a control LED which is supplied by Vin, which light while current is sinked to ground. This means that if your voltage supply is lower than VIN, the VIN voltage may be returned to your supply line through the LED output. (see "thread http://forums.reprap.org/read.php?13,571822") So, for safety, it is wise to install a diode to protect your power supply. See the schematic for Duet 0.8.54 and Duet 0.6.
However, the forward voltage of this safety diode reduce the voltage available for the fan, hence its power, so a low forward voltage diode shall be used, by example a SB340. If you have no low forward voltage diode (Shottky) available, you may check that an ordinary high current diode may have a low forward voltage for the low current used for a fan. By example a BYW29 gives 0.35V forward voltage.

=== Specifications:
Duet 0.8.5 MOSFET (PMV40UN2) maximum current is 4.4A, however, as it is not driven in optimal conditions (directly driven in 3.3V), you shall check the heating of the mosfet if current is high (~> 3A)

Duet 0.6 have a gate driver and its maximum MOSFET (IPD036N04L) current is 90A - identical to the bed MOSFET -, so the limit is trace/connector current capacity (which is not the same for all boards). Molex KK 254 series have a maximum current of 4A.

== Fixed voltage fans
If your power supply is in 24V, it is possible to wire two 12V fans in serie, provided the two fans are absolutely identical. However this is not a very good solution, as if one fan stall for any reason, the other will experience over-voltage. 
DC/DC adjustable converters with voltage display are available for less than 3 Euros and can be used for fans with lower voltage than Vin. They can be adjusted to reduce the speed of fans for noise control. 

■Duet_pinout
Duet pinout with functions
(:date 11 Aug 2016 02:05:)This page documents the 50 pin expansion header found on the %Duet%Duet board and used to interface with a "Duex4 expansion board http://www.think3dprint3d.com/Duex4-Duet-Expansion-Board."  There are multiple versions on the Duex4 board, V0.1, 
V0.2 and V0.2a, along with multiple versions of Duet electronics

The table columns are

* Pin -- the expansion header pin number,
* Duet Label -- the label for the pin shown on the underside of the Duet board for connecting to the Duex4.
* Due Pin -- the Arduino Due pin name; in some cases the pin does not have an Arduino Due name and an extended "X" name is shown instead for use with the SamNonDue library, and
* RepRapFirmware Usage -- the usage put to the pin by the dc42 branch of the RepRap Firmware

The dir[], enable[], and step[] values in the usage descriptions refer to the stepper driver direction, enable, and step pin assignment arrays.  Similarly, the heat[] and therm[] values correspond to the heater power and thermistor sensor pin assignment and ADC channel arrays.

allb,Duet_WiFi+/=
== Duet WiFi
TBD
=/
allb,Duet_0.85+/=
==Duet 0.8.5 and Duex4 2a
The table below is specific to the Duet 0.8.5. 

Note that heat[6] position (pin X17) in the default version of RepRap firmware is unassigned and instead used by Fan1 on the Duex 0.8.5 due to limitation on the total number of PWM pins.

/:
 ::*Duet 0.8.5 ::*Due :: :: :: ::*Duet 0.8.5 ::*Due ::
=Pin::=Label ::=Pin ::=RepRapFirmware Usage ::= ::=Pin ::=Label ::=Pin ::=RepRapFirmware Usage ::
 2::GND :: :: :: :: 1::+5V ::
 4::RST :: :: :: :: 3::+3.3V ::
 6::TWCK0 ::D71 ::Digipot :: :: 5::TWD0 ::D70 ::Digipot ::
 8::UTXD ::D1 ::Serial1 TX / PanelDue :: :: 7::URXD ::D0 ::Serial1 RX / PanelDue ::
 10::PA14 ::D23 ::FAN RPM :: :: 9::PD9 ::D30/X9 ::endstop[8] / E5_STOP ::
 12::RXD1 ::D17 ::MAX31855-3 CS (No Roland support) :: :: 11::TXD1 ::D16 ::MAX31855-2 CS (No Roland support) ::
 14::RXD0 ::D19 :: :: :: 13::TXD0 ::D18 ::
 16::PC30 ::D72/X11 ::dir[8] / E5_DIR :: :: 15::PC29 ::X10 ::step[8] / E5_STEP ::
 18::PC4  ::X17 ::FAN1 / E5_PWM :: :: 17::PC28 ::X13 ::enable[8] / E5_EN ::
 20::PB14 ::D53 ::dir[5] / E2_DIR :: :: 19::PC7 ::D39 ::step[5] / E2_STEP ::
 22::PC22 ::D8 ::heat[4] / E3_PWM :: :: 21::PC23 ::D7 ::heat[3] / E2_PWM ::
 24::PC20 ::X8 ::enable[5] / E2_EN :: :: 23::PC21 ::D9 ::heat[5] / E4_PWM ::
 26::NPCS1 ::D87 ::MAX31855-1 CS :: :: 25::PB24 ::X16 ::
 28::SPCK0 :: ::SPI channel 0 (e.g. MAX31855 SCK) ::  :: 27::NPCS0 ::D77 ::MAX31855-0 CS ::
 30::MISO0 :: ::SPI channel 0 (e.g. MAX31855 SO) ::  :: 29::MOSI0 :: ::SPI channel 0 ::
 32::PB16 ::D67 :: :: :: 31::PB23 ::X15 ::
 34::AD0 ::D61/A7 ::therm[3] / E2_THERM :: :: 33::AD13 ::D65/A11 ::therm[6] / E5_THERM ::
 36::TWCK1 ::D21 :: :: :: 35::TWD1 ::D20 ::
 38::AD11 ::D63/A9 ::therm[5] / E4_THERM :: :: 37::AD10 ::D62/A8 ::therm[4] / E3_THERM ::
 40::PB22 ::X14 :: :: :: 39::VSSA ::
 42::PC11 ::X4 ::step[6] / E3_STEP :: :: 41::AD14 ::D52 ::Z_PROBE_MOD_PIN ::
 44::PC13 ::D50 ::enable[6] / E3_EN :: :: 43::PC12 ::D51 ::dir[6] / E3_DIR ::
 46::PC15 ::D48 ::dir[7] / E4_DIR :: :: 45::PC14 ::D49 ::step[7] / E4_STEP ::
 48::PC17 ::D46 ::endstop[5] / E2_STOP :: :: 47::PC16 ::D47 ::enable[7] / E4_EN ::
 50::PC19 ::D44 ::endstop[7] / E4_STOP :: :: 49::PC18 ::D45 ::endstop[6] / E3_STOP ::
:/

Note that Duex4 board makes the following associations when paired with the Duet 0.8.5
* E2 -- dir,enable,step[5] heat[3] therm[3]
* E3 -- dir,enable,step[6] heat[4] therm[4]
* E4 -- dir,enable,step[7] heat[5] therm[5]
* E5 -- dir,enable,step[8] heat[6] therm[6]

BUT heat[6] is presently not assigned in the main dc42 branch of the RepRap Firmware.  The pin X17 is instead used for Fan1.
=/
allb,Duet_0.6+/=
== Duet 0.6 and Duex4 
/:
 ::*Duet 0.6 ::*Due :: :: :: ::*Duet 0.6 ::*Due :: 
=Pin::=Label ::=Pin ::=RepRapFirmware Usage ::= ::=Pin ::=Label ::=Pin ::=RepRapFirmware Usage ::
 2::GND :: :: :: ::  1::+5V ::
 4::RST :: :: :: ::  3::+3.3V ::
 6::TWCK0 ::D71 ::Digipot :: ::  5::TWD0 ::D70 ::Digipot ::
 8::UTXD ::D1 ::Serial1 TX / PanelDue :: :: 7::URXD ::D0 ::Serial1 RX / PanelDue ::
 10::PA14 ::D23 ::FAN RPM :: :: 9::PA15 ::D24 ::endstop[4] / E1_STOP ::
 12::RXD1 ::D17 ::MAX31855-3 CS (No Roland support) :: :: 11::TXD1 ::D16 ::MAX31855-2 CS (No Roland support) ::
 14::RXD0 ::D19 :: :: :: 13::TXD0 ::D18 ::
 16::PC3 ::D35 ::dir[4] / E1_DIR :: :: 15::PC9 ::D41 ::step[4] / E1_STEP ::
 18::PC6 ::X7 ::heat[2] / E1_PWM :: :: 17::PC5 ::D37 ::enable[4] / E1_EN ::
 20::PB14 ::D53 ::dir[5] / E2_DIR :: :: 19::PC7 ::D39 ::step[5] / E2_STEP ::
 22::PC22 ::D8 ::heat[4] / E3_PWM :: :: 21::PC23 ::D7 ::heat[3] / E2_PWM ::
 24::PC20 ::X8 ::enable[5] / E2_EN :: ::  23::PC21 ::D9 ::heat[5] / E4_PWM ::
 26::NPCS1 ::D87 ::MAX31855-1 CS :: ::  25::PC4 ::D36 ::
 28::SPCK0 :: ::SPI channel 0 (e.g. MAX31855 SCK) :: ::  27::NPCS0 ::D77 ::MAX31855-0 CS ::
 30::MISO0 :: ::SPI channel 0 (e.g. MAX31855 SO) :: ::  29::MOSI0 :: ::SPI channel 0 :: 
 32::PB16 ::D67 :: :: ::  31::PB15 ::D66 ::
 34::AD0 ::D61/A7 ::therm[3] / E2_THERM :: ::  33::AD7 ::A0 ::therm[2] / E1_THERM ::
 36::TWCK1 ::D21 :: :: :: 35::TWD1 ::D20 :: 
 38::AD11 ::D63/A9 ::therm[5] / E4_THERM :: ::  37::AD10 ::D62/A8 ::therm[4] / E3_THERM ::
 40::AD13 ::A11/D65 :: :: ::  39::AD12 ::A10/D64 :: 
 42::PC11 ::X4 ::step[6] / E3_STEP :: ::  41::AD14 ::D52 ::Z_PROBE_MOD_PIN ::
 44::PC13 ::D50 ::enable[6] / E3_EN :: ::  43::PC12 ::D51 ::dir[6] / E3_DIR ::
 46::PC15 ::D48 ::dir[7] / E4_DIR :: ::  45::PC14 ::D49 ::step[7] / E4_STEP ::
 48::PC17 ::D46 ::endstop[5] / E2_STOP :: ::  47::PC16 ::D47 ::enable[7] / E4_EN ::
 50::PC19 ::D44 ::endstop[7] / E4_STOP :: ::  49::PC18 ::D45 ::endstop[6] / E3_STOP ::
:/

Note that the Duex4 board makes the following associations when paired with the Duet 0.6
* E1 -- dir,enable,step[4] heat[4] therm[4]
* E2 -- dir,enable,step[5] heat[3] therm[3]
* E3 -- dir,enable,step[6] heat[4] therm[4]
* E4 -- dir,enable,step[7] heat[5] therm[5]
(:trail Duet hardware:)	
=/

■End_stops
Connecting endstop switches
(:date 11 Aug 2016 02:05:)
The Duet provides one endstop switch input for each axis, and one for each extruder. Each has an associated red LED that is illuminated when the input level is LOW.

Each axis endstop input can be configured for a Max (high end of axis) or Min (low end of axis) endstop, and with an active high or active low signal level. Configuration of endstop switches is done in config.g using the M574 command.

The endstop connectors each have 3 pins: GND, 3V3 and STP. When driving the STP (input) pin LOW, your endstop switch needs to be able to sink 1.5mA current for the Duet WiFi and 2.1mA for the Duet. If LED lighting is dim while operating the end-stop, the sinking current is probably not sufficient.

You can check the state of the endstop inputs read by the Duet using the following methods:

* In Duet Web Control, go to the Settings page and then the machine properties tab. There is a column showing the endstop states.
* Send M119 from a USB host program, or from PanelDue, or from the web interface.


You do not need to have a Z endstop switch if you use a Z probe for Z homing.

Different types of endstop switch are connected as follows.
==Microswitch
This applies to a bare microswitch, not to a microswitch on a board with a LED. Connect the switch between GND and STP (the outer 2 pins of the 3-pin connector). Note: this is not the same as on RAMPS.

We recommend you use the normally-closed contacts of the microswitches, which are generally the outside two connections on the microswitch, and set the signal polarity to active high (S1) in the M574 command. If for any reason you use normally-open microswitch contacts, you will need to set the signal polarity to active low (S0) in the M574 command.

==Makerbot Mechanical Endstop v1.2
Thus is a small board holding a microswitch, LED and a few other components. Connect pin 1 of the endstop board to the 3V3 pin on the Duet endstop connector, pin 2 or 3 to Duet endstop connector GND, and pin 4 to Duet endstop connector STP.

==3.3V-compatible Hall sensor
Connect Gnd to Gnd, Vcc of the Hall sensor to 3V3, and the output of the Hall sensor to STP. Simple Hall sensors normally have active low outputs, so use S0 in the M574 command. If your Hall sensor is a circuit board with a sensitivity adjustment potentiometer on it, then it may provide an active high output instead of active low. If your hall switch is just the IC then you should also connect a 0.1uF capacitor between Vcc and Gnd close to the IC.

==5V Hall sensor with open-collector or open-drain output
Examples: Allegro A3141, A3142, A3143, A3144 (all of these are discontinued products, but still found on eBay)

Preferably, use 3.3V-compatible hall sensors instead. However, If your 5V Hall sensor definitely has an open-collector or open-drain output, you can wire it as for a 3.3V sensor except that Vcc must be connected to +5V (available at pin 1 of the expansion connector) instead of to the 3v3 endstop connector pin.
3.3V-compatible optical endstop

Connect Gnd to Gnd, Vcc of the opto sensor to 3V3, and the output of the opto sensor to STP. Opto sensors usually have active high outputs, so use S1 in the M574 command.

Note: opto endstops made to the Generation 7 design are often claimed to be 3.3V-compatible, but in fact the design is marginal with a 5V supply and frequently doesn't work at all on 3.3V. To use this design with a 3.3V supply, replace the 180 ohm resistor by 100 ohms, and either replace the 1K resistor by 10K or remove it completely. 

==Use caution
Beware that end-stops connector pin order is different from some other boards. Wrong wiring will **short** your board power supply, which shall be avoided.
Signal shall **never** exceed 3.3V. Safety shall be provided in case of ground wiring fault. A solution is to add a safety diode. For sensors needing more than 3.3V to operate, using an optocoupler shall be the safest solution. 

(:clear:)

■Duet_wiring
Duet wiring
(:date 11 Aug 2016 02:05:)allb,Duet_WiFi_1.0+/= 
==Duet WiFi
===Main Wiring
720C%DWiFi_connection.png
=/

allb,Duet_0.85+/= 
== Duet 0.8.5 
=== Main wiring 
720C%Duet_0.8.5_wiring.png
All positive fan pins are connected to Vin.

The pinouts are on the back of the board (V 0.8.5), a KiCAD export shows the back below for reference (this is the view from the bottom of the board, so is mirrored):
(:clear:)
520C%D0.85_back_silk.png

There is more detail on the pinouts on the %Duet pinout%Duet_pinout page.

=== 5V controlled fan 
440C%Duet_0.8.5_wiring3.png
=== Filament detection and buzzer
720C%D0.85_wir_filament.png
This schematic is also valid for Duet 0.6.
 
See %RepRap Firmware macros Activate output/buzzer%Macros!Activate_output.2Fbuzzer
(:clear:)
=/
allb,Duet_0.6+/= 
== Duet 0.6 
Beware of the Bed, heater and fan connector polarity, which is different from the 0.8.5 board
=== Main wiring 
720C%Duet_0.6_wiring.png

The back silkscreen on the Duet 0.6 contains further information on the pinouts, it is reproduced below
520C%D0.6_back_Silk.png

=== 5V controlled fan 
700C%Duet_0.6_wiring3.png
(:clear:)
=/
==Connectors
The connectors for the stepper motor, endstop switch, thermistors and fans on the Duet WiFi are Molex KK type. The Dupont-style connectors typically used with RAMPS and other electronics will also fit them. However, for maximum reliability we recommend using the correct Molex female connectors or compatible connectors, because they lock in place.

Here are the Molex part numbers for the mating female connectors. These are widely available from the usual electronic component distributors, and on eBay.
* 2-way shell (thermistors and fans): 22-01-2025
* 3-way shell (endstops): 22-01-2035
* 4-way shell(stepper motors, PanelDue and Z-probe): 22-01-2045
* Crimp pins for all of the above: 08-50-0032

== Connecting steppers
The pinout of each stepper motor connector is the same as for other popular 3D printer electronics, with pins 1 and 2 on one coil, and pin 3 and 4 on the other coil.

Warning! Steppers 6 pins plugs are not standardized and you shall check (with a multimeter) that for the board connector, each coil wire pair are on each side of the connector. 
allb,Duet_WiFi_1.0+/=
On Duet WiFi, if you have only one Z stepper motor, plug it in to the ZA connector, and plug two jumpers into the ZB connector. Duet WiFi boards are normally supplied with these jumpers already fitted. 
=/

=== Multiple steppers wiring 
allb,Duet_WiFi_1.0+/=
On Duet WiFi, if you have two steppers, plug them in ZA and ZB connectors.
These connectors are wired in series, which is better than wiring them in parallel for most types of stepper motor used in 3D printers.
=/
allb,Duet_0.85,Duet_0.6+/=
480L%Steppers_in_series.jpg 
On Duet 0.6 and 0.8.5, to connect two steppers on the board, you shall make a cable to install them with serial connection.
=/
Identical steppers shall turn in same direction. To have them running in opposite direction, swap the wires of one coil (swap wires on pin 1 and 2 OR on pins 3 and 4). 

To avoid confusion, it is better to use identically wired cables, with same colors.

==PWM MOSFET control 
All power element which are controlled are connected to "PWM https://en.wikipedia.org/wiki/Pulse-width_modulation" controlled "MOSFETs https://en.wikipedia.org/wiki/MOSFET" which drain current to the ground ('sinking' connections). These sinking lines are indicated by an arrow. PWM frequency varies depending the application and is user adjustable for controlled fans. 
MosFET may fail and stay permanently conductive, in this case the connected element will go full power with the only possibility to stop being to shutdown the power supply, which is only possible if the Power Supply could be stopped via the PS-on signal. See "Safety page http://reprap.org/wiki/Safety" .

== See also 
*"Thread about Duet 0.8.5 wiring on RepRap forum http://forums.reprap.org/read.php?340,610884"
*"PanelDue connection on designer site https://miscsolutions.wordpress.com/paneldue/"
*"Duet 0.8.5 NPN or PNP Prox Sensor? on RepRap forum http://forums.reprap.org/read.php?13,585345"
*"3V tips and tricks on Microchip site http://ww1.microchip.com/downloads/en/DeviceDoc/chapter%208.pdf"
(:trail Duet hardware:)	


■Connecting thermistors
Connecting thermistors
(:date 11 Aug 2016 02:05:)==Connecting
Connect the bed temperature thermistor to the BED_TEMP connector. Connect your first extruder thermistor to the E0_TEMP connector. If you have a second hot end, connect its thermistor to E1_TEMP.

The thermistor types are configured using the M305 commands in config.g. The heaters and thermistor channels are numbered 0 for the bed thermistor connector, then 1, 2, 3... for the extruder thermistors.

To set the bed thermistor parameters, use a command like this:

 M305 P0 R4700 T100000 B3950   ; set bed thermistor parameters

The P parameter identifies the heater/thermistor channel that the command applies to. T100000 means that the resistance at 25C is 100Kohms.

Parameter B3950 in the above example means that the thermistor B value over the temperature range of interest is 3950.

The R parameter is the value of the series resistor on the controller electronics, which is always 4700 ohms on Duet WiFi and Duet 0.8.5 controllers - but see the note further down this page. It defaults to 4700 in the Duet WiFi firmware, and 1000 in RepRapFirmware for the Duet 0.8.5 and 0.6.

For the E0 thermistor, the command is similar except that P0 is replace by P1, for example:

 M305 P1 R4700 T100000 B4388   ; set E0 thermistor parameters

For the E1 thermistor, replace P1 by P2.

Manufacturers of thermistors typically quote the B value  over quite a small temperature range. This is fine for the bed thermistor, but the effective B value over the temperature range of the extruder may be somewhat different. Here are some suitable T and B values for popular thermistors:
/:
=Thermistor type ::=Used by ::=T parameter (resistance @ 25C) ::=B parameter ::
=Semitec GT-104 ::E3D hot ends ::100000 ::4388 ::
=Epcos B57863S0103F040 ::RepRapPro Ormerod heated bed ::10000 ::3988 ::
=Honeywell 135-104QAD-J01 ::RepRapPro Ormerod/Huxley/Mendel hot end ::100000 ::4138 ::
=Typical Chinese bed heater thermistor ::Various bed heaters ::100000 ::3950 ::
:/

==Configuring the firmware
Thermistor configuration is defined using the M305 commands in config.g. See %Configuring RepRapFirmware for a Cartesian printer%Cartesian_config!Heater_and_thermistor_section  for more details.

===Note for users of Duet 0.6 boards and DueX4 boards
Early Duet 0.6 boards, and most or all Duet 0.6 boards sold by Replikeo, use 1K series resistors instead of 4.7K., Likewise, DueX4 0.2 boards and earlier DueX4 0.2a boards use 1K resistors. For these boards, use R1000 in the corresponding M305 commands instead of R4700.

===Correcting the temperature calibration of Duet 0.6 and 0.85. boards
The ADC on the Duet 0.6 and 0.8.5 is  not calibrated automatically, so you may need to calibrate it in order to get accurate readings, especially at low temperatures.Here's how:

*With the machine cold, see what temperatures the are displayed for the bed and hot end(s), and compare that with room temperature.
*Add H parameters in the M305 commands to get readings close to room temperature. If the readings are too low, use a positive H parameter to bring the readings up to the correct value. If the readings are too high, use a negative H parameter. All heater numbers should need the same value of H parameter - any residual differences you see are probably caused by thermistor tolerances. You should never need to use an H parameter below -100 or above 100, and it is rare to need a value outside the range -30 to 30.
* **Very important!** Check that if you disconnect the thermistors, the temperature in the web interface reads as **error**. If instead it reads a very low temperature, reduce the H parameters until it does report **error**, then reduce them a bit more.

<small>Author: DC42 </small>
■Connecting thermocouples
Connecting thermocouples
(:date 11 Aug 2016 02:05:)This page describes the support for thermocouple temperature sensors in RepRapFirmware on Duet and Duet WiFi electronics.

==Hardware
K-type thermocouples are normally chosen . The thermocouple must be electrically isolated from the hot end heater block. If the thermocouple has a bare junction, you will need to insulate it, for example with high-temperature sleeving. You can buy cartridge-style insulated thermocouples from E3D and elsewhere.

The thermocouple leads should be long enough to reach your printer electronics, so that the cold junction will be at the thermocouple interface board.

To connect a thermocouple to the Duet, you will need a thermocouple interface board based on the MAX31855 chip.
allb,Duet_WIFI_1.0+/=
==Duet WiFi
220%DWiFi_TC_board.jpg 
The Duet WiFi supports up to two MAX31855-based daughter boards for supporting thermocouples. Each daughter board supports two K-type thermocouples. These daughter boards can be purchased from Think3DPrint3D and from Duet WiFi distributors.

Connect the thermocouple leads to one of the two terminal blocks on the daughter board. If your thermocouple has standard white and green wires, the white wire goes into the left hand terminal, looking from the wire into the terminal block. The terminal blocks labelled 1 and 2 on the lower daughter board will be temperature measurement channels 100 and 101 respectively. If you stack two daughter boards, the terminal blocks on the upper board will be channels 102 and 103.
=/
allb,Duet_0.6,Duet_0.85+/=
==Duet 0.6 and Duet 0.8.5
Purchase a third-party MAX31855 board. The Duet uses 3.3V signalling, so get one without 5V level shifters. These boards are readily available on eBay. You will need one MAX31855 for each thermocouple you want to connect. You can also buy boards with two or four MAX31855 chips, providing two or four channels.

Make sure that the board has a capacitor connected across the thermocouple terminals. This is normally a ceramic chip capacitor located between the MAX31855 chip and the terminal block for the thermocouple. If your board has only the MAX31855 chip and one capacitor on board, that capacitor is the supply decoupling capacitor and you will need to add the other one. A 10nF or greater ceramic disc capacitor is suitable. It can be soldered on the underside of the pins of the terminal block used to connect the thermocouple.

The MAX31855 chip is available in variants for different types of thermocouple. The most common variant is the MAX31855K which is for use with K-type thermocouples.

Connect the thermocouple leads to the terminal block on the MAX31855 board. Connect the MAX31855 board(s) to the Duet 0.6 or 0.8.5 as follows:
/:
=MAX31855 signal name ::=Duet signal name ::=DuetExpansion connector pin ::=DueX4 expansion connector pin ::
Vcc ::+3.3V ::3 ::25
Gnd ::GND ::2 ::21
SO ::MISO0 ::30 ::26
CS (see below) ::NPCS0,NPCS1,TXD1,RXD1 ::27,26,11,12 ::20,11,6,7
SCK ::SPCK0 ::28 ::24
:/
Connect the CS pin to one of the pins listed above, a different one for each MAX31855 board. The pins listed are for temperature sensor channels 100, 101, 102 and 103 respectively. If you have Roland mill support enabled in the firmware, only two channels (100 and 101) are available because the mill uses the other two pins.
=/
==Firmware configuration
To tell the firmware to use a thermocouple channel for one of the heaters, use the X parameter in the M305 command for that heater to specify the required channel (100 to 103). For example, M305 P1 X100 tells the firmware that for heater 1 (which is normally the first hot end heater) it should sense the temperature using the thermocouple board whose CS pin is connected to NPCS0. The B H L R and T parameters of the M305 command are not required when using thermocouples.

==Troubleshooting
If you have difficulty getting correct readings from the thermocouple board, try connecting a wire link between the two terminals of the terminal block instead of a thermocouple. This should produce a room temperature reading.

If the temperature readout decreases when you heat the thermistor instead of increasing, swap over the thermocouple wires in the terminal block.

If you get wildly inaccurate or fluctuating readings, check that the thermocouple wires are securely connected in the terminal block. If you purchased a third-party thermocouple interface board, check that there is a 10nF or greater capacitor in parallel with the thermocouple terminals. 

<small>Author: DC42 </small>

■Duet_Firmware_Update
Duet Firmware update
(:date 11 Aug 2016 02:05:)You shall first get the %firmware%RepRap_Firmware version file needed for the firmware update. There are multiple forks, so have a look %here%RepRap_Firmware!Firmware_binaries. click "view raw" to get the original file and save it on your hard-drive. You shall also check that you still have the file of the actual firmware version in case you need to revert to it. You may also have a look at %release notes%Release_notes .

Only DC42 (and Chrishamm) forks manage Delta and CoreXY printers. These two forks are the only being still in development and there are exchanges between them. DuetWifi is handled by DC42.

File name structure is : RepRapFirmware-XXX-DD-MM-YYYY.bin, where XXX is the version, and DD-MM-YYYY is the date of the firmware.

Github downloading can be confusing and you may accidentally download the html page instead of the binary file. Check the size which shall be approximately 270 kB.

allb,Duet_Wifi_1.0+/=
==Duet WiFi update
===Changes from Duet 0.8.5 and Duet 0.6
* The main firmware file is called **DuetWiFiFirmware.bin** instead of RepRapFirmware.bin
* The firmware file uploaded to the WiFi module is called **DuetWiFiServer.bin**
* The Duet Web Control files are not stored on the SD card. Instead they are uploaded to the WiFi module from file **DuetWebControl.bin**
* The firmware update loader file stored in /sys on the SD card is called iap4e.bin to distinguish it from iap.bin that the SAM3X-based Duets use.

===Updating main firmware
Note: some updates to the main firmware may require an update to the a compatible WiFi server firmware version as well, and vice versa. See the separate section on how to do this.
Check you have downloaded the correct firmware before installing it. The **DuetWiFiFirmware.bin** file should be about 208kb in size.
* Connect DuetWebControl.
* Go to the Settings page.
* On the General tab, press Upload File(s) and browse to the new DuetWiFiFirmware.bin file.
* After uploading, DuetWebControl will ask you whether you want to install the new firmware. If you are only updating the main firmware, answer **Yes**. If you are updating WiFi firmware as well, answer **No** so that you can upload the new WiFi firmware too.

====Backup procedure #1
If WiFi is not working, but you can connect to the board via USB/Pronterface:

* Take the SD card out and put it in a computer,
* Copy the new **DuetWiFiFirmware.bin** file to the /sys folder. Also make sure that file iap4e.bin is present in /sys.
* Replace the SD card in the DuetWiFi
* Restart the DuetWiFi and connect with Pronterface
* Send command **M997 S0** to install the firmware.
* Disconnect Pronterface, then when the USB port disappears and reappears about 20 seconds later, reconnect.

====Backup procedure #2
If you can’t connect to the board via USB/Pronterface:

* Remove the SD card from the computer and put it in a PC
* Use a text editor to comment out the **M552 S1** command in **config.g**.
* Save the file and eject the SD card
* Put the SD card back in the Duet WiFi
* Start the Duet WiFi and see if you can connect Pronterface. If so, continue with Backup Procedure #1.

====Backup procedure #3
Use this if the firmware on the Duet WiFi has been corrupted, or if you have pressed the Erase button, so you can’t connect with Pronterface even with WiFi disabled in config.g. You will need a Windows or Linux PC.
* Download and install SAM-BA version 2.16 here "http://www.atmel.com/tools/atmelsam-bain-systemprogrammer.aspx"
* Connect the Duet WiFi to your PC via USB. Press the Erase button on the Duet WiFi, then the Reset button.
* Load SAM-BA. It usually detects the correct COM port automatically. Select board atsam91sam4e8-ek. Press Connect.
520L%samba.jpg (:clear:)
* In the Send File Name box enter or browse to the DuetWiFiFirmware.bin file to be loaded, then press Send File (leave the Address at the default of 0x400000). On completion it will invite you to lock the region; press Yes.
* If desired, press Compare sent file with memory.
* Press the Execute button next to the Boot from Flash option in the Scripts box. Then exit SAM-BA.
520L%execute.jpg (:clear:)
* Press **Reset** on the board.
* You should now be able to connect via USB/Pronterface.

==Updating WiFi firmware or DuetWebControl files
===Updating WiFi firmware
*    Upload the new DuetWiFiServer.bin file to the /sys folder on the SD card, either via the Settings page of DuetWebControl (if WiFi is working), or by temporarily moving the SD card to a PC.
*    Send command M997 S1 to install the new firmware. Preferably, send this command from Pronterface or PanelDue, because then the update status will be reported.
*    If you sent the M997 S1 command via the web interface, it will lose the connection and you should allow a minute or so for the firmware installation to complete before you press the Connect button.

===Updating DuetWebControl files
*    Upload the new DuetWebControl.bin file to the /sys folder
*    Send M997 S2 to install it.
*    Installation takes several minutes and the WiFi interface is not available while it is in progress, so it is best done with Pronterface or with a PanelDue connected so that you can see when it is finished.

== Updating more than one firmware at a time
Sometimes we may do synchronised releases of firmware, where more than one firmware component needs to be updated at the same time to maintain compatibility. To perform simultaneous updates of more than one firmware:
* Upload all the firmware files to /sys on the SD card, but decline any offers to install them.
* Use the M997 command to install them all at once, specifying which firmwares you want to update in the S parameter. For example, M997 S0:1:2 will update all firmwares, provided that all the firmware files and iap4e.bin are present in /sys on the SD card.
=/

allb,Duet_0.85,Duet0.6+/=

== In application update 
From versions 1.09v of "Chrishamm fork https://github.com/chrishamm/RepRapFirmware/tree/dev/Release" and 1.09x of "DC42 fork https://github.com/dc42/RepRapFirmware/tree/dev/Release," it is now possible to make the update without connecting via USB, with the %M997%gcode_cvt!M997.3a_Perform_in-application_firmware_update  command or directly with an upload via web interface.

If you upload a firmware file via web interface "settings" "General", button "load file(s)", at the end of uploading, the interface will tell you that you have uploaded a firmware file and ask if you want to update immediately. Clicking "yes" will starts the update and one minute later, it is done. You may need to reload the interface in your browser after the update to get proper connection to the board.

For this to work, you shall have first updated the firmware to a version above the one listed, which shall be done via traditional USB method (see further paragraph). Also, you shall have in the /sys directory the file iap.bin . 

The iap.bin file could be uploaded via the web interface, with same command as above ("settings" "General", button "load file(s)").

iap.bin could be found on "Chrishamm github https://github.com/chrishamm/DuetIAP/tree/master/Release" or "DC42 github (modified version) https://github.com/dc42/DuetIAP." 

Alternatively, you could set the files on the SD card directly or via FTP (for wired Duets) on /sys directory:
*iap.bin - this is needed for in application firmware update and will stay permanently, so shall be done only once.
*RepRapFirmware.bin - with this exact name, no version descriptive characters

Web interface upload will modify the firmware file name automatically and remove the version reference, so you can upload the firmware file with its native name. 

While files are on SD card, to update, simply execute the command M997 without any parameter. The file "RepRapFirmware.bin" will be erased from the SD card after the firmware update.

==Update via USB link
=== How it works 
To update the Duet Firmware, you need to connect the Duet to your PC via an USB cable. During the update, the transmission speed is low (1200 bauds), so you can use a relatively long USB cable, if needed.  

The firmware is transferred to the board via a program named Bossac, as found on an old version of Arduino development environment (IDE), the version of IDE to get it is the 1.5.5. (in C:\Arduino-1.5.5\hardware\tools\bossac.exe ) Note that there is a GUI Bossa program which does not work on the Duet. Use only the command line program version 1.3a.

=== Plug the USB cable 
Plug the USB cable. The 5V supplied by USB may be sufficient to power the board if there is no accessories attached to the 5V supply. You may also power normally the board if there are others 5V consumers (e.g. fans) or if the 5V of your computer is weak (portable computers).

=== Erase existing firmware 
Prior updating, the board firmware shall be erased and the board re-initialized.
320%Duet_0.6_buttons.jpg
*On the Duet 0.6, the erase and reset buttons are on the face of the board, the erase button between Ethernet connector and SD card slot, the reset button aside the USB connector.
(:clear:)
320%Duet_0.8.5_buttons.jpg
*On the Duet 0.8.5, these two buttons are on the side of the board beside the connectors, so there is no need to open the printer or board cover.
(:clear:)
Press the erase button, wait at least 5 seconds then press the reset button and wait 15 seconds for the board to restart.

Erasing the firmware place the board in a special communication mode and it became a serial peripheral visible by the computer under name 'BOSSA Program port'.

=== Updating 
==== On Windows 
- Check proper communication with PC =
Check first that the board is in communication with the computer and is ready for update by checking in the Windows "Device Manager http://www.computerhope.com/issues/ch000833.htm"  paragraph [Ports (COM and LPT)] that the board is shown as a COM port (e.g. COM5) under the name 'Bossa'. If it is shown as an Arduino Due, the erase had not worked and shall be redone.
*W7:[Windows][type in search box: Device manager]
*W10:[Windows + X][Device manager]

- Transfer
Install the bossac.exe program and the firmware file in a temporary directory (e.g. c:\mytmp)
Then open a command prompt window and go to the temporary directory (e.g. type:  cd c:\mytmp) 
Then type :
  bossac.exe -e -w -v -b RepRapFirmware-XXX-DD-MM-YYYY.bin
with the '.bin' file corresponding to your firmware update version file.
There are messages during the update, which is checked after the upload.

==== On MAC 
see this post on think3dprint3d blog:
* "Updating RepRapFirmware and PanelDue firmware using Mac OS X as a host http://blog.think3dprint3d.com/2016_03_01_archive.html"

==== On Linux 
=== Check update is properly done 
To check the version, you have to unpower/repower (or reset) the board, and you can check the version on the web interface, in the tab 'settings'. Beware the board does not start instantly, neither the web interface communication and you may wait a few seconds to see the version.

== Update configuration and image 
Sometimes, firmware update may require modifications of the config file and update of macros files on the SD card (SD “image”). 

Check the release notes of the uploaded version and ALL the %release notes%Release_notes  of the intermediate versions between your former and actual version.

You shall NOT make a complete update of an existing SD image already adapted to your configuration, as it most probably will break your configuration. A close look and comparison of new or modified macros will help you judge the pertinence of modifications.

In particular, in addition to config.g, you shall preserve the macros in /sys directory, as they often target specific positions in a given machine.

Firmware update may also need an update of the %Web Control%Duet_Web_Control  image to work properly, which could be found on "Chrishamm github https://github.com/chrishamm/DuetWebControl"
/www/js/model.js and /www/js/viewmodel.js may need to be preserved if they have been modified, or the new files shall be updated with same modifications as existing ones.

== Use FTP to transfer new files on the SD card 
The simplest way to transfer files between your computer and wired Duets is to use an FTP file transfer program (e.g. file management program 'Total Commander' which incorporate a FTP module). This needs a network connection to the Duet.

To connect in FTP to the board, use any login you want (e.g. 'admin')  and the password as it is recorded in your config file (e.g. 'M551 Pmypassword')  The first 'P' define following letters as a parameter and is not part of the password. Default password is 'reprap'. Password is case sensitive. 

The password is also defined in the web interface file 'www\js\interface.js' or 'www\js\model.js' in recent %Duet Web Control%Duet_Web_Control versions. This file shall be modified accordingly for a new password.
=/

== See also 
*%Duet%Duet
*%Duet Firmware_binaries%Duet!Firmware_binaries
*%Updating RepRap Firmware config.g file%Updating_config
*%Duet Web Control%Duet_Web_Control - Web interface of RepRap firmware (it is separated from the firmware)
*%RepRap Firmware%RepRap_Firmware - Philosophy of RepRap firmware

== External links 
*"Topic on Reprap forum http://forums.reprap.org/read.php?340,300221,300221"
*"Bossa creator site http://www.shumatech.com/web/products/bossa"
*"Arduino IDE download https://www.arduino.cc/en/Main/OldSoftwareReleases#previous"
(:trail Duet hardware:)	

<small>Author: DC42 and PRZ</small>

■Status_responses
RepRap Firmware Status responses
(:date 11 Aug 2016 02:05:)Because the old-style Duet status response has become somewhat clumsy, I (Chrishamm) decided to introduce a new status response in %RepRap Firmware%RepRap_Firmware. Its main goal is to achieve better readability and enhanced flexibility for different machine setups. They may be utilised either from the HTTP server (see rr_status and type request in my firmware fork) or from an attached device using the "M105 S" code.

In general, there shall be three different response types depending on the values required:

# Default status response
# Enhanced status response
# Print status response

Types 2) and 3) shall begin with the default response, but additional key/value pairs may be added.

== Design guidelines 
To avoid messing up this new status response in the future, it's mandatory to keep these design guidelines in mind:

# Per cent values are reported as floats on a scale between 0 and 100. Their precision may differ
# Feedrates and accelerations are given in mm/sec or mm/sec²
# Temperatures are floats with exactly one decimal place
# Boolean values are displayed as either 0 (false) or 1 (true)
# Durations and times are reported in seconds with at least one decimal place
# Any of the following responses must represent valid JSON data
# Keep JSON key names unique. That's because expansion electronics may not know which response type they're processing
# Also try to keep JSON fields as short as possible and don't use underscores. Use capital letters instead

== Status Response Definitions 
=== Default Status Response (type 1) 
The default status response is indended to report basic 3D printer values and it shall contain only those parameters that are expected to change quickly. Its keys must be either encapsulated or have unique names to ensure the JSON data remains valid even if additional key/value pairs are added by other status response types.

Here an example for a machine with one tool, two nozzles and two extruder drives:

<<
{
	"status": "STATE",
	"coords": {
		"axesHomed": [0, 0, 0],
		"extr": [0.0, 0.0],
		"xyz": [0.0, 0.0, 0.0]
	},
	"currentTool":1,			// -1 means none
	"output":{				// This
		"beepDuration": 3000,		// is					// These are only included
		"beepFrequency": 2000,		// missing				// in webserver responses
		"message": ""			// by
	},					// default
	"params": {
		"atxPower": 0,
		"fanPercent": [100.0, 35.0],	// NOTE: This used to be a single value (up to v1.09o-ch)
		"speedFactor": 100.00,
		"extrFactors": [100.0, 100.0]
	},
	"seq":0,				// Only included in webserver status response to indicate a new G-code response
	"sensors": {
		"probeValue": 0,
		"probeSecondary": [0,0],	// Hidden for unmodulated probes, otherwise its array size depends on the probe type (usually 1 or 2)
		"fanRPM": 0
	},
	"temps": {
		"bed": {			// Missing
			"current": 20.0,	// if no
			"active": -273.1,	// heated
			"state": 0		// bed
		},				// is present
		"chamber": {			// Missing
			"current": 19.7,	// if no
			"active": 50.0,		// chamber was
			"state": 2		// previously defined
		},				// using M141 H#
		"heads": {
			"current": [25.0, 25.0],
			"active": [0.0, 0.0],
			"standby": [0.0, 0.0],
			"state": [2, 1]		// 0: off, 1: standby, 2: active, 3: fault (same for bed)
		}
	},
	"seq":0,				// NEW: As of 1.09m-ch, these two fields for G-Code responses
	"resp":"G-Code response for PanelDue",	// may be included in AUX status responses as well (if available)
	"time": 435.2,				// time since last reset
}
>>

with STATE being one of:
* C (configuration file is being processed)
* I (idle, no movement or code is being performed)
* B (busy, live movement is in progress or a macro file is being run)
* P (printing a file)
* D (decelerating, pausing a running print)
* S (stopped, live print has been paused)
* R (resuming a paused print)
* H (halted, after emergency stop)
* F (flashing new firmware)

=== Extended Status Response (type 2) 
These values are considered to be rather static and aren't expected to change very frequently. This response may be polled less frequently than the standard response, but it needs to be updated, because this response provides the most important configuration characteristics.

<<
{
	"coldExtrudeTemp": 0.0,
	"coldRetractTemp": 0.0,
	"endstops": 0,				// NEW: As of 1.09n-ch, this field provides a bitmap of all stopped drive endstops 
	"geometry": "cartesian",
	"name": "My RepRap 1",
	"probe:" {
		"threshold": 500,
		"height": 2.6,
		"type": 1
	},
	"tools": [		{
			"number": 1,
			"heaters": [1],
			"drives": [0]
		},
		{
			"number": 2,
			"heaters": [2],
			"drives": [1]
		}
]
}
>>

RepRapFirmware supports the following printer geometries:

* cartesian
* delta
* coreXY
* coreXZ
* coreYZ

=== Print Status Response (type 3) 
This status response only adds print-related information. It may be polled instead of type 1 when a file print is in progress.

<<
{
	"currentLayer": 0,
	"currentLayerTime": 0.0,
	"extrRaw": [0.0, 0.0],			// How much filament would have been printed without extrusion factors applied
	"fractionPrinted": 0.0,			// one decimal place
	
	"firstLayerDuration": 0.0,
	"firstLayerHeight": 0.0,
	"printDuration": 0.0,
	"warmUpDuration": 0.0,
	
	"timesLeft": {
		"file": 0.0,
		"filament": 0.0,
		"layer": 0.0
	}
}
>>

== Extended Config Response 
Because some parameters are either unlikely to change or usually not required for external devices or networking clients, we should put them in a separate response. "configFile" has to stay at the end because its content may be truncated.
<<
{
	"axisMins": [0.0, 0.0, 0.0],
	"axisMaxes": [220.0, 200.0, 180.0],
	"accelerations": [1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0],
	"currents": [800.0, 1000.0, 800.0, 1000.0, 800.0, 800.0, 8000, 800.0],		// NEW: Introduced in v1.09n-ch
	"firmwareElectronics": "Duet (+ Expansion)",
	"firmwareName": "RepRapFirmware",
	"firmwareVersion": "1.08c-zpl",
	"firmwareDate": "2015-03-27",
	"idleCurrentFactor": 35.0,							// NEW: Also introduced
	"idleTimeout": 30.0,								// NEW: in RRF v1.09n-ch
	"minFeedrates": [10.0, 10.0, 0.5, 0.33, 0.33, 0.33, 0.33, 0.33],
	"maxFeedrates": [250.0, 250.0, 3.0, 60.0, 60.0, 60.0, 60.0, 60.0],
	"configFile":"<-- content of config.g file -->"
}
>>

PID, networking and other configuration parameters might be added to a future version.

==See also
*%M36: Return file information%gcode_cvt!M36.3a_Return_file_information" Return information about a file on the SD card - "JSON https://en.wikipedia.org/wiki/JSON format.
*%M408: Report JSON-style response%gcode_cvt!M408.3a_Report_JSON-style_response  - Return printer status data
*%M122: Diagnose%gcode_cvt!M122.3a_Diagnose 

<small>Author: Chrishamm</small>

■Duet_design
Duet design
(:date 11 Aug 2016 02:05:)%Duet%Duet integral printer board based on 32 bit Arm processor was designed by "T3P3 http://reprap.org/wiki/User:T3P3"  company with help of others. New Duet WiFi was designed by T3P3 and DC42. 

The wired Duet boards (0.6: 4 drives and 0.8.5: 5 drives) are based upon the "Arduino Due https://www.arduino.cc/en/Main/ArduinoBoardDue" board design with added equipment to handle 3D printing. 

Duet 0.6 was issued in December 2013 and Duet 0.8.5 in August 2015. Duet WiFi beta was issued in June 2016. 

== Processor 
The 32 bit ARM cortex-M3 processor used  in wired Duets ("Atmel SAM3X8E http://www.atmel.com/devices/ATsam3x8e.aspx") run at 84 MHz,  have 96 kB of SRAM memory and 512kB flash memory. It is equipped natively with Ethernet and USB interface.  The model used on Duet is enclosed in 144 pin package and have 103 I/O pins. 
Since a few years, this 32 bit arm processor chip is sold at a lower cost than 8 bit processors as found on 8 bit Arduinos (ATmega2560 or ATmega328P), with a difference of around 3 USD in quantities (ATmega2560). 
Due to the use of this processor, the signal voltage is 3.3V and using 5V on I/O pins may destroy the board as there is no protection. 

The Duet WiFi use an upgraded Arm Cortex-M4 ("Atmel SAM4E8E http://www.atmel.com/devices/ATSAM4E8E.aspx") controller at 120 MHz with 128 kB SRAM. In addition, the WiFi module "ESP8266 http://www.esp8266.com/" by Espressif do have own 32 bit processor (L106 Diamond) which discharge main processor.

== Communication 
The processor Ethernet interface needs an added chip (here a "Microchip KSZ8051RNL http://www.microchip.com/wwwproducts/en/KSZ8051)" for signal conversion , called a ‘PHY’ converter, which cost less than 1 USD in bulk.  This make possible Ethernet connexion with fair speed at relatively low cost. It is "indeed surprising http://www.hwmakers.eu/arduino/arduino-due-the-missing-ethernet/" that the Arduino designers decided not to implement Ethernet connexion on the Due board.
An USB connexion is present and can be used for direct connexion or board firmware flash.
There is a SD car reader, which is  used to read the configuration files on the SD card at board start-up and for printing.

== Current control 
For motor current control, the Duet use a  quad ‘digital potentiometer’ specialised circuit "MCP44X1 http://ww1.microchip.com/downloads/en/DeviceDoc/22265a.pdf," which cost in bulk approximately 1USD.  5th motor current (on Duet 0.8.5) is directly controlled by processor pin.

== Motor drives 
The chip for motor drives are "Allegro A4982 http://www.allegromicro.com/en/Products/Motor-Driver-And-Interface-ICs/Bipolar-Stepper-Motor-Drivers/A4982.aspx," with 2A absolute maximum rating and are used at 1:16 microsteps. They are cooled by their bottom, the heat being transferred to board plane by thermal vias. 
These drive chips have over current and over temperature protection.
Usable maximum current is unknown, some users having operated 0.8.5 it at 3x1.4A +1.6A  with forced cooling. 
Board 0.6 have been proofed to work without cooling with 3x0.8A + 1.2A  on "Fisher http://reprap.org/wiki/Fisher" delta.

Duet WiFi uses "Trinamic TMC2660 driver http://www.trinamic.com/products/integrated-circuits/stepper-power-driver/tmc2660", a driver with a rated current of 2.8A, while the current is yet limited on the board to 2A. The Rds(on) resistance (circuit resistance) of the Trinamic is 65mOhm, 5 time lower than the 320 mOhm of the A4982, giving a much lower heat generation and a higher practical usable current. In addition, it can use up to 256 microsteps, with interpolation capabilities for lower microstepping. It does have sophisticated decay modes and made the steppers more silent than with the Allegro A4982.

== Cooling 
The chip driver A4982 use a larger package than the common A4988 and so improve heat transmission to the board. The only other difference is the A4982 inability to run at 1:8 microsteps, which is irrelevant for a 32 bit board having no problem to issue the larger step rate required by 1:16 microsteps. 

The board have 4 copper layers which insure a better heat diffusion through whole board.

This, coupled to a comparatively large board area insure a "much better http://blog.think3dprint3d.com/2013/08/stepper-driver-thermal-testing.html" cooling than commonly used independent driver circuits.

A "thermal image of the 0.6 board http://blog.think3dprint3d.com/2013/12/duet-fet-psu-and-stepper-driver-testing.html" was done by its designer, but running only one stepper which is not quite representative of real world operation.

== Power supply 
Maximum allowed voltage is 30V for wired board and 25V for Duet WiFi.

A 5V buck converter ("A4403 http://www.allegromicro.com/en/Products/Regulators-And-Lighting/Single-Output-Regulators/A4403.aspx," rating 2A) exist on board, however the board can accept an external 5V power supply. Board have been tested at 1.5A on 5V.
The 3.3V voltage is taken from the 5V rail. The 3.3V current depends from own consumption and accessories (IR sensor, Panel), so to estimate current available for accessories supplied in 5V, you shall first subs-tract 3.3V peak current consumption.

== Connections 
The first board (Duet 0.6) was equipped with a 40 pin unique connector for steppers and end-switches. Such unique loom for all motors and switches was never used and this was abandoned on Duet 0.8.5.
On the Duet 0.6,  a 26 pin connector was installed to connect a Bed in addition to the Bed screw terminals. Again, this was never used and abandoned on Duet 0.8.5.

There is a 50 pins connector for a dedicated expansion board named Duex4 (adding 4 drivers and associated circuits), compatible between Duet 0.6 and 0.8.5 versions.  This connector can be used to get signals or power supply if there is no expansion board present. RepRapPro was also selling a ‘shield’ for 2 added drivers.

Duet 0.8.5 does  add a specific connector (serial communication) for an external panel control  named PanelDue, which operate autonomously as a terminal.
Duet 0.8.5 also add a specific connector for a Z-probe.

The signal line names are those used on Arduino Due, with extension for lines not used on Arduino.

It shall be noted that the end switches pin order is different from other boards, in order to avoid shorts if connectors are reversed (center pin is 3.3V).

Duet WiFi expansion connector is different than the wired boards and its expansion board is not compatible.
There is added connectors for thermocouple/PT100 expansion board.
Overall connection layout is improved on the Duet WiFi.

== Cost 
The SAM3XE cost is slightly higher than the ARM processor used in Smoothieboard  (NXP LCP1769) by 1$, but the SmoothieBoard chip don’t have native Ethernet interface. Smoothie processor is faster at 120MHz, but have less memory (64 kB vs 96 kB).

Due to lower processor cost, native USB and Ethernet control, this 32 bit board may cost less to manufacture than comparable 8 bits processor based board and some other Arm-based board. 
Indeed, RepRapPro was selling the Duet 0.6 for a lower cost than the 8 bit Melzi they were also supplying.

In the USA, the Duet 0.8.5 is sold 135 USD, to be compared to the Ultimachine RAMBO board 175 USD, one of the most complete 8 bit board, however without Ethernet connexion.

The Duet 0.6 board is cloned by a Chinese manufacturer, Replikeo and sold at 65 USD. 
It is a clone of the first Duet 0.6 issue, with minor differences with present 0.6 boards (notably thermistor resistance of 1K, instead of 4.7k on later 0.6 board issues).

As there is on the 0.6 board unused connectors and USB host capability, it may be possible to issue a 4 drives board with the same simplifications and improvement as the 5 drives 0.8.5. Relocating the end switches connectors may also simplify board routing.

Selling quantity was not disclosed, but as the Duet 0.6 was the standard board for RepRapPro machines since the beginning of 2014, there is probably a few thousands owners. Till the issue of Duet 0.8.5, the diffusion of this board as an independent one for self-builders was low, due to lack of documentation and active commercial promotion. Active software development by independent developers and USA distribution have given this board (mid 2016) some momentum. 

== External links 
* "Impressions:Duet vs Smoothie http://forum.seemecnc.com/viewtopic.php?f=111andt=9205" A thorough comparison between these boards - on SeemeCNC forum
* "Short video review of Duet 0.6 (2014) https://www.youtube.com/watch?v=2p2i9vsPcNY" 

■Cartesian_config
Cartesian printer configuration
(:date 11 Aug 2016 02:05:)%RepRap Firmware%RepRap_Firmware is configured at run-time by means of files in the /sys folder of the SD card. This means that you must have an SD card in the on-board socket to use RepRapFirmware. You do not have to recompile RepRapFirmware to configure it, so if you wish to update the firmware on your Duet or other compatible electronics board, you can download a ready-built binary.

A few of the commands listed here are specific to the dc42 fork of RepRapFirmware and are not supported by the official RepRapPro version, although they may be supported in other forks e.g. the forks of Christian Hammacher, Dan Newman, and Think3DPrint3D. To see what the commands do and which firmware fork(s) implement them, see %G-code%gcode_cvt.

This page describes how to set up the configuration files for Cartesian printers, and forms the basis for setting up all printer types. However, the same firmware binary also supports Delta, CoreXY and CoreXZ printers. For the changes you need to make for other types of printer, see %Configuring RepRapFirmware for a Delta printer%Delta_Config and %Configuring RepRapFirmware for a CoreXY printer%CoreXY_config.

== Main configuration file

The main configuration file is sys/config.g. This file is read when RepRapFirmware starts up.

The order of commands in the config.g file is generally immaterial, with the following exceptions:

*The G31 command must come after the M558 command. This is because separate G31 parameters are stored for each possible probe type.
*The  M350 command(s) to set microstepping must come after any M584 or M569 commands that remap drivers.
*The M92 commands to set steps/mm must come after any M350 command to set microstepping. This is because when you change microstepping, the steps/mm are automatically adjusted to take account of the change in microstepping.
*The  M906 command(s) to set motor current must come after any M584 or M569 commands that remap drivers. Otherwise you will end up with motor current set for the wrong axes or extruders, unless all the motor currents are set to the same value.

Summary: **M558 before G31**, and **M584 before M350 and M906'''.

The config.g file is typically organised into sections along the following lines.

=== Prologue and communications section
allb,Duet_WiFi_1.0+/=
Example for Duet WiFi:
<<
M111 S0                             ; Debug off
M550 PMyOrmerod                     ; Machine name (can be anything you like)
M551 Preprap                        ; Machine password (currently not used)
M552 S1                             ; Enable WiFi
M555 P2                             ; Set output to look like Marlin
M575 P1 B57600 S1                   ; Set auxiliary serial port baud rate and require checksum (for PanelDue)
>>
=/
Duet_WiFi_1.0-/=
Example for Duet 0.6 or Duet 0.8.5:
<<
M111 S0                             ; Debug off
M550 PMyOrmerod                     ; Machine name (can be anything you like)
M551 Preprap                        ; Machine password (currently not used)
M540 P0xBE:0xEF:0xDE:0xAD:0xFE:0xED ; MAC Address
M552 P0.0.0.0                       ; IP address (0 = use DHCP)
M554 P192.168.1.1                   ; Gateway (not used yet)
M553 P255.255.255.0                 ; Netmask
M555 P2                             ; Set output to look like Marlin
M575 P1 B57600 S1                   ; Set auxiliary serial port baud rate and require checksum (for PanelDue)
>>
On the Duet but not the Duet WiFi, the machine name is used as a basis for the netbios name, so in the above example if your router supports netbios then you can attach to the web interface by typing "MyOrmerod/" into your browser.
=/ The password is used when connecting via FTP or the web interface (if you leave the password set as "reprap" then the web interface will not ask for a password).

When using more than one Duet on a wired network, you must given them all different MAC addresses, for example by changing the last value in the M540 command.

Change the final 0xED in the M540 command to a unique 2-digit hex number for each one.

=== Movement section
Example:
<<
M569 P0 S1                          ; Drive 0 goes forwards (change to S0 to reverse it)
M569 P1 S0                          ; Drive 1 goes backwards
M569 P2 S1                          ; Drive 2 goes forwards
M569 P3 S1                          ; Drive 3 goes forwards
M569 P4 S1                          ; Drive 4 goes forwards
M350 X16 Y16 Z16 E16 I1             ; set 16x microstepping with interpolation
M574 X0 Y1 Z0 S1		    ; set homing switch configuration (Y homing switch only, at low end, active high)
M906 X800 Y1000 Z800 E800           ; Set motor currents (mA)
M201 X800 Y800 Z15 E1000            ; Accelerations (mm/s^2)
M203 X15000 Y15000 Z100 E3600       ; Maximum speeds (mm/min)
M566 X600 Y600 Z30 E20              ; Maximum jerk speeds mm/minute
M208 X200 Y200 Z200                 ; set axis maxima and high homing switch positions (adjust to suit your machine)
M208 X-8 Y0 Z-0.5 S1                ; set axis minima and low homing switch positions (adjust to make X=0 and Y=0 the edges of the bed)
M92 X80 Y80 Z4000                   ; set axis steps/mm
M92 E420:420                        ; set extruder 0 and 1 steps/mm
G21                                 ; Work in millimetres
G90                                 ; Send absolute coordinates...
M83                                 ; ...but relative extruder moves
>>

The M569 commands are optional, drives go forward by default.

The M350 command to set micro-stepping must come before the M92 commands to set steps/mm, because the steps/mm are adjusted automatically when micro-stepping is changed.

The XYZ parameters to the M574 command are 0 if there is no homing switch for the axis, 1 if there is a low-end homing switch, and 2 if there is a high-end homing switch. S1 indicates active high inputs (e.g. normally-closed switches), while S2 indicates active low inputs.

The M208 command with parameter S0 or no S parameter defines the maximum coordinate of each axis. These are also the coordinates at which the head is assumed to be when a high-end homing switch is triggered. The M208 command with S1 parameter sets the minimum axis coordinates and low-end homing switch positions similarly.

The M906 command is required. Without it, motor currents will remain at zero. It also takes an optional I parameter, which is the percentage of normal current used to hold the motors in position when the motors have been idle for 30 seconds, default 30%.

It is possible to remap axes and extruders to different driver numbers. In firmware 1.13 and earlier, this is done using the M569 command. In 1.14 and later it is done using the M584 command.

=== Z probe section
The M558 command enables the Z probe, defines which axes (if any) it it used to home, and the dive height. The G31 command defines the probe threshold and the X, Y and Z offsets of the probe relative to the tip of the nozzle. Here is an example:
<<
M558 P1 X0 Y0 Z1 H3 F200 T5000    ; smart IR Z probe, used for homing Z axis only, dive height 3mm, probe speed 200mm/min, travel speed 5000mm/min
G31 P500 X11.0 Y0.5 Z1.65         ; set threshold and offsets
>>

The P parameter of the M558 command specifies the type of Z probe, as follows:

*P0 - no Z probe installed
*P1 - analog sensor feeding the AD10 pin on the expansion connector (also brought out as the S pin on the 4-pin Z probe connector on the Duet Shield and on the Duet 0.8.5). Suitable for an unmodulated IR sensor (not recommended), smart IR sensor, and many other types. Pin D52 on the Duet is driven high.
*P2 - simple modulated IR sensor. RepRapFirmware generates a modulation signal on pin D52 (also brought out as the T pin on the 4-pin Z probe connector on the Duet shield and Duet 0.8.5) for use by the sensor.
*P3 - as P1 but pin D52 is driven low instead of high. Allows a compatible Z probe to be switched to a different mode.
*P4 - microswitch (normally-closed by default) connected to the E0 endstop connector, or anything that emulates one. For a normally-open microswitch or NPN-output inductive sensor, use M574 E0 S0 to invert the sense of all the extruder endstop inputs.

The XYZ parameters in the M558 command define which axes the Z probe is used to home (0 = Z probe not used to home this axis, 1 = Z probe used). **By default, RepRapFirmware for the Duet (but not the Duet WiFi) uses the Z probe to home the X and Z axes**.

The H parameter defines the Z probe dive height, which is the height above the trigger height from which probing starts. The default is 3mm or 5mm depending on firmware version. You may wish to increase it during initial calibration.

The G31 command sets the Z probe offset, trigger height and threshold. It must come '''after''' the M558 command, because you can have multiple Z probe types with different G31 parameters. The P parameter sets the threshold. For a smart IR probe such as my own differential IR height sensor, use 500. For a switch I also suggest 500, although a lower value may provide faster triggering if the switch has intermittent contact when first triggered..

The Z parameter sets the trigger height (the nozzle height above the bed at which the Z probe output exceeds the threshold). For a Z probe which relies on the nozzle pushing the bed down, the trigger height will be negative.

The G31 command also has also optional X and Y parameters to define the horizontal offset of the Z probe from the nozzle. On a delta printer these should be left at zero, because the calibration routine needs to know where the nozzle has been placed, not where the probe is.

In firmware prior to 1.09k-dc42, the M210 command sets the speed of Z probing. In 1.09k-dc42 and later, it is set by the F parameter in the M558 command. The probing speed should be slow enough that the probe does not overshoot the trigger height. When using an analog Z probe, the probing speed is reduced by 2/3 when the probe detects that the trigger height is approaching, so that you can use a higher initial speed.

In firmware 1.09k-dc42 and later, the T parameter of the M558 command sets the speed at which the head travels to the Z probe coordinates specified for bed probing.

=== Heater and thermistor section
Here is an example for a 2-extruder machine:

<<
M305 P0 T100000 B3950 R4700 H0 L0	; Put your own H and/or L values here to set the bed thermistor ADC correction
M305 P1 T100000 B4388 R4700 H0 L0	; Put your own H and/or L values here to set the first nozzle thermistor ADC correction
M305 P2 T100000 B4388 R4700 H0 L0	; Put your own H and/or L values here to set the second nozzle thermistor ADC correction
M301 H1 P10 I0.10 D100 T0.50 S1.0	; PID settings for extruder 0
M301 H2 P10 I0.10 D100 T0.50 S1.0	; PID settings for extruder 1
M570 S120				; Increase to allow extra heating time if needed
;M141 H3                                ; Un-comment this to set chamber heater/thermistor channel
;M143 S275                              ; Un-comment this to set maximum extruder temperature, default is 262°C
>>

The M305 commands define the thermistor resistance at 25C (T parameter), thermistor B value (B parameter), thermistor series resistance (R value), and ADC high and low end corrections (H and L parameters).

You can get the thermistor resistance and B value from the thermistor datasheet. Note that the B value is typically given on the datasheet over quite a low temperature range, for example 25C to 85C. If the manufacturer publishes a resistance vs. temperature chart, it is better to use it to calculate the B value from 25C to the average extrusion temperature you use, for example 220C. The Semitec 104GT-2 thermistor supplied with the E3Dv6 hot end has a quoted B value of 4267, but the actual value over 25C to 220C is 4388.

The R value depends on which version of the Duet you have. Older Duet 0.6 boards and DuetX4 expansion boards, and Duet 0.6 boards supplied by Replikeo according to recent reports, use 1K series resistors, which is the firmware default. Later Duet 0.6 boards and DueX4 boards, and all Duet 0.8.5 boards, Duet WiFi boards and Duet Shields, use 4.7K resistors. If the hot end and bed temperatures read about 60C when they are at room temperature, this generally means that you have configured the firmware for 1K series resistor but your board uses 4.7K.

The H and L values allow you to compensate for ADC offsets at the high and low ends of the ADC input voltage range. The H parameter adjusts the high end offset, which affects the reading at low temperatures; whereas L adjusts the low end offset which affects readings at high temperatures. At room temperature, if your temperature readings are lower than actual, use a positive H parameter to bring the readings up to the correct value. If the readings are too high, use a negative H parameter. You should not need to use an H parameter outside the range -100 to +100, and in theory all channels should need the same H value. '''Note: the Duet WiFi has automatic ADC calibration so you should not need to use the H or L parameter.'''

The M305 command also takes an optional X parameter (not shown in the example) to allow temperature sensor channel remapping. For example, if in the M305 P0 command you add parameter X3, this means use the thermistor channel normally associated with heater 3 to read the temperature of heater 0 (i.e. the bed). RepRapFirmware uses temperature sensor channel numbers 100 to 103 to denote readings from thermocouples, and 200 to 203 to denote reading from PT100 sensors - see %Using_thermocouples_with_the_Duet_and_RepRapFirmware%Connecting_thermocouples and %Using_PT100_temperature_sensors_with_the_Duet_and_RepRapFirmware%Connecting_PT100 for details.

The M301 commands set the PID parameters for each heater channel. P, I and D are the usual PID parameters. A negative P value means use bang-bang control for that channel (which is the default for the bed). W is the maximum value of the I accumulator (0 to 255). B is the temperature band within which PID is used, for example if B is 30 then the heater will be full on or off until it is within 30C of the set temperature. T is the approximate additional PWM value (on a scale of 0 to 255) needed per 1C of additional temperature, used to pre-set the I accumulator when switching to PID. Finally, the PID output can be scaled by the S term. This allows you to adapt to a different heater power or supply voltage without having to change all of P, I, D and T.

The M570 command defines the time-to-hot timeout in seconds. When heating up the hot end, if the heater temperature is not within 2.5C of the commanded temperature within this time then the heater will be turned off and an error condition reported.

If you have a chamber heater, use the M141 command to define which heater channel it uses. You will also need to use M305 and M301 to define thermistor and PID parameters for that channel.

=== Tool definition section
A tool is a combination of zero or more extruder drives and zero or more heaters. A standard single-extrusion printer has a single tool that uses one extruder drive and one heater. It should be defined like this:

<<
M563 P0 D0 H1         ; tool 0 uses extruder drive 0 and heater 1
G10 P0 S0 R0 X0 Y0    ; set tool 0 temperatures and offsets
>>

The M563 command in this example defines tool 0 (P parameter) as using extruder drive 0 (D parameter) and heater 1 (H parameter). The G10 command sets the active (S parameter) and standby (R parameter) temperatures to zero, and defines the X and Y nozzle offsets from the head origin as zero.

The tool definition for a typical dual nozzle printer would look like this:

<<
M563 P0 D0 H1         ; tool 0 uses extruder drive 0 and heater 1
G10 P0 S0 R0 X-10 Y0  ; set tool 0 temperatures and offsets
M563 P1 D1 H2         ; tool 1 uses extruder drive 1 and heater 2
G10 P1 S0 R0 X10 Y0   ; set tool 1 temperatures and offsets
>>

This defines a second tool, which uses extruder drive 1 and heater 2. The first tool has the nozzle offset by -10mm from the head origin in the X direction, and the second tool has the nozzle offset by +10mm from head origin in the X direction. You can define the head origin to be wherever you like.

The tool definition section for a switching hot end (i.e. two filaments extruding through the same nozzle, but not at the same time) would look like this:

<<
M563 P0 D0 H1         ; define tool 0
G10 P0 S0 R0 X0 Y0    ; set tool 0 temperatures and offsets
M563 P1 D1 H1         ; define tool 1
G10 P1 S0 R0 X0 Y0    ; set tool 0 temperatures and offsets
>>

In this case, the two tools use different extruder drives but share heater 1.

The tool definition section for a mixing hot end (i.e. two filaments extruding through the same nozzle at the same time) would look like this:

<<
M563 P0 D0:1 H1       ; define tool 0
G10 P0 S0 R0 X0 Y0    ; set tool 0 temperatures and offsets
>>

In this case there is a single tool but it uses two extruder drives.

=== Epilogue
A typical epilogue would look like this:

<<
M556 S100 X0 Y0 Z0  ; Put your axis compensation here
T0                  ; Select the first head
>>

Axis compensation allows you to compensate in the firmware for the X, Y and Z axes not being exactly at right angles. The X parameter describes the error in the angle between X and Y axes, the Y parameter describes the angular error between Y and Z axes, and the Z parameter describes the angular error between Z and X axes. All these values get divided by the S parameter. For example, a parameter of Y1.5 with S100 would mean at 100mm height the Y position needs to be shifted by 1.5mm to make the print orthogonal. A calibration procedure for orthogonal axis compensation can be found at [https://reprappro.com/documentation/commissioning-introduction/calibration-duet/#Orthogonal_Axis_Compensation].

The T0 at the end selects tool 0. It is optional, but without it you will need to activate a tool before you can heat up the hot end or do extrusion. It is recommended that you also put the T0 command in the start gcode of your slicing program.

== Homing files

The homing files '''for a Cartesian or CoreXY printer''' are sys/homex.g, sys/homey.g, sys.homez.g and sys/homeall.g. Here is a typical homex.g file for a machine with an X axis homing switch at the low end:

<<
G91                ; relative mode
G1 Z4 F200         ; raise head to avoid dragging nozzle over the bed
G1 X-240 F3000 S1  ; move up to 240mm in the -X direction, stopping if the homing switch is triggered
G1 X4 F600         ; move slowly 4mm in the +X direction
G1 X-10 S1         ; move slowly 10mm in the -X direction, stopping at the homing switch
G1 Z-4 F200        ; lower the head again
G90                ; back to absolute mode
>>

Note the S1 parameter on some of the G1 commands. This parameter means stop moving an axis motor when the corresponding homing switch is triggered. On a Cartesian printer, the other axes continue moving.

For a machine with a homing switch at the high end, homex.g would look like this instead:

<<
G91                ; relative mode
G1 Z4 F200         ; raise head to avoid dragging nozzle over the bed
G1 X240 F3000 S1   ; move up to 240mm in the +X direction, stopping if the homing switch is triggered
G1 X-4 F600        ; move slowly 4mm in the -X direction
G1 X10 S1          ; move slowly 10mm in the +X direction, stopping at the homing switch
G1 Z-4 F200        ; lower the head again
G90                ; back to absolute mode
>>

You must also tell the firmware which end the homing switch is at, using the M574 command in config.g.

The homey.g file is similar to homex.g except that all instances of X are replaced by Y.

Z homing is normally done using the Z probe. Here is a typical homez.g file:

<<
G91                ; relative mode
G1 Z4 F200         ; raise head 4mm to ensure it is above the Z probe trigger height
G90                ; back to absolute mode
G1 X100 Y100 F2000 ; put head over the centre of the bed, or wherever you want to probe
G30                ; lower head, stop when probe triggered and set Z to trigger height
>>

Adjust the X and Y coordinates in the second G1 command according to where you want to probe when Z homing. You need to have set up the Z probe type, trigger height and threshold as described earlier.

If you home Z using a micro-switch instead, then you can use a pattern similar to homex,g and homey.g. However, if you use a low-end homing switch that triggers a little before Z=0, then you can't use M208 to define the homing position, because it would prevent you moving below the trigger height. You can use a G92 command after homing instead. Here is an example, for the case where you have a low-end homing switch that triggers at Z=0.3mm:

<<
G91                ; relative mode
G1 Z4 F200         ; raise head 4mm to ensure it is above the switch trigger height
G90                ; back to absolute mode
G1 X0 Y0 F2000     ; put head wherever you want it to be when you home Z (omit this line if it doesn't matter)
G91                ; relative mode
G1 Z-200 S1 F100   ; move Z down until the switch triggers
G90                ; back to absolute mode
G92 Z0.3           ; tell the firmware that we are at Z=0.3mm
>>

The homeall.g file is used when all axes are to be homed. You could make it by concatenating homex.g, homey.g and homez.g, but some optimisations are possible. For example, you need only raise the head by 4mm once, and you can do simultaneous X and Y homing. Here is a sample homeall.g file for a machine with X and Y endstop switches at the low end:

<<
G91                ; relative mode
G1 Z4 F200         ; raise head 4mm
G1 X-240 Y-240 F3000 S1  ; move up to 240mm in the -X and -Y directions until the homing switches are triggered
G1 X4 Y4 F600      ; move slowly 6mm in +X and +Y directions
G1 X-10 Y-10 S1    ; move up to 10mm in the -X and -Y directions until the homing switches are triggered
G90                ; back to absolute mode
G1 X100 Y100 F2000 ; put head over the centre of the bed, or wherever you want to probe
G30                ; lower head, stop when probe triggered and set Z to trigger height
>>

== Bed probing file

RepRapFirmware currently supports 3, 4 and 5 point auto and manual bed compensation. To use auto bed compensation, you must have a Z probe.

The bed compensation is set up in the bed.g file. Here is a typical 5-points 'bed.g' file for a printer with a 200 x 200mm bed:

<<
M561                         ; clear any existing bed transform
G30 P0 X10 Y10 Z-99999       ; define 4 points in a clockwise direction around the bed, starting near (0,0)
G30 P1 X10 Y190 Z-99999
G30 P2 X190 Y190 Z-99999
G30 P3 X190 Y10 Z-99999
G30 P4 X100 Y100 Z-99999 S0  ; finally probe bed centre, and calculate compensation
G1 X0 Y0 F5000               ; move the head to the corner (optional)
>>

The Z-99999 parameter on each G30 command tells the firmware to probe at the given XY point and save the reading in the index given by the P command. The S0 parameter on the final G30 command tells the firmware to apply compensation based on the number of points probed (in this case, 5 points). '''The bed probe points must be in a clockwise order around the bed''' and when using 5-point probing the centre point must be last.

You may include an H parameter on each G30 command, This is the value that needs to be added to the G31 Z parameter to get the trigger height at that position. This is to correct for Z probes whose trigger heights vary slightly with XY position.

To use 4-point compensation, omit the final G30 command and put the S0 parameter on the G30 P3 command instead.

To use manual compensation instead of a Z probe, replace the -99999 in each G30 command by the actual bed height error at that XY position.

== Tool change files

RepRapFirmware handles multiple extruders through a tool definition mechanism. If you have multiple nozzles, you will normally define one tool for each nozzle. There is nothing to stop you defining several tools that use the same nozzle if you want, or a single tool that uses more than one nozzle.

Only one tool is active at a time. To switch between tools, use the T command. Tools are conventionally numbered from zero, so in a dual nozzle printer the tools would normally be T0 and T1. The current PanelDue firmware expects the tools to be numbered T0, T1 and so on; but the web interface doesn't mind if the tools are not numbered consecutively.

When the firmware receives a T command and the requested tool number is not already active, it goes through the following sequence:

# If another tool is active, run file sys/tfree#.g where # is the number of the active tool (e.g. tfree0.g).
# If another tool is active, set its heaters to their standby temperatures.
# Run file sys/tpre#.g where # is the number of the new tool being activated.
# Set the heaters associated to the new tool to their active temperatures.
# Run file sys/tpost#.g where # is the number of the new tool being activated.

The tool change macro files are not run if no tool has ever been selected since power up. This allows you to put a T0 command at the end of config.g, which is convenient if you have only one tool.

Here is a sample tfree0.g file:

<<
; Put G/M Codes in here to run when Tool 0 is freed
M83               ; relative extruder mode
G1 E-4 F2500      ; retract 4mm
>>

Here is a sample tpre0.g file:

<<
; Put G/M Codes in here to run when Tool 0 is about to be activated
G1 X0 Y0 F6000    ; move the head away from the print
>>

Here is a sample tpost0.g file

<<
; Put G/M Codes in here to run after Tool 0 is activated
M116 P0           ; wait for tool 0 only to reach operating temperature
M83               ; relative extruder mode
G1 E4 F2500       ; undo retraction
>>

You may not need to include the commands to retract and un-retract the filament if your slicer does that for you. As when any macro file is run, the absolute/relative axis and extruder movement states are restored to their original values when the macro file completes.

The tfree1.g, tpre1.g and tpost1.g files would be similar, except that tpre1.g would use command M116 P1. The purpose of the P parameter on the M116 command is to allow you to wait for the new tool to heat up to active temperature without also waiting for the previously-selected tool to cool down to standby temperature.

== Pause, resume and cancel files

When you pause a print, macro file sys/pause.g is executed. Typically you will want to retract filament a little and move the head out of the way of the print. Here is a sample pause.g file:

<<
M83                   ; relative extruder moves
G1 E-4 F2500	      ; retract 4mm
G91                   ; relative moves
G1 Z2 F5000           ; raise nozzle 2mm
G90                   ; absolute moves
G1 X0 Y200 F5000      ; move head out of the way of the print
>>

Note that when executing any macro file, various parameters are saved, such as the absolute/relative axis movement flag, the absolute/relative extruder movement flag, and the feed rate. These parameters are restored when the macro completes.

Macro file sys/resume.g is executed when you resume a paused print. Here is a typical resume.g file:

<<
G1 R1 Z2 F5000	      ; move to 2mm above resume point
G1 R1                 ; lower nozzle to resume point
M83		      ; relative extruder moves
G1 E4 F2500	      ; undo the retraction
>>

The R1 parameter in the G1 command causes the coordinates at which the print was paused to be added to any XYZ parameters in the command.

If you cancel a paused print, file sys/cancel.g is run if it exists, otherwise all tools are deselected and all heaters are turned off. Your cancel.g file can either deselect all tools by sending T-1, or leave the current tool enabled ready to try the print again. On a delta printer, you might want to include a G28 homing command in cancel.g to get the print head out of the way.

== User-defined macro files
You can define your own macro files. Create a directory called /macros on the SD card and upload your macro files to it. The name of each macro file should be the text that you want to appear in the menu displayed on the web interface and PanelDue (no need for a .g or .gcode extension), and the file contents should be ordinary Gcode commands supported by RepRapFirmware.  If you want a lot of macros with a hierarchical menu structure, use subdirectories of /macros.

Note that the following parameters are always saved before running a macro, and restored afterwards; so any changes to them that you make in a macro will not be permanent: feed rate, relative/absolute axis coordinate mode, relative/absolute extruder coordinate mode.

<small> This page is released under license CC BY-SA 3.0 and GFDL 1.2  Author: DC42</small>

■CoreXY_config
CoreXY printer configuration
(:date 11 Aug 2016 02:05:)Configuration of %RepRap Firmware%RepRap_Firmware  for a CoreXY printer is very similar to configuration for a Cartesian printer, which is described at %Configuring RepRapFirmware for a Cartesian printer%Cartesian_Config. Only the differences will be described here.

== Main configuration file

=== Movement section
To switch the firmware to CoreXY mode, add this command to the movement section:

<<
M667 S1                   ; switch to CoreXY mode
>>

Use S1 for CoreXY, S2 for CoreXZ, and S3 for CoreYZ. If any motors move the wrong way, you can use M569 commands to alter the directions. The X motor moves the head in the +X and +Y directions when it runs forwards. The Y motor moves the head in the -X and +Y directions when it runs forwards.

By default, the firmware assumes that the paired axes (e.g. X and Y for a CoreXY machine) move equal amounts when just one motor turns. This is not always the case, for example a CoreXZ machine typically uses additional pulleys so that the Z axis moves only 1/3 of the amount of the X axis. To allow for this, you can use X, Y and Z parameters to specify that the motor movements should be multiplied by the given factor when moving the specified axis. So the typical CoreXZ machine should be configured like this:

<<
M667 S2 Z3                ; switch to CoreXZ mode and multiply motor movements by 3 for the Z axis
>>

== Homing files 

=== homeall.g file
The method of setting up simultaneous homing is different for CoreXY printers. On a Cartesian printer, if you use the G1 command with S1 parameter to perform a homing move on several axes simultaneously, each axis will continue moving until either the specified movement amount has been completed or the homing switch for that axis has been triggered. On a CoreXY printer, the whole move will be terminated when the first homing switch is triggered. Therefore, to do simultaneous XY homing, your homeall.g file needs to first home X and Y together, then home them separately. For example, if your printer has homing switches at the low ends of the X and Y axes, use this pattern:

<<
G91                       ; relative mode
G1 S1 X-240 Y-240 F3000   ; course home X or Y
G1 S1 X-240               ; course home X
G1 S1 Y-240               ; course home Y
G1 X4 Y4 F600             ; move away from the endstops
G1 S1 X-10                ; fine home X
G1 S1 Y-10                ; fine home Y
; Z homing section follows
...
>>

== Commissioning

During commissioning, you can test the X and Y motors independently by using the S2 modifier on the G1 command, like this:

<<
G91         ; relative mode
G1 S2 X10   ; move the X motor forward 10mm
G1 S2 X-10  ; move the X motor back 10mm
G1 S2 Y10   ; move the Y motor forward 10mm
G1 S2 Y-10  ; move the Y motor back 10mm
G90         ; back to absolute mode
>>

<small> This page is released under license CC BY-SA 3.0 and GFDL 1.2  Author: DC42</small>

■Delta_config
Configuration of a delta printer
(:date 11 Aug 2016 02:05:)For a general guide to configuring %RepRap Firmware%reprap_firmware, see %Configuring RepRapFirmware for a Cartesian printer%Cartesian_Config. Only the differences for delta printers are described here.

== Movement section of config.g file
To tell RepRapFirmware that your printer is a delta and to define its parameters, put command M665 L### R### H### B### X### Y### Z### in your sys/config.g file on the SD card, where ### represents a number. The L parameter is the diagonal rod length. The R parameter is your estimate of the delta radius. The H parameter is the height of the nozzle above the bed when the carriages are activating the endstop switches. The B parameter is the printable radius of the bed. X Y Z are the angular offsets of the X, Y and Z towers, and may be omitted or set to zero. All these values may include decimal portions.

You can also use an M666 command to set the homing switch corrections.

You also need to tell RepRapFirmware that the endstop switches are all at the high end using the M574 command.

The motor idle current is 30% of normal by default. This may not be enough to hold the carriages of a delta up, so you may need to increase it using the I parameter in the M906 command.

Here is an extract from a sample config.g file for the Mini Kossel:

<<
; Axis and motor configuration
M569 P0 S1                    ; Drive 0 (X) goes forwards
M569 P1 S1                    ; Drive 1 (Y) goes forwards
M569 P2 S1                    ; Drive 2 (Z) goes forwards
M569 P3 S1                    ; Drive 3 (E0) goes forwards
M569 P4 S1                    ; Drive 4 (E1) goes forwards
M574 X2 Y2 Z2 S1              ; all endstops at high end, active high
M665 R105.6 L215.0 B85 H235   ; set delta radius, diagonal rod length, printable radius and homed height
M666 X0 Y0 Z0                 ; put your endstop adjustments here
M203 X18000 Y18000 Z18000 E3600 ; maximum speeds mm/minute
M906 X800 Y800 Y800 E800 I60  ; set motor currents (mA) and increase motor idle current to 60%
>>

If your endstop switches produce active low outputs instead of active high, replace S1 in the M574 command by S0.

If your delta printer intentionally does not place the towers at the corners of an equilateral triangle, you can use additional X, Y and Z parameters in the M665 command to describe this. Consider a circle that passes through all three towers. The origin (i.e. bed centre assumed by the firmware) will be the centre of that circle. Label the towers X Y and Z moving around the circle in an anticlockwise direction as seen from above. Let X', Y' and Z' be the points on the circle where the towers would be if the towers were all 120 degrees apart and the Z tower in the +Y direction from the bed centre. Then the M665 X parameter is the angle from X' to X, the Y parameter is the angle from Y' to Y, and the Z parameter is the angle from Z' to Z, measured in degrees moving anticlockwise seen from above.

Example: a "square delta" has the towers at three of the four corners of a square. If Z is the middle tower and is at the rear left of the machine, then the M665 X Y Z parameters should be +15, +75 and +45 respectively.

The maximum usable XYZ speeds you can set in the M203 command depend on your tower steps/mm value. As a general guide, your maximum XYZ speeds in mm/minute multiplied by your tower steps/mm should be no more than 3.6 million when running firmware 1.09i-dc42 and later (older firmware versions have lower limits). If in doubt, try some long high-speed moves, then run command M122 and look at the MaxReps value in the output, which you should try to keep below 100. In practice, achieving the maximum speed that the firmware is capable of may require you to use 24V power instead of 12V power, in order that the driver chips can change the current in the stepper motors fast enough.

== Homing file
When configured for a delta printer, RepRapFirmware will always home all three towers by executing sys/homedelta.g when any G28 command is processed, ignoring any X, Y or Z parameters. Typical contents of homedelta.g would be:

<<
G91                         ; use relative positioning
G1 S1 X300 Y300 Z300 F2500  ; move all carriages up 300mm, stopping at the endstops
G1 S2 X-5 Y-5 Z-5           ; move all towers down 5mm
G1 S1 X8 Y8 Z8 F500         ; move towers slowly up 8mm, stopping at the endstops
G1 S2 X-5 Y-5 Z-5 F10000    ; move carriages down 5mm
G90                         ; back to absolute positioning
>>

Adjust the “300” numbers in the first line to be somewhat greater than your maximum print height, to ensure that the carriages reach the endstops. During initial testing, you may wish to reduce the homing speed value “2500” in the second line to a lower value, to give yourself more time to press the reset or power button if something goes wrong. Alternatively, reduce the motor currents during initial testing using the M906 command.

The above works because when the S1 or S2 parameter is used in a G0 or G1 command, the X, Y and Z values in the command are used as values for the individual towers instead of the head coordinates. In the case of S1, the endstops are activated too.

== Setting up the Z probe deploy and retract files

If your machine has a mechanical Z probe that needs to be deployed by moving the head in certain ways (e.g. standard Mini Kossel), then you need to set up macro files for deploying and retracting the probe. These are typically named sys/deployprobe.g and sys/retractprobe.g. Here is a sample deployprobe.g file:

<<
M564 S0                ; don't apply limits
G1 X25 Y93 Z40 F10000  ; put probe arm next to belt
G1 X-5 F500            ; move probe arm slowly across belt
G1 X12 F1000           ; move probe back
G1 X0 Y0 F10000        ; move to somewhere sensible
M564 S1                ; apply limits again
>>

Here is a sample retractprobe.g file:

<<
M564 S0           ; don't apply limits
G1 Z40 F10000     ; raise head
G1 X-59 Y66 Z35   ; move over the post
G1 Z7 F500        ; push probe down on post
G1 Z35 F10000     ; raise head again
G1 X0 Y0          ; move to somewhere sensible
M564 S1           ; apply limits again
>>

== Setting up the auto calibration file

RepRapFirmware-dc42 supports a fast auto-calibration process. From a single set of bed probe readings, the firmware uses a mathematical model of the delta geometry to calculate the corrections needed so as to minimise the sum of the squares of the height errors at the probe points. It reports the RMS (root-mean-square) of the bed probe height error before probing, and the expected RMS error when the calibration has been done. On a typical delta printer, the auto calibration process takes about 30 seconds, this being the time taken to probe the bed.

The mathematical model of delta geometry used by RepRapFirmware assumes that the bed is flat, all diagonal rods have the same lengths, and all three towers are perpendicular to the bed. If these constraints are satisfied, then a single auto calibration cycle is sufficient. If not, you may need to run auto calibration two or three times before the corrections converge.

Auto calibration is performed by sending command G32 (which is the same command used to do auto bed compensation on a Cartesian printer). This command runs macro file sys/bed.g, so all the work is done there. Here is a sample bed.g file:

<<
M561                            ; clear any bed transform, otherwise homing may be at the wrong height
G31 X0 Y0                       ; don't want any probe offset for this
G28                             ; home the printer

;*** Remove the following two lines if your Z probe does not need to be deployed
M98 Pdeployprobe.g              ; deploy the mechanical Z probe
G30 P0 X0 Y0 Z-99999            ; dummy probe, because the mechanical probe gives inaccurate results the first time it is used after deployment

; Probe the bed and do 6-factor auto calibration
G30 P0 X-73.6 Y-42.5 Z-99999    ; X tower
G30 P1 X0 Y-85 Z-99999          ; between X and Y towers
G30 P2 X73.6 Y-42.5 Z-99999     ; Y tower
G30 P3 X73.6 Y20 Z-99999        ; between Y and Z towers
G30 P4 X0 Y67 Z-99999           ; Z tower
G30 P5 X-73.6 Y20 Z-99999       ; between Z and X towers
G30 P6 X-36.8 Y-21.25 Z-99999   ; half way to X tower
G30 P7 X36.8 Y-21.25 Z-99999    ; half way to Y tower
G30 P8 X0 Y42.5 Z-99999         ; half way to Z tower
G30 P9 X0 Y0 Z-99999 S6         ; centre, and auto-calibrate 6 factors

;*** Remove the following line if your Z probe does not need to be retracted
M98 Pretractprobe.g             ; retract the mechanical Z probe

G1 X0 Y0 Z150 F15000            ; get the head out of the way of the bed
>>

The probing is commanded by the G30 commands. You can have up to 16 probe points, numbered P0 to P15. The probe positions and order are not critical, but you should cover at least the centre and the extremities of the bed, both next to towers and opposite the towers, and some points in between the centre and the periphery. The XY coordinates are where the nozzle will be, so if the Z probe is displaced from the nozzle then you must ensure that the probe is always over the bed, even if this means moving some of the probe points in from the edge.

This example uses ten points: six around the periphery, one at the centre, and three halfway between the centre and the periphery. For large delta printers, add at least 3 more probe points halfway to the periphery.

If your Z probe has different trigger heights at different XY positions, you can add an H parameter to each G30 command. This gives the value that must be added to the G31 Z parameter to get the actual trigger height at that point. Set the G31 Z parameter so that it is accurate when probing the centre of the bed, and use the H parameter to correct for different trigger heights at the other bed probe points. The H parameter is supported in firmware version 1.09e-dc42 and later.

The S parameter on the final G30 command defines what calculation is actually done, as follows:

S=-1 Don't adjust anything, just print the height error at each probe point

S=0 Equivalent to S=<number_of_points_probed>

S=3 Adjust homing switch corrections only

S=4 Adjust homing switch corrections and delta radius

S=6 Adjust homing switch corrections, delta radius, and X and Y tower position offsets

S=7 Adjust homing switch corrections, delta radius, X and Y tower position offsets, and diagonal rod length

The adjustments are made so as to minimise the sum of the squares of the height errors. 

If your printer is accurately built, then 4-factor calibration may be sufficient. For normal use I recommend 6-factor calibration. If you choose 7-factor calibration, then you need to include probe points that are opposite the towers and far enough away so that the rods to the farthest tower are nearly horizontal, otherwise the diagonal rod length is not very well defined by the probing errors. To achieve this, you will need an oversized bed, and you may need to temporarily allow movement outside the normal printing radius using the M574 command.

If you wish, you can define several variants of bed.g and run them using the M98 command, or just 'print' them like any other gcode file. In particular, it is useful to have a variant that uses S-1 on the final G30 command, so that you can check the height errors multiple times without adjusting anything, to get an idea of how reproducible the Z probe height readings are.

To calculate suitable XY positions for probing and generate the bed.g file, use this "bed.g file calculator http://escher3d.com/pages/wizards/wizardbed.php".

'''Very Important!''' By default, probing starts 3mm above where the printer thinks the bed is. This is sufficient when your printer is calibrated, however it may not be enough for first-time calibration if the endstops or the delta radius are a long way off. So '''I recommend you increase it to 20mm (or more) for first time calibration, by increasing the H parameter in the M558 command in the Z probe configuration section of config.g to H20'''. See %Cartesian configuration Z-probe%Cartesian_Config!Z_probe_section.

=== Probing by pushing the bed with the hotend
Some probing systems, as FSR or the system used on the Fisher delta, needs to push the bed for probing, but the force to trigger the probe depends of the probing location.
This means that the printer mechanism deflect under load and there is a probing offset variation between each probe point. On the Fisher, this variation may be up to 0.15~0.2 mm.
Recent version of the DC42 fork added a H parameter to the G30 command to ease this offset definition. This may need firmware more recent than those supplied by manufacturer.

example with 4 parameters and 7 points calibration:
<<
G30 P0 X-60 Y-37.5   	H-0.12 Z-99999	; X tower
G30 P1 X64.95 Y-37.5 	H-0.12 Z-99999	; Y tower
G30 P2 X0 Y75 		H-0.12 Z-99999	; Z tower
G30 P3 X-32.48 Y-18.75	H-0.15 Z-99999	; half way to X tower
G30 P4 X32.48 Y-18.75	H-0.15 Z-99999	; half way to Y tower
G30 P5 X0 Y37.5 	H-0.15 Z-99999	; half way to Z tower
G30 P6 X4 Y0 		H-0.17 Z-99999 S4 ; centre, and auto-calibrate
>>

The offset defined in G31 Z parameter (set up in config file) will be added to the probe points offsets as defined above.

== Updating config.g

If the calibration errors are small, a single execution of bed.g will calibrate your printer accurately. Larger errors my require 2 or 3 runs to calibrate out. So I suggest the following procedure:

# Run auto calibration, then use the M665 and M666 commands with no parameters to see the adjustments made.
# Repeat (1) until the M665 and M666 results converge.
# Edit those results into the M665 and M666 commands in config.g.
# Reset the controller to load the new config.g file (easiest way is to use the Emergency Stop button on the web interface) and test.
# If you are happy that the calibration is close to correct when you power up, you can change the H parameter in the M558 command back to about 3 for faster bed probing.

After this, a single auto calibration run should be sufficient. Note that the X and Y parameters of the M665 command are only supported in firmware version 1.09d-dc42 and later.

== Testing the motors individually

You can test the three tower motors individually by putting the printer in relative mode (G91 command) and then using the G1 command with S2 parameter. For example, sending G1 S2 X10 should move the X carriage up 10mm, and sending G1 S2 X-10 should move the X carriage down 10mm. Similarly for Y and Z. If a motor moves the wrong way, you can reverse it by changing the corresponding M569 command in config.g. For example, if the X motor moves the wrong way, change M569 P0 S1 to M569 P0 S0.

<small> This page is released under license CC BY-SA 3.0 and GFDL 1.2  Author: DC42</small>

■Commissioning
Commissioning
(:date 11 Aug 2016 02:05:)This page shall be developed, but yet you may have a look at the below pages

==Software update
%Duet firmware Update%Duet_Firmware_Update
%Updating RepRap Firmware config.g file%Updating_config

== Configuration and commissioning 
*%Configuring for a Cartesian printer%Cartesian_config
*%Configuring for a CoreXY printer%CoreXY_config
*%Configuring and calibrating a delta printer%Delta_config
*"T3P3 guide to the config.g and homing files http://blog.think3dprint3d.com/2015/02/reprapfirmware-config-files.html" for Cartesian printers
* Preconfigured config.g files for various printers: "https://github.com/reprappro/RepRapFirmware/tree/test/SD-image" and "https://github.com/dc42/RepRapFirmware/tree/dev/SD-image"
* RepRapPro guide for commissioning Duet-based printers, including updating firmware: "https://reprappro.com/documentation/commissioning-introduction/commissioning-duet/." You may also find their wiring diagrams for the Ormerod, Huxley and Mendel useful.
* Duet troubleshooting guide: "https://reprappro.com/documentation/troubleshooting-introduction/electronics-problems/"
*DC42 fork allow external driver to be connected on the %expansion connector%Duet_pinout  and remapped with %M569%gcode_cvt!M569.3a_Set_axis_direction_and_enable_values" . See "http://forums.reprap.org/read.php?178,552124,552305"
*"Using Duet with wifi router on blog.think3dprint3d.com http://blog.think3dprint3d.com/2014/04/using-duet-with-wifi-router.html"
*Useful %RepRap Firmware macros%Macros
*%RepRap Firmware heating%Heating for configuration and tuning of heating loops
*%Connecting thermistors%Connecting_thermistors
*%Connecting thermocouples sensors%Connecting_thermocouples
*%Connecting PT100 temperature sensors%Connecting_PT100
*%RepRap Firmware release notes%Release_notes

■duet_hardware
Duet hardware trail
(:date 11 Aug 2016 02:05:)*%Duet%%
*%Duet pinout%duet_pinout
*%Duet wiring%%
*%Duet firmware update%%


■choosing stepper
Choosing stepper motors
(:date 15 Aug 2016 03:09:)== Considerations when choosing stepper motors
=== Number of wires (unipolar/bipolar)
The Duet and Duet WiFi use bipolar stepper motor drivers. This means you can use stepper motors suitable for bipolar drive, which have 4, 6 or 8 wires. You cannot use motors with 5 wires, because those are intended to be driven in unipolar mode only.

=== Rated current
This is the maximum current you may pass through both windings at the same time. The maximum current through one winding (which is what really matters when using microstepping) is rarely quoted and will be a little higher. However, even with one winding driven at the quoted rated current, the motor will get very hot. So the usual practice is to set the motor current to no more than about 85% of the rated current. Therefore, to get maximum torque out of your motors without overheating them, you should choose motors with a current rating no more than 20% higher than the recommended maximum stepper driver current. This gives:

*Duet 0.6 and Duet 0.8.5 (recommended maximum motor current 1.5A) => Stepper motor rated current <= 1.8A (or 2A at a push)
*Duet WiFi (recommended maximum motor current 2.0A using current firmware) => Stepper motor rated current <= 2.4A


The maximum recommended stepper motor current for the Duet WiFi is likely to be increased in a future firmware revision.

=== Holding torque
This is the maximum torque that the motor can provide with both windings energised at full current before it starts jumping steps. The holding torque with one winding energised at the rated current is about 0.707 times that. The torque is proportional to current (except at low currents), so for example if you run the motor the drivers set to 85% of its rated current, then the maximum torque will be 85% * 0.707 = 60% of the specified holding torque.

Torque is produced when the rotor angle is different from the ideal angle that corresponds to the current in its windings. When a stepper motors is accelerating, it has to produce torque to overcome its own rotor inertia and the mass of the load it is driving. In order to produce this torque, the rotor angle must lag the ideal angle. In turn, the load will lag the position as commanded by the firmware.

You will sometimes see it written that microstepping reduces torque. What this really means is that when the lag angle is assumed to be equal to the angle corresponding to one microstep (because you want the position to be accurate to within one microstep), higher microstepping implies a smaller lag angle, hence lower torque.

=== Size
There are two relevant sizes: the Nema size number and the length. The Nema size number defines the square dimension of the body and the mounting hole positions. The most popular size for 3D printers is Nema 17, which has a body no more than 42.3mm square and fixing holes in a square of side 31mm.

Nema 17 motors come in various lengths, ranging from 20mm long "pancake" motors to 60mm long motors. As a general rule, the longer a motor is, the greater its holding torque at rated current. Longer stepper motors also have greater rotor inertia.

=== Step angle
There are two common step angles: 0.9 and 1.8 degrees per full step, corresponding to 400 and 200 steps/revolution. Most 3D printer use 1.8 deg/step motors.

Aside from the obvious difference in step angle:

*0.9deg motors have slightly lower holding torque than similar 1.8deg motors from the same manufacturer
*However, to produce a given torque, the lag angle needed by a 0.9deg motor is slightly more than half the lag angle of a similar 1.8deg motor. Or to put it another way, at small lag angles a 0.9deg motor has nearly twice as much torque as a 1.8deg motor for the same lag angle.
*At a given rotation speed, a 0.9deg motor produces twice as much back emf as a 1.8deg motor. So you generally need to use 24V power to achieve high speeds with 0.9deg motors.

=== Inductance
The inductance of the motor affects how fast the stepper motor driver can drive the motor before the torque drops off. If we temporarily ignore the back emf due to rotation, and the rated motor voltage is much less than the driver supply voltage, then the maximum revs/second before torque drops off is:

 revs_per_second = (2 * supply_voltage)/(steps_per_rev * pi * inductance * current)

If the motor is driving a GT2 belt via a pulley, this gives the maximum speed in mm/sec as:

 speed = (4 * pulley_teeth * supply_voltage)/(steps_per_rev * pi * inductance * current)

Example: a 1.8deg/step (i.e. 200 steps/rev) motor with 4mH inductance run at 1.5A using a 12V supply, and driving a GT2 belt with 20 tooth pulley would start losing torque at about 250mm/sec. This is the belt speed, which on a CoreXY or delta printer is not the same as the head speed.

In practice the torque will drop off sooner than this because of the back emf caused by motion, and because the above doesn't allow for the winding resistance. Low inductance motors also have low back emf due to rotation.

What this means is that if we want to achieve high speeds, we need low inductance motors.

=== Resistance and rated voltage
These are simply the resistance per phase, and the voltage drop across each phase when the motor is stationary and the phase is passing its rated current (which is the produce of the resistance and the rated current). These are unimportant, except that the rated voltage should be well below the power supply voltage to the stepper drivers.

== General recommendations
*Unless you will be using external stepper motor drivers, choose motors with rated current of at least 1.2A, and at most 1.8A (or 2.0A at a push) for the Duet 0.6 and Duet 0.8.5, or 2.5A for the Duet WiFi.
*Plan to run each stepper motor at between 50% and 85% of its rated current.
*Nema 17 is the most popular size used in 3D printers.
*Nema 14 is an alternative in a highly-geared extruder.
*Use Nema 23 motors only if you cannot get sufficient torque from long Nema 17 motors.
*Avoid motors with rated voltage (or product of rated current and phase resistance) > 4V or inductance > 4mH.
*Choose 0.9deg/step motors only if you want high positioning accuracy (e.g. for the tower motors of delta printers). Otherwise choose 1.8deg/step motors. If you choose 0.9deg/step motors, use 24V power.
*If using a highly-geared extruder (for example, an extruder that uses a flexible drive cable to transmit the torque from the motor to a worm reduction gear), use a short low-inductance 1.8deg/step motor to drive it.






